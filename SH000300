
//根据20191216实盘程序改用CTP 中银国际期货测试版  CTP用上期技术测评版

#include "unistd.h" //Linux linux
#include "iostream"
using namespace std;
#include "vector"
#include "stdlib.h"
#include "stdio.h"
#include "ctime"
#include "math.h"
#include "string"
#include "sstream"
#include "time.h"
#include "fstream"
#include "sstream"
#include "string.h"//
#include "fetcher.h"
#include <map>
#include "out_fetcher.h"

#include <sys/syscall.h>//获取线程id

//CTP--------------------------------------------------------------------------------------
#include "unistd.h" //获取线程id,必须有这个
#include <sys/syscall.h>//获取线程id

#include <thread>  //线程编译：g++ -g -o all_xin.out  CTP_ceshi_20191226.cpp -fPIC -D IS_UNIX -ldl -L  ./  thostmduserapi_se.so thosttraderapi_se.so libfetcher.so -lpthread -std=c++11
#include <mutex> //互斥量

#include "ThostFtdcMdApi.h"
#include "ThostFtdcTraderApi.h"
#include "ThostFtdcUserApiDataType.h"
#include "ThostFtdcUserApiStruct.h"
//以上CTP


#pragma comment(lib,"fetcher.lib")
#ifdef _DEBUG
#pragma comment(lib,"codec_debug.lib")
#else
#pragma comment(lib,"codec_release.lib")
#endif

bool decode_json_static(const char* str, vector<MutiTypeDataOneDay>* out);
int g_entrustid = 0;
//----------------------------------------------------------------------------------------------------------------------
ofstream os_synget_check("JuJiZhanfa_data/os_synget_check.txt");//实盘检查  路径

ofstream os_check("JuJiZhanfa_data/os_check.txt");
//实时行情检查-------------------------------------------------------------
ofstream os_real_heyueprice_check("JuJiZhanfa_data/os_real_heyueprice_check.txt");
ofstream os_real_capital_check("JuJiZhanfa_data/os_real_capital_check.txt");
ofstream os_real_indexprice_check("JuJiZhanfa_data/os_real_indexprice_check.txt");
ofstream os_real_eliang_check("JuJiZhanfa_data/os_real_eliang_check.txt");
ofstream os_real_donglixian_check("JuJiZhanfa_data/os_real_donglixian_check.txt");
ofstream os_real_daneidawai_check("JuJiZhanfa_data/os_real_daneidawai_check.txt");
ofstream os_real_pingfen_check("JuJiZhanfa_data/os_real_pingfen_check.txt");
ofstream os_real_forceXD_check("JuJiZhanfa_data/os_real_forceXD_check.txt");
ofstream os_real_weimaiweimai_check("JuJiZhanfa_data/os_real_weimaiweimai_check.txt");
ofstream os_real_weimai38_check("JuJiZhanfa_data/os_real_weimai38_check.txt");
//历史行情检查--------------------------------------------------------------
ofstream os_history_heyueprice_check("JuJiZhanfa_data/os_history_heyueprice_check.txt");
ofstream os_historyl_capital_check("JuJiZhanfa_data/os_historyl_capital_check.txt");
ofstream os_history_indexprice_check("JuJiZhanfa_data/os_history_indexprice_check.txt");
ofstream os_history_eliang_check("JuJiZhanfa_data/os_history_eliang_check.txt");
ofstream os_history_donglixian_check("JuJiZhanfa_data/os_history_donglixian_check.txt");
ofstream os_history_daneidawai_check("JuJiZhanfa_data/os_history_daneidawai_check.txt");
ofstream os_history_pingfen_check("JuJiZhanfa_data/os_history_pingfen_check.txt");
ofstream os_history_forceXD_check("JuJiZhanfa_data/os_history_forceXD_check.txt");
ofstream os_history_weimaiweimai_check("JuJiZhanfa_data/os_history_weimaiweimai_check.txt");
ofstream os_history_weimai38_check("JuJiZhanfa_data/os_history_weimai38_check.txt");
//--------------------------------------------------------------------------
ofstream os_xiadan_check("JuJiZhanfa_data/os_xiadan_check.txt");
int nnn=0;

ofstream os_ave_check("JuJiZhanfa_data/os_ave_check.txt");
//

void data_callback(const char* market, const char* code, int metaId, int from, const char* datas, int len);

struct Entrust
{
	int baodanhao;
	int maimai;
	int kaiping;
	double amount;
	char status;
};
Entrust this_entrust;

struct Position
{
	double buyPosition;
	double sellPosition;
};
Position g_position;

void parse_block(param_block* blk);
void trader_callback(param_block* blk);
//--------------------------------------------------------------------------------------------
int time2Seconds(int year, int month, int day, int hour, int minute, int second);
int time2Seconds(int date, int time);

struct StructDataValue
{
	int m_metaId;
	int m_timeTag;
	vector<double> m_fields;
};
//--------------------------------------------------------------------------------------------
vector<StructDataValue> vStructDataValue;//取历史数据，公用的容器
vector<StructDataValue> zhuanhuan(vector<MutiTypeDataOneDay> vdata);


//原程序的声明-----------------------------------------------------------------------------------------------------------
#pragma region yuan_declaration

//上证指数//////////////////////////////////////////////////////////////
//45指数价格(秒)
//20合约价格
vector<StructDataValue> vPrice;    //指数价格
vector<StructDataValue> Heyue_Info;  //合约价格
vector<StructDataValue> pingfen;   //指数评分
vector<StructDataValue> vpingfen_SH000001;   //上证指数评分
vector<StructDataValue> weimaiweimai;//委卖委买
vector<StructDataValue> vIndexAmount;  //成交量和成交额
//主力等级需要以下
//exprs="((1.05659*(%1%)-(%2%))/((%3%)) - 0) / (0.7 * (%4%))"
vector<StructDataValue> Indexchengjiaoe;//分钟数据
vector<StructDataValue> DaneipanDawaipan;//分钟数据
vector<StructDataValue> vMovedata;       //日数据
vector<StructDataValue> vCapital;//盘面资金
vector<StructDataValue> vCapital_fu1;//盘面资金
vector<StructDataValue> vCapital_fu2;//盘面资金
vector<StructDataValue> vCapital_fu3;//盘面资金
vector<StructDataValue> vCapital_fu4;//盘面资金
vector<StructDataValue> vCapital_fu5;//盘面资金

vector<double> indexprice_ave_today;
vector<double> indexprice_ave_fu1;//前一天指数均线
vector<double> indexprice_ave_fu2;//
vector<double> indexprice_ave_fu3;//
vector<double> indexprice_ave_fu4;//
vector<double> indexprice_ave_fu5;//
vector<double> indexprice_compare_pingfen;

//委托额
vector<StructDataValue> vweimaiweimai_fu1;//委托额
vector<StructDataValue> vweimaiweimai_fu2;//委托额
vector<StructDataValue> vweimaiweimai_fu3;//委托额
vector<StructDataValue> vweimaiweimai_fu4;//委托额
vector<StructDataValue> vweimaiweimai_fu5;//委托额

//并列界面的期货动力线需要3个
vector<StructDataValue> vecSecForceXD;
vector<StructDataValue> vecEMACQuantity;
vector<StructDataValue> vecCommonRating;
vector<StructDataValue> vecSecForceXD1;
vector<StructDataValue> vecEMACQuantity1;
vector<StructDataValue> vecCommonRating1;
vector<StructDataValue> vecSecForceXD2;
vector<StructDataValue> vecEMACQuantity2;
vector<StructDataValue> vecCommonRating2;

//计算指数资金等级
vector<StructDataValue> vPreviousCotDataByDay;//日数据
vector<double> vCotMoveAverage;
vector<double> vCotMoveStandard;
double aCotMoveAverage_forToday=0.0;
double aCotMoveStandard_forToday=0.0;
vector<double> CapitalDengJi;
double aCotMoveAverage_forFu1=0.0;
double aCotMoveAverage_forFu2=0.0;
double aCotMoveAverage_forFu3=0.0;
double aCotMoveAverage_forFu4=0.0;
double aCotMoveAverage_forFu5=0.0;
double aCotMoveStandard_forFu1=0.0;
double aCotMoveStandard_forFu2=0.0;
double aCotMoveStandard_forFu3=0.0;
double aCotMoveStandard_forFu4=0.0;
double aCotMoveStandard_forFu5=0.0;
vector<double> CapitalDengJi_fu1;
vector<double> CapitalDengJi_fu2;
vector<double> CapitalDengJi_fu3;
vector<double> CapitalDengJi_fu4;
vector<double> CapitalDengJi_fu5;

//昨日指数收盘价
vector<StructDataValue> vec_pre_IndexPrice;
double yesterday_shoupanjia_indexPrice=0.0;

vector<StructDataValue> vWBDJ38;
vector<StructDataValue> vWBDJ10073;

vector<StructDataValue> vecStruct1;
vector<StructDataValue> vecStruct2;
vector<StructDataValue> vecStruct3;
vector<StructDataValue> vecStruct4;
vector<StructDataValue> vecStruct5;
vector<StructDataValue> vecStruct6;
vector<StructDataValue> vecStruct7;
vector<StructDataValue> vecStruct8;

vector<int> date_all;
vector<int> date_valid;
vector<StructDataValue> vvPrice;
void date_process(int start_date,int end_date);

string getContract(int year_month_day,string HeyueTag);

vector<double> index_huanshoulv86400;
vector<int> date_huanshoulv;
vector<double> index_chengjiaoe86400;
vector<double> index_chengjiaoliang86400;
vector<int> date_chengjiaoe;
ofstream os_huanshoulv("JuJiZhanfa_data/os_huanshoulv.txt");

time_t t_ctrl=0,pre_t_ctrl=0;
struct tm *pt_ctrl;

//历史数据预处理成14400个标准数据流
//原始数据不再给每个指数保存，只分别创建14400数据流变量接收函数处理后的数据
int dataPreProcess(int today,int day_fu1,int day_fu2,int day_fu3,int day_fu4,int day_fu5,int kk,string idxCode,string HeyueTag);

void prepareDataOfLast5(double indexprice);
void getHuanshoulv(int today,string idxCode);
void dataRealProcess(int h,int whichzhibiaolai);
//指数价格
ofstream os_new_original_secondIndexPrice("JuJiZhanfa_data/os_new_original_secondIndexPrice.txt");
vector<int> hour_new_original_secondIndexPrice;
vector<int> minute_new_original_secondIndexPrice;
vector<int> second_new_original_secondIndexPrice;
vector<double> new_original_secondIndexPrice;
ofstream os_new_14400_secondIndexPrice("JuJiZhanfa_data/os_new_14400_secondIndexPrice.txt");
vector<int> new_14400_indexpriceTimeflag;
vector<int> hour_new_14400_secondIndexPrice;
vector<int> minute_new_14400_secondIndexPrice;
vector<int> second_new_14400_secondIndexPrice;
vector<double> new_14400_secondIndexPrice;
//add
ofstream os_minuteIndexprice_huatu("JuJiZhanfa_data/os_minuteIndexprice_huatu.txt");
ofstream os_minuteIndexprice_check("JuJiZhanfa_data/os_minuteIndexprice_check.txt");
vector<int> hour_new_minuteIndexPrice;
vector<int> minute_new_minuteIndexPrice;
vector<int> second_new_minuteIndexPrice;
vector<double> new_minuteIndexPrice;
ofstream os_feng("JuJiZhanfa_data/os_feng.txt");
ofstream os_gu("JuJiZhanfa_data/os_gu.txt");
//指数盘面资金
ofstream os_new_original_secondCapital("JuJiZhanfa_data/os_new_original_secondCapital.txt");
vector<int> hour_new_original_secondCapital;
vector<int> minute_new_original_secondCapital;
vector<int> second_new_original_secondCapital;
vector<double> new_original_secondCapital;
ofstream os_new_14400_secondCapital("JuJiZhanfa_data/os_new_14400_secondCapital.txt");
vector<int> new_14400_capitalTimeflag;
vector<int> hour_new_14400_secondCapital;
vector<int> minute_new_14400_secondCapital;
vector<int> second_new_14400_secondCapital;
vector<double> new_14400_secondCapital;
//add
ofstream os_capital_huatu("JuJiZhanfa_data/os_capital_huatu.txt");
ofstream os_capital_check("JuJiZhanfa_data/os_capital_check.txt");
vector<int> hour_new_minuteCapital;
vector<int> minute_new_minuteCapital;
vector<int> second_new_minuteCapital;
vector<double> new_minuteCapital;
//合约价格
ofstream os_new_original_secondHeyuePrice("JuJiZhanfa_data/os_new_original_secondHeyuePrice.txt");
vector<int> hour_new_original_secondHeyuePrice;
vector<int> minute_new_original_secondHeyuePrice;
vector<int> second_new_original_secondHeyuePrice;
vector<double> new_original_secondHeyuePrice;
vector<double> new_original_secondHeyueAmount;
ofstream os_new_14400_secondHeyuePrice("JuJiZhanfa_data/os_new_14400_secondHeyuePrice.txt");
vector<int> new_14400_heyuepriceTimeflag;
vector<int> hour_new_14400_secondHeyuePrice;
vector<int> minute_new_14400_secondHeyuePrice;
vector<int> second_new_14400_secondHeyuePrice;
vector<double> new_14400_secondHeyuePrice;
vector<double> new_14400_secondHeyueAmount;
//add
vector<int> new_14400_ifpriceTimeflag;
vector<int> hour_new_14400_secondIFPrice;
vector<int> minute_new_14400_secondIFPrice;
vector<int> second_new_14400_secondIFPrice;
vector<double> new_14400_secondIFPrice;
vector<double> new_14400_secondIFAmount;
ofstream os_new_minuteIFPrice("JuJiZhanfa_data/os_new_minuteIFPrice.txt");
vector<int> hour_new_minuteHeyuePrice;
vector<int> minute_new_minuteHeyuePrice;
vector<int> second_new_minuteHeyuePrice;
vector<double> new_minuteHeyuePrice;
vector<double> new_minuteHeyueAmount;

//指数评分
ofstream os_new_original_secondPingfen("JuJiZhanfa_data/os_new_original_secondPingfen.txt");
vector<int> hour_new_original_secondPingfen;
vector<int> minute_new_original_secondPingfen;
vector<int> second_new_original_secondPingfen;
vector<double> new_original_secondPingfen1;
vector<double> new_original_secondPingfen2;
vector<double> new_original_secondPingfen3;
ofstream os_new_14400_secondPingfen("JuJiZhanfa_data/os_new_14400_secondPingfen.txt");
vector<int> new_14400_pinfenTimeflag;
vector<int> hour_new_14400_secondPingfen;
vector<int> minute_new_14400_secondPingfen;
vector<int> second_new_14400_secondPingfen;
vector<double> new_14400_secondZhuLipingfen;
vector<double> new_14400_secondZhiChengpingfen;
vector<double> new_14400_secondPaoYapingfen;
//add
ofstream os_pingfen_huatu("JuJiZhanfa_data/os_pingfen_huatu.txt");
ofstream os_pingfen_check("JuJiZhanfa_data/os_pingfen_check.txt");
vector<int> hour_new_minutePingFen;
vector<int> minute_new_minutePingFen;
vector<int> second_new_minutePingFen;
vector<double> new_minuteZhuLipingfen;
vector<double> new_minuteZhiChengpingfen;//已对照
vector<double> new_minutePaoYapingfen;

//上证指数评分
ofstream os_new_original_secondPingfen_SH000001("JuJiZhanfa_data/os_new_original_secondPingfen_SH000001.txt");
vector<int> hour_new_original_secondPingfen_SH000001;
vector<int> minute_new_original_secondPingfen_SH000001;
vector<int> second_new_original_secondPingfen_SH000001;
vector<double> new_original_secondPingfen1_SH000001;
vector<double> new_original_secondPingfen2_SH000001;
vector<double> new_original_secondPingfen3_SH000001;
ofstream os_new_14400_secondPingfen_SH000001("JuJiZhanfa_data/os_new_14400_secondPingfen_SH000001.txt");
vector<int> new_14400_pinfenTimeflag_SH000001;
vector<int> hour_new_14400_secondPingfen_SH000001;
vector<int> minute_new_14400_secondPingfen_SH000001;
vector<int> second_new_14400_secondPingfen_SH000001;
vector<double> new_14400_secondZhuLipingfen_SH000001;
vector<double> new_14400_secondZhiChengpingfen_SH000001;
vector<double> new_14400_secondPaoYapingfen_SH000001;
//add
ofstream os_pingfen_huatu_SH000001("JuJiZhanfa_data/os_pingfen_huatu_SH000001.txt");
ofstream os_pingfen_check_SH000001("JuJiZhanfa_data/os_pingfen_check_SH000001.txt");
vector<int> hour_new_minutePingFen_SH000001;
vector<int> minute_new_minutePingFen_SH000001;
vector<int> second_new_minutePingFen_SH000001;
vector<double> new_minuteZhuLipingfen_SH000001;
vector<double> new_minuteZhiChengpingfen_SH000001;//已对照
vector<double> new_minutePaoYapingfen_SH000001;
//指数委卖委买额
ofstream os_new_original_secondWeimaiWeimai("JuJiZhanfa_data/os_new_original_secondWeimaiWeimai.txt");
vector<int> hour_new_original_secondWeimaiWeimai;
vector<int> minute_new_original_secondWeimaiWeimai;
vector<int> second_new_original_secondWeimaiWeimai;
vector<double> new_original_secondWeimairu;
vector<double> new_original_secondWeimaichu;
ofstream os_new_14400_secondWeimaiWeimai("JuJiZhanfa_data/os_new_14400_secondWeimaiWeimai.txt");
vector<int> new_14400_weimaiweimaiTimeflag;
vector<int> hour_new_14400_secondWeimaiWeimai;
vector<int> minute_new_14400_secondWeimaiWeimai;
vector<int> second_new_14400_secondWeimaiWeimai;
vector<double> new_14400_secondweimairu;
vector<double> new_14400_secondweimaichu;
//add
ofstream os_new_minuteWeimaiWeimai_huatu("JuJiZhanfa_data/os_new_minuteWeimaiWeimai_huatu.txt");
ofstream os_new_minuteWeimaiWeimai_check("JuJiZhanfa_data/os_new_minuteWeimaiWeimai_check.txt");
vector<int> hour_new_minuteWeimaiWeimai;
vector<int> minute_new_minuteWeimaiWeimai;
vector<int> second_new_minuteWeimaiWeimai;
vector<double> new_minuteWeimairu;
vector<double> new_minuteWeimaichu;
vector<double> new_minuteWeimaichu_junxian;

//指数成交额和成交量  原来各处用的成交量秒数据
ofstream os_new_original_secondELiang("JuJiZhanfa_data/os_new_original_secondELiang.txt");
vector<int> hour_new_original_secondELiang;
vector<int> minute_new_original_secondELiang;
vector<int> second_new_original_secondELiang;
vector<double> new_original_secondE;
vector<double> new_original_secondLiang;
ofstream os_new_14400_secondELiang("JuJiZhanfa_data/os_new_14400_secondELiang.txt");
vector<int> new_14400_ELiangTimeflag;
vector<int> hour_new_14400_secondELiang;
vector<int> minute_new_14400_secondELiang;
vector<int> second_new_14400_secondELiang;
vector<double> new_14400_secondE;
vector<double> new_14400_secondLiang;
//add
ofstream os_new_minuteELiang_huatu("JuJiZhanfa_data/os_new_minuteELiang_huatu.txt");
ofstream os_new_minuteELiang_check("JuJiZhanfa_data/os_new_minuteELiang_check.txt");
vector<int> hour_new_minuteELiang;
vector<int> minute_new_minuteELiang;
vector<int> second_new_minuteELiang;
vector<double> new_minuteE;
vector<double> new_minuteLiang;
//以下指数主力等级////////////////
//成交额  主力等级用到的成交额分钟数据
ofstream os_new_original_secondZLDJe("JuJiZhanfa_data/os_new_original_secondZLDJe.txt");
vector<int> hour_new_original_secondZLDJe;
vector<int> minute_new_original_secondZLDJe;
vector<int> second_new_original_secondZLDJe;
vector<double> new_original_secondZLDJe;
ofstream os_new_14400_secondZLDJe("JuJiZhanfa_data/os_new_14400_secondZLDJe.txt");
vector<int> new_14400_ZLDJeTimeFlag;
vector<int> hour_new_14400_secondZLDJe;
vector<int> minute_new_14400_secondZLDJe;
vector<int> second_new_14400_secondZLDJe;
vector<double> new_14400_secondZLDJe;
//add
ofstream os_new_minuteZLDJe("JuJiZhanfa_data/os_new_minuteZLDJe.txt");
vector<int> hour_new_minuteZLDJe;
vector<int> minute_new_minuteZLDJe;
vector<int> second_new_minuteZLDJe;
vector<double> new_minuteZLDJe;
//指数大内盘额和大外盘额
ofstream os_new_original_secondDaNeiWaie("JuJiZhanfa_data/os_new_original_secondDaNeiWaie.txt");
vector<int> hour_new_original_secondDaNeiWaie;
vector<int> minute_new_original_secondDaNeiWaie;
vector<int> second_new_original_secondDaNeiWaie;
vector<double> new_original_secondDaNeie;
vector<double> new_original_secondDaWaie;
ofstream os_new_14400_secondDaNeiWaie("JuJiZhanfa_data/os_new_14400_secondDaNeiWaie.txt");
vector<int> new_14400_DaNeiWaieTimeflag;
vector<int> hour_new_14400_secondDaNeiWaie;
vector<int> minute_new_14400_secondDaNeiWaie;
vector<int> second_new_14400_secondDaNeiWaie;
vector<double> new_14400_secondDaNeie;
vector<double> new_14400_secondDaWaie;
//add
ofstream os_new_minuteDaNeiWaie("JuJiZhanfa_data/os_new_minuteDaNeiWaie.txt");
vector<int> hour_new_minuteDaNeiWaie;
vector<int> minute_new_minuteDaNeiWaie;
vector<int> second_new_minuteDaNeiWaie;
vector<double> new_minuteDaNeie;
vector<double> new_minuteDaWaie;
//以下合约动力等级
//ForceXD
ofstream os_new_original_secondForceXD("JuJiZhanfa_data/os_new_original_secondForceXD.txt");
vector<int> hour_new_original_secondForceXD;
vector<int> minute_new_original_secondForceXD;
vector<int> second_new_original_secondForceXD;
vector<double> new_original_secondForceXD;
ofstream os_new_14400_secondForceXD("JuJiZhanfa_data/os_new_14400_secondForceXD.txt");
vector<int> new_14400_forceXDTimeflag;
vector<int> hour_new_14400_secondForceXD;
vector<int> minute_new_14400_secondForceXD;
vector<int> second_new_14400_secondForceXD;
vector<double> new_14400_secondForceXD;
ofstream os_new_minuteForceXD("JuJiZhanfa_data/os_new_minuteForceXD.txt");
vector<int> hour_minuteForceXD;
vector<int> minute_minuteForceXD;
vector<int> second_minuteForceXD;
vector<double> new_minuteForceXD;
ofstream os_donglidengji("JuJiZhanfa_data/os_donglidengji.txt");
vector<double> vDongliLiDengJi;

double emacq=-1e15;
double commonRating=-1e15;

//委比等级  名字起错了  应该是委托额的秒数据  起名ratio了  就这样吧  注释防误解
ofstream os_new_original_secondOrderRatio("JuJiZhanfa_data/os_new_original_secondOrderRatio.txt");
vector<int> hour_new_original_secondOrderRatio;
vector<int> minute_new_original_secondOrderRatio;
vector<int> second_new_original_secondOrderRatio;
vector<double> new_original_secondOrderRatio1;
vector<double> new_original_secondOrderRatio2;
ofstream os_new_14400_secondOrderRatio("JuJiZhanfa_data/os_new_14400_secondOrderRatio.txt");
vector<int> new_14400_OrderRatioTimeflag;
vector<int> hour_new_14400_secondOrderRatio;
vector<int> minute_new_14400_secondOrderRatio;
vector<int> second_new_14400_secondOrderRatio;
vector<double> new_14400_secondOrderRatio1;
vector<double> new_14400_secondOrderRatio2;
ofstream os_new_minuteOrderRatio("JuJiZhanfa_data/os_new_minuteOrderRatio.txt");
vector<int> hour_minuteOrderRatio;
vector<int> minute_minuteOrderRatio;
vector<int> second_minuteOrderRatio;
vector<double> new_minuteOrderRatio1;
vector<double> new_minuteOrderRatio2;
ofstream os_weibidengji("JuJiZhanfa_data/os_weibidengji.txt");
vector<double> vWeiBiDengJi;

double orderRatio1=-1e15;
double orderRatio2=-1e15;
///////////////////////////////////////

struct Jia_Liang{
	double heyue_price;
	double heyue_liang;
};
vector<Jia_Liang> Jia_Liang_jianzhiduis;
ofstream os_JiaLiang_IF("JuJiZhanfa_data/os_JiaLiang_IF.txt");
vector<Jia_Liang> Jia_Liang_jianzhiduis_fu1;
vector<Jia_Liang> Jia_Liang_jianzhiduis_fu2;
vector<Jia_Liang> Jia_Liang_jianzhiduis_fu3;
vector<Jia_Liang> Jia_Liang_jianzhiduis_fu4;
vector<Jia_Liang> Jia_Liang_jianzhiduis_fu5;
ofstream os_JiaLiang_IF_lishi("JuJiZhanfa_data/os_JiaLiang_IF_lishi.txt");
ofstream os_JiaLiang_size_IF_lishi("JuJiZhanfa_data/os_JiaLiang_size_IF_lishi.txt");
ofstream os_JiaLiang_IF_fengzhi("JuJiZhanfa_data/os_JiaLiang_IF_fengzhi.txt");
ofstream os_JiaLiang_IF_fengzhi_all_check("JuJiZhanfa_data/os_JiaLiang_IF_fengzhi_all_check.txt");
vector<double> v_chengjiaofengzhi_lishi;
vector<double> v_chengjiaofengzhi_liang_lishi;
ofstream os_fengzhi_alldays_check("JuJiZhanfa_data/os_fengzhi_alldays_check.txt");

double movedata=-1e15;
vector<double> vZhuLiDengJi;
vector<int> hour_vZhuLiDengJi;
vector<int> minute_vZhuLiDengJi;
vector<int> second_vZhuLiDengJi;
ofstream os_zhulidengji_huatu("JuJiZhanfa_data/os_zhulidengji_huatu.txt");
ofstream os_zhulidengji_check("JuJiZhanfa_data/os_zhulidengji_check.txt");
vector<double> bigFlow;
vector<double> hour_bigFlow;
vector<double> minute_bigFlow;
vector<double> second_bigFlow;
ofstream os_bigflow_huatu("JuJiZhanfa_data/os_bigflow_huatu.txt");
ofstream os_bigflow_check("JuJiZhanfa_data/os_bigflow_check.txt");

int xunhuancishu=0;

int today=0;
int day_fu1=0;
int day_fu2=0;
int day_fu3=0;
int day_fu4=0;
int day_fu5=0;
int day_fu6=0;//-6这天只用于计算-5天的资金等级
string IndexCode;
string HeyueTag;

double ave_capital_last5=0.0;
void getAveCapitalLast5();
vector<double> AveCapital_240_dayfu1;//资金均值
vector<double> AveCapital_240_dayfu2;
vector<double> AveCapital_240_dayfu3;
vector<double> AveCapital_240_dayfu4;
vector<double> AveCapital_240_dayfu5;
vector<double> Capital_240_dayfu1;//资金本身
vector<double> Capital_240_dayfu2;
vector<double> Capital_240_dayfu3;
vector<double> Capital_240_dayfu4;
vector<double> Capital_240_dayfu5;
ofstream os_AveCapital_fu("JuJiZhanfa_data/os_AveCapital_fu.txt");
vector<double> mean_5fuAveCot;
vector<double> std_5fuAveCot;
vector<double> cot_huanchongdai1;
vector<double> cot_huanchongdai2;
vector<double> cot_huanchongdai3;
vector<double> cot_huanchongdai4;

//委托额 过去5天
void getAveWeimaiWeimaiLast5();
vector<double> AveWeimairu_240_dayfu1;//委买均值
vector<double> AveWeimairu_240_dayfu2;
vector<double> AveWeimairu_240_dayfu3;
vector<double> AveWeimairu_240_dayfu4;
vector<double> AveWeimairu_240_dayfu5;
vector<double> Weimairu_240_dayfu1;//委买本身
vector<double> Weimairu_240_dayfu2;
vector<double> Weimairu_240_dayfu3;
vector<double> Weimairu_240_dayfu4;
vector<double> Weimairu_240_dayfu5;
ofstream os_AveWeimairu_fu("JuJiZhanfa_data/os_AveWeimairu_fu.txt");
vector<double> mean_5fuAveWeimairu;
vector<double> std_5fuAveWeimairu;
vector<double> weimairu_huanchongdai1;
vector<double> weimairu_huanchongdai2;
vector<double> weimairu_huanchongdai3;
vector<double> weimairu_huanchongdai4;

vector<double> AveWeimaichu_240_dayfu1;//委卖均值
vector<double> AveWeimaichu_240_dayfu2;
vector<double> AveWeimaichu_240_dayfu3;
vector<double> AveWeimaichu_240_dayfu4;
vector<double> AveWeimaichu_240_dayfu5;
vector<double> Weimaichu_240_dayfu1;//资金本身
vector<double> Weimaichu_240_dayfu2;
vector<double> Weimaichu_240_dayfu3;
vector<double> Weimaichu_240_dayfu4;
vector<double> Weimaichu_240_dayfu5;
ofstream os_AveWeimaichu_fu("JuJiZhanfa_data/os_AveWeimaichu_fu.txt");
vector<double> mean_5fuAveWeimaichu;
vector<double> std_5fuAveWeimaichu;
vector<double> weimaichu_huanchongdai1;
vector<double> weimaichu_huanchongdai2;
vector<double> weimaichu_huanchongdai3;
vector<double> weimaichu_huanchongdai4;
ofstream os_paoyapingfen_xiuzheng("JuJiZhanfa_data/os_paoyapingfen_xiuzheng.txt");
//以上，上证指数////////////////////////////////////////////////////////
int runTimes=0;
//某日内数据处理，所需变量----------------------------------------------
//指标带this的是纯粹的瞬间变量，不用备份，不用给各个指数分别建立相应变量
//有记忆性的变量都要备份
//带pre的变量必须备份
//中间使用的vector都要备份
vector<int> time_heyuePrice;
vector<double> heyuePrice_heibing;
double this_Heyueprice=0.0;
double this_Heyuechengjiaoliang=0.0;
double pre_Heyuechengjiaoliang=0.0;
double pre_pre_Heyuechengjiaoliang=0.0;
double pre_Heyueprice=0.0;
bool Heyueprice_lai=false;
int HeyuepriceKK=0;//凡涉及IF合约的，全部由上证指数处理，沪深300都不再处理

double this_ZLDJe=0.0;
double pre_ZLDJe=0.0;
bool ZLDJe_lai=false;

double this_daneiE=0.0;
double this_dawaiE=0.0;
double pre_daneiE=0.0;
double pre_dawaiE=0.0;
bool daneiwai_lai=false;
double this_ZLDJ=0.0;
int this_ZLDJ_tag=0;
double this_dadanzhulixian=0.0;
double this_dadanliuxiang=0.0;
double max_dadanliuxiang=-1e15;
double min_dadanliuxiang=1e15;
int e_time=0;
int neiwaie_time=0;
double this_bigFlow=0.0;
double max_bigFlow=-1e15;
double min_bigFlow=1e15;
bool ZLDJ_lai=false;

double this_ZJDJ=0.0;
vector<double> vZiJinDengji;
int this_ZJDJ_tag=0;
ofstream os_zijindengji_huatu("JuJiZhanfa_data/os_zijindengji_huatu.txt");

double this_forceXD=0.0;
double pre_forceXD=0.0;
double pre_pre_forceXD=0.0;
double this_DLDJ=0.0;
int this_DLDJ_tag=0;
bool forceXD_lai=false;
int forceXD_hour=0;
int forceXD_minute=0;
int forceXD_second=0;
bool DLDJ_lai=false;

double this_weimairu38=0.0;
double this_weimaichu38=0.0;
double pre_weimairu38=0.0;
double pre_weimaichu38=0.0;
double this_WBDJ=0.0;
int this_WBDJ_tag=0;
double this_weituobi=0;
bool weimai38_lai=false;
int weimai38_hour=0;
int weimai38_minute=0;
int weimai38_second=0;
bool WBDJ_lai=false;
ofstream os_weituobi_huatu("JuJiZhanfa_data/os_weituobi_huatu.txt");

double this_capital=0.0;
double pre_capital=0.0;
bool capital_lai=false;
vector<double> Capital_junxian;

//上证主力评分
double this_zhulipingfen_SH000001=-5;
double pre_zhulipingfen_SH000001=-5;

//标的指数评分
double this_zhulipingfen=-5;
double this_zhichengpingfen=-5;
double this_paoyapingfen=-5;
double pre_zhulipingfen=-5;
double pre_zhichengpingfen=-5;
double pre_paoyapingfen=-5;
double this_modified_zhichengpingfen=-5;//这个带记忆属性，需要分别建立变量
bool pingfen_lai=false;
double max_capitalJunXian=-1e15;
double min_capitalJunXian=1e15;
double fazhi_capitalJunXianBianhua=0;
vector<double> zhichengfen_modified_hebing;//修正后评分
double this_modified_paoyapingfen=-5;
vector<double> paoyafen_modified_hebing;//修正后评分
int paoyapingfen_keep=0;
double this_weizhipingfen=0.0;


double this_indexPrice=0.0;
double pre_indexPrice=0.0;
double pre_pre_indexPrice=0.0;
bool indexPrice_lai=false;
//指数价格处理新增变量
int minute_indexprice_kaipinghandle=0;
int pre_minute_indexprice_kaipinghandle=-1;
vector<double> ave_price;
vector<double> ave_price_minute;
vector<int> up_down_ave;
vector<int> HuanPingGou_minutePrice;
vector<double> vec_IndexPrice_zhangfu;
double this_zhangfu_indexPrice=0.0;
int zhangfu_GT0_count=0;
int zhangfu_LT0_count=0;
bool minutePrice_lai=false;
double max_indexPrice=-1e15;
double min_indexPrice=1e15;
double max_capital=-1e15;
double min_capital=1e15;
vector<int> feng_time;
vector<double> feng_price;
vector<double> feng_cot;
vector<int> gu_time;
vector<double> gu_price;
vector<double> gu_cot;
double pre_ding_indexprice=0.0;
double pre_di_price=0.0;
vector<int> DingDiBeiLi_Capital;
double capital_beili_state=0;
int now_is_beili=0;//1顶背离   -1底背离
int count_dingbeili=0;
int count_dibeili=0;
double indexPrice_when_beili=0;
int time_when_beili=0;

//指数成交额和成交量
double this_chengjiaoliang=0.0;
double this_chengjiaoe=0.0;
bool chengjiaoe_lai=false;
vector<int> time_indexChengjiaoe;
int pre_minute_chengjiaoe_kaipinghandle=-1;
double pre_chengjiaoe=0.0;
double pre_pre_chengjiaoe=0.0;
double pre_chengjiaoliang=0.0;
double pre_pre_chengjiaoliang=0.0;

//指数动力线
vector<StructDataValue> vec_donglixian;
//并列界面指数动力线
double this_donglixian=0.0;
double pre_donglixian=0.0;
ofstream os_new_original_secondIndexDonglixian("JuJiZhanfa_data/os_new_original_secondIndexDonglixian.txt");
ofstream os_new_original_secondIndexDonglixian_huatu("JuJiZhanfa_data/os_new_original_secondIndexDonglixian_huatu.txt");
vector<int> hour_new_original_secondIndexDonglixian;
vector<int> minute_new_original_secondIndexDonglixian;
vector<int> second_new_original_secondIndexDonglixian;
vector<double> new_original_secondIndexDonglixian;
ofstream os_new_14400_secondIndexDonglixian("JuJiZhanfa_data/os_new_14400_secondIndexDonglixian.txt");
vector<int> new_14400_indexdonglixianTimeflag;
vector<int> hour_new_14400_secondIndexDonglixian;
vector<int> minute_new_14400_secondIndexDonglixian;
vector<int> second_new_14400_secondIndexDonglixian;
vector<double> new_14400_secondIndexDonglixian;
ofstream os_new_minuteIndexDonglixian("JuJiZhanfa_data/os_new_minuteIndexDonglixian.txt");
vector<int> hour_new_minuteIndexDonglixian;
vector<int> minute_new_minuteIndexDonglixian;
vector<int> second_new_minuteIndexDonglixian;
vector<double> new_minuteIndexDonglixian;
//10s窗口内
vector<int> period_time_10s;//上次使用的vector
vector<double> period_donglixian_10s;
vector<double> period_ifprice_10s;
vector<int> period_hour_10s;
vector<int> period_minute_10s;
vector<int> period_second_10s;
//5s窗口内
vector<int> period_time_5s;//上次使用的vector
vector<double> period_donglixian_5s;
vector<double> period_ifprice_5s;
vector<int> period_hour_5s;
vector<int> period_minute_5s;
vector<int> period_second_5s;


int hour_indexDonglixian_kaipinghandle=0;
int minute_indexDonglixian_kaipinghandle=0;
int second_indexDonglixian_kaipinghandle=0;
int pre_hour_indexDonglixian_kaipinghandle=0;
int pre_minute_indexDonglixian_kaipinghandle=-1;
int pre_second_indexDonglixian_kaipinghandle=0;
double pre_pre_indexDonglixian=0.0;

double max_if_10s=-1e15;//动力线窗口用
double min_if_10s=1e15;
double if_3_4_10s=0;
double if_2_4_10s=0;
double if_1_4_10s=0;
int donglixian_max_i_10s=0;
int donglixian_min_i_10s=0;
double mean_if_10s=0.0;
double std_if_10s=0.0;//之所以保留，怕以后会用到

double max_if_5s=-1e15;//动力线窗口用
double min_if_5s=1e15;
double if_3_4_5s=0;
double if_1_4_5s=0;
int donglixian_max_i_5s=0;
int donglixian_min_i_5s=0;
double mean_if_5s=0.0;
double std_if_5s=0.0;//之所以保留，怕以后会用到

ofstream os_baofa_if("JuJiZhanfa_data/os_baofa_if.txt");

int fenge_num1_10s=0;//
int fenge_num2_10s=0;//
int fenge_num3_10s=0;//
int fenge_num4_10s=0;//

int fenge_num1_5s=0;//
int fenge_num2_5s=0;//
int fenge_num3_5s=0;//
int fenge_num4_5s=0;//

double S_shang_10s=0;
double S_xia_10s=0;
bool DLX_S1_S2_GT6_10s=false; //S1上面积  S2下面积
bool DLX_S2_S1_GT6_10s=false;
int start_size_10s=0;
vector<int> xunfeng_dlx_zouping_10s;
vector<int> xunfeng_dlx_zouping_use_10s;
vector<int> xunfeng_indexprice_use_10s;
vector<int> xunfeng_dlx_zouping_use_di_10s;
vector<int> xunfeng_dlx_zouping_use_ding_10s;
int now_is_dingbu_dibu=0;
double indexprice_dingdibu=0;
double start_time_dingdibu=0;

double S_shang_5s=0;
double S_xia_5s=0;
bool DLX_S1_S2_GT6_5s=false; //S1上面积  S2下面积
bool DLX_S2_S1_GT6_5s=false;
int start_size_5s=0;
vector<int> xunfeng_dlx_zouping_5s;
vector<int> xunfeng_dlx_zouping_use_5s;
vector<int> xunfeng_indexprice_use_5s;
vector<int> xunfeng_dlx_zouping_use_di_5s;
vector<int> xunfeng_dlx_zouping_use_ding_5s;

ofstream os_zoupingTest("JuJiZhanfa_data/os_zoupingTest.txt");
ofstream os_donglixiandingdi_10s("JuJiZhanfa_data/os_donglixiandingdi_10s.txt");
ofstream os_donglixiandingdi_5s("JuJiZhanfa_data/os_donglixiandingdi_5s.txt");
//以上，指数动力线
//以上，某日内数据处理，所需变量-------------------------------------------
void Init_ByDay();

//开平仓判断----------------------------------------------------------------------------

//中间寻找支撑位压力位
ofstream os_ZhiChengYaLiwei_IF("JuJiZhanfa_data/os_ZhiChengYaLiwei_IF.txt");


//判断峰谷
bool isFeng=false;
bool isGu=false;
//判断C点
bool now_is_guC=false;
bool now_is_fengC=false;

vector<int> feng_indexcount;
vector<int> gu_indexcount;

int open_state_JuJi_IF=0;
vector<int> open_IF;
ofstream os_kaipinglog_IF_check("JuJiZhanfa_data/os_kaipinglog_IF_check.txt");
ofstream os_kaipinglog_IF_huatu("JuJiZhanfa_data/os_kaipinglog_IF_huatu.txt");
int hasChicangIF=0;
double open_price_IF=0.0;
double ping_price_IF=0.0;
double this_earning=0;
//------------------------------
vector<double> heyueprices_at_opensignal_for_11;//信号已经准许开仓时的合约价格，但是再等等
vector<double> heyueprices_at_opensignal_for_fu11;//信号已经准许开仓时的合约价格，但是再等等
vector<double> heyueprices_at_opensignal_for_12;//信号已经准许开仓时的合约价格，但是再等等
vector<double> heyueprices_at_opensignal_for_fu12;//信号已经准许开仓时的合约价格，但是再等等

vector<int> feng_counts_at_opensignal_for_11;//信号已经准许开仓时的合约价格，但是再等等
vector<int> gu_counts_at_opensignal_for_fu11;//信号已经准许开仓时的合约价格，但是再等等
vector<int> feng_counts_at_opensignal_for_12;//信号已经准许开仓时的合约价格，但是再等等
vector<int> gu_counts_at_opensignal_for_fu12;//信号已经准许开仓时的合约价格，但是再等等
//------综合防守评分新增-----
double this_weimaichu=0.0;
double pre_weimaichu=0.0;
double this_weimairu=0.0;
double pre_weimairu=0.0;
vector<double> new_minuteWeituobi;
bool weimai_lai=false;

double max_fuying=-10000;
double min_fukui=10000;//负数

//根据指数，决定资金参考天数变化
double maxPrice_fu1=-1e10;
double maxPrice_fu2=-1e10;
double maxPrice_fu3=-1e10;
double maxPrice_fu4=-1e10;
double maxPrice_fu5=-1e10;
double minPrice_fu1=1e10;
double minPrice_fu2=1e10;
double minPrice_fu3=1e10;
double minPrice_fu4=1e10;
double minPrice_fu5=1e10;
int need_days=0;
bool five_ok=false;

ofstream Tiaojian_jilu_IF("JuJiZhanfa_data/Tiaojian_jilu_IF.txt");
//------以上，综合防守评分新增-----
//增加兑现问题20180111
//过去三天的指数最大最小值
vector<double> highIndexprice_3days;
vector<double> lowIndexprice_3days;
vector<double> vweizhipingfen;
//
int days=1;

vector<int> t_ctrl_indexprice;

//记录开仓值
int open_hour_IF=0;//IF
int open_minute_IF=0;
int open_second_IF=0;
int open_feng_count_IF=0;
int open_gu_count_IF=0;
int open_market_direction_IF=0;
double open_zhicheng_pingfen_IF=0;
double open_paoya_pingfen_IF=0;
double open_zhuli_pingfen_IF=0;
double open_weizhi_pingfen_IF=0;
int open_newminuteindex_size=0;
double open_chengjiaofengzhi=0.0;
double open_chengjiaofengzhi_shangxian=0.0;
double open_chengjiaofengzhi_xiaxian=0.0;
int kaicangleixing=0;
int open_duo_count=0;
int open_kong_count=0;
int kaicangleixing_keep=0;
double open_lishi_chengjiaofengzhi_shangxian=0.0;
double open_lishi_chengjiaofengzhi_xiaxian=0.0;
double open_lishi_chengjiaofengzhi_maxliang=0.0;

double open_zhulidengji=0.0;
double open_zijindengji=0.0;
double open_weibidengji=0.0;
double open_donglidengji=0.0;

double open_lishang=0.0;  //当前期指离最高点 占20日均顶底差的比例
double open_lixia=0.0;    //当前期指离最低点 占20日均顶底差的比例

int open_bodong_count=0;

double open_zhangdiebi=1.0;

double open_S_shang_chu_xia=1.0;
double open_li_junxian=0.0;

double open_zhangfu_index=0.0;

//新增open
int open_beili_state=0;
int open_dingbeili_count=0;
int open_dibeili_count=0;
double open_indexprice=0;
double open_ave_indexprice=0;
int open_youbaofa=0;
double open_1_4_IF=0;
double open_2_4_IF=0;
double open_3_4_IF=0;
double open_indexprice_whenbeili=0;
int open_baofakai_allow=0;
int open_kaicangleixing=0;
double open_dingdicha_standard=0;

int open_ZLDJ_tag=0;
int open_ZJDJ_tag=0;
int open_WBDJ_tag=0;
int open_DLDJ_tag=0;

double open_weituobi=0;
//
int ping_newminuteindex_size=0;
//
double zhulipingfen=0;
double zhichengpingfen=0;
double paoyapingfen=0;
double this_indexpingfen=0;  
int market_direction = 0;
int market_direction_forDaoXiang = 0;
double this_chengjiaofengzhi=0.0;
double this_chengjiaofengzhi_shangxian=0.0;
double this_chengjiaofengzhi_xiaxian=0.0;
int middle_tt=-111;


double lishi_chengjiaofengzhi_shangxian=0;
double lishi_chengjiaofengzhi_xiaxian=0;
double lishi_chengjiaofengzhi_liangmax=0;
int kaipan_GT_num=0;//开盘时，高于价格的峰数量
int kaipan_LT_num=0;//开盘时，低于价格的峰数量
int now_GT_num=0;
int now_LT_num=0;
int max_GT_num=-1000;
int min_GT_num=1000;

time_t ttt=0;
struct tm *pttt;

ofstream os_fenwei_IF("JuJiZhanfa_data/os_fenwei_IF.txt");

//全天合约最大最小值
double max_heyueprice=-1e15;
double min_heyueprice=1e15;
//合约的四分位
double max_10s_heyueprice=-1e15;
double min_10s_heyueprice=1e15;
int base_hour=0;
int base_minute=0;
int base_second=0;
int now_hour1=0;
int now_minute1=0;
int now_second1=0;

vector<string> zhuliheyue_IF;
vector<double> dingdicha_byday_IF;
vector<double> dingdicha_ave_byday_IF;
double dingdicha_standard_IF=0.0;

double jiesuanjia_IF_fu1=0;
ofstream os_jiesuan_IF_check("JuJiZhanfa_data/os_jiesuan_IF_check.txt");
double this_zhangfu_IF=0;

vector<double> dingdicha_zhangfu_index;
vector<double> dingdicha_zhangfu_ave_index;
double dingdicha_zhangfu_standard_index=0.0;

vector<double> chicangliang_IF;
double chicangliang_this_IF=0;

double max_IFprice_10s_hou_1_6=-1e15;
double min_IFprice_10s_hou_1_6=1e15;
double mean_if_10s_hou_1_3=0;
double std_if_10s_hou_1_3=0;
vector<double> stds_hou_1_3;
double mean_if_10s_hou_1_2=0;
double std_if_10s_hou_1_2=0;
vector<double> stds_hou_1_2;
double max_IFprice_10s_hou_1_2=-1e15;
double min_IFprice_10s_hou_1_2=1e15;
double max_IFprice_10s_hou_1_3=-1e15;
double min_IFprice_10s_hou_1_3=1e15;

int this_pingMode=0;
bool is_jiantingpingkong=0;
bool jianting_kaiduo_allow=0;
bool fangxiangmaodun=false;
int maodunshi_ding_count=0;
int maodunshi_di_count=0;

void kaiping_jilu();

void conclude_onday(int num);//判断是人眼看到的单边市还是震荡市

//沪深主力汇总
vector<StructDataValue>  bidask000001;
vector<StructDataValue>  bidask399001;
void getTongyongStructDataValue(int today){};//取各种指数的通用指标，取一次就行，如沪深主力汇总
//-------------------------------------------------------------------------------------------------
//vector<double> heyueprice_period;//因为出错，改成局部的
vector<double> heyueKDJ_K;
double dingdicha_huyue_10s=0.0;
int baofa_kai_10s=0;
int baofa_ping_10s=0;
int baofa_ping_duo_youxiao =0;
int baofa_ping_kong_youxiao =0;
int daoxiang_10s_IF=0;//1上导向  -1下导向
double daoxiang_10s_IF_shangxian=0;
double daoxiang_10s_IF_zhongxian=0;
double daoxiang_10s_IF_xiaxian=0;
int daoxiang_keep_10s=0;
int daoxiang_start_time=0;
double daoxiang_start_indexprice=0;

int youBaofa_10s=0;
int baofa_time=0;
int baofa_time_15s=0;

int baofa_kai_allow=0;
int baofa_kai_time=0;

bool now_is_big_fukui_IF=false;
bool now_is_big_fuying_IF=false;
bool has_tupo_shangxian=false;
bool has_diepo_xiaxian=false;

clock_t  start_time,finish_time;

//实盘，实时的秒数据处理为分钟数据
//资金
int hour_capital_kaipinghandle=0;
int minute_capital_kaipinghandle=0;
int second_capital_kaipinghandle=0;
int pre_hour_capital_kaipinghandle=0;
int pre_minute_capital_kaipinghandle=-1;
int pre_second_capital_kaipinghandle=0;
double pre_pre_capital=0.0;
//委卖委买
int hour_weimaiweimai_kaipinghandle=0;
int minute_weimaiweimai_kaipinghandle=0;
int second_weimaiweimai_kaipinghandle=0;
int pre_hour_weimaiweimai_kaipinghandle=0;
int pre_minute_weimaiweimai_kaipinghandle=-1;
int pre_second_weimaiweimai_kaipinghandle=0;
double pre_pre_weimairu=0.0;
double pre_pre_weimaichu=0.0;
//评分
int hour_pingfen_kaipinghandle=0;
int minute_pingfeni_kaipinghandle=0;
int second_pingfen_kaipinghandle=0;
int pre_hour_pingfen_kaipinghandle=0;
int pre_minute_pingfen_kaipinghandle=-1;
int pre_second_pingfen_kaipinghandle=0;
double pre_pre_zhulipingfen=-5;
double pre_pre_zhichengpingfen=-5;
double pre_pre_paoyapingfen=-5;
//----------------------------------------------

//判断波动幅度
vector<int> bodong_max_i;
vector<int> bodong_min_i;
vector<double> bodong_max_price;
vector<double> bodong_min_price;
double bodong_this_max_price=-100000;
double bodong_this_min_price=100000;
int bodong_this_max_i=0;
int bodong_this_min_i=0;
int bodong_temp1=0;
int bodong_temp2=0;
int bodong_there_is_up=0;
int bodong_there_is_down=0;

int bodong_count=0;

ofstream os_bodong_ding("JuJiZhanfa_data/os_bodong_ding.txt");
ofstream os_bodong_di("JuJiZhanfa_data/os_bodong_di.txt");
ofstream os_bodong_minuteindexprice("JuJiZhanfa_data/os_bodong_minuteindexprice.txt");
//--------------------------------------

void pingcang_record(int pingcangfangshi);
void kaicang_record(int duo_or_kong);

//判断期指偏向
vector<double> vpecent_lianzhang_IF;
vector<double> vpecent_liandie_IF;
int lianzhang_count_IF=0;
int liandie_count_IF=0;
double zhangdiebi=1.0;
ofstream os_pianjian_IF("JuJiZhanfa_data/os_pianjian_IF.txt");
//以上---------------

bool bengpan=false;

//对顶用的导向
//以上，对顶用的导向

//判断目前指数整体走势
double S_junxian_shang=0.01;
double S_junxian_xia=0.01;
//以上-----------------------
vector<int> bo_count_add_times; 
int bo_count_add_time=0;

vector<double> vEarnings_today;
double sum_earning_today=0;
//主程序下单入口用
bool kaiduo_keep=false;
bool kaikong_keep=false;
bool pingduo_keep=false;
bool pingkong_keep=false;
vector<int> orders_all;
vector<int> orders_waiting;
int kaiduo_n=0;
int kaikong_n=0;
int pingduo_n=0;
int pingkong_n=0;
int chuli_ing=0;

bool kaiduo_xiadan_ing=false;
bool kaikong_xiadan_ing=false;
bool pingduo_xiadan_ing=false;
bool pingkong_xiadan_ing=false;


int geye_duo_count=1;//隔夜多单   //实盘检查
int geye_kong_count=1;//隔夜空单

bool isJiaogeri=true;//实盘检查

int jin_duo_count=0;
int jin_kong_count=0;

int xiadan_shoushu=1;//实盘检查   每次下单的手数  批量下单  正常就是1单
int has_chengjiao_shoushu=0;//初始就是0  不用改

ofstream os_chengjiao_check("JuJiZhanfa_data/os_chengjiao_check.txt");

double getAveHeyueDingichaPre20_shipan(int start_day1,int end_day1, string HeyueTag);

int cc=0;

int t_real_int=0;
time_t t_real=0,pre_t_real=0;
struct tm *p_real;
int pre_t_real_1=0,pre_t_real_2=0,pre_t_real_3=0,pre_t_real_4=0,pre_t_real_5=0,pre_t_real_6=0,pre_t_real_7=0,pre_t_real_8=0,pre_t_real_9=0,pre_t_real_10=0;
int hour_Real=0;
int minute_Real=0;
int second_Real=0;

//请求和接收数据

vector<MutiTypeDataOneDay> SyncHistoryData(const char* market, const char* code, int metaId, int startTimeTag, int endTimeTag);


int real_end=0;//0表示实盘还没结束，1表示结束
#pragma endregion yuan_declaration

int daoxiang_kaiduo_count=0;
int daoxiang_kaikong_count=0;
double zhangfu_pingfen_fu1=0.0;


double huanshoulv_fu1=0;


int sun1=0;
int sun2=0;
int sun3=0;
int sun4=0;

double min_fengzhi_last5=3461;//实盘检查

double max_fengzhi_last5=3720;

//CTP--------------------------------------------------------------------------------------
//测试环境
//string my_trader_Frontaddr1 = "tcp://116.xx.198.xx:33437";//交易接口前置地址
//string my_brokeID="xxxx";
//string my_investID="xxxx";
//string my_userID="xxxx";
//string my_passWord="xxxx";
//string my_instrumentID="IF2009";
//string my_exchangeID="CFFEX";
//string my_currencyID="CNY";
//string my_appID="xxxxxx";
//string my_authCode="xxxxxx";

//生产环境
string my_trader_Frontaddr1 = "tcp://140.xx.102.xx:61205";//实盘交易接口前置地址
string my_brokeID="xxxx";//期货公司代码
string my_investID="xxxxxx";//用户名
string my_userID="xxxxxx";用户名
string my_passWord="xxxxxx";//密码
string my_instrumentID="IF2009";合约代码
string my_exchangeID="CFFEX";//交易所代码
string my_currencyID="CNY";//币种
string my_appID="xxxxxx";//appID  自己按照规定的编制规则定义
string my_authCode="xxxxxx";//authCode 期货公司根据appID给分配过来的

///报单录入请求响应   //有点问题的报单，都由这个响应，此时OnRtnOrder不会响应
void func_OnRspOrderInsert(CThostFtdcInputOrderField *pInputOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast);
///报单通知  一次下单，可能多次回调这个  成不成交都会回调 但是有错的时候不会回调，会调OnRspOrderInsert
void func_OnRtnOrder(CThostFtdcOrderField *pOrder);
///成交通知  不成交就不回调  包括撤单也不回调
void func_OnRtnTrade(CThostFtdcTradeField *pTrade);

void BuyOpen(CThostFtdcTraderApi *pUserApi);
void BuyClose(CThostFtdcTraderApi *pUserApi);
void SellOpen(CThostFtdcTraderApi *pUserApi);
void SellClose(CThostFtdcTraderApi *pUserApi);

void get_date_time();
void read_lishifengzhi();

bool hasLogin_trader=false;
bool has_jiesuanConfirm=false;
bool position_chaxun_duo_youxiangying=false;
bool position_chaxun_kong_youxiangying=false;
int nRequestID = 0;
//互斥量，即线程锁
std::mutex my_mutex;
ofstream os_erro_msg("JuJiZhanfa_data/os_erro_msg.txt");

bool duanxianchonglian=false;

CThostFtdcTraderApi *pUserApi = CThostFtdcTraderApi::CreateFtdcTraderApi();//主线程里一个traderAPI对象干活

//交易类
class CSimpleHandler : public CThostFtdcTraderSpi
{
public:
	CSimpleHandler(CThostFtdcTraderApi *pUserApi) : m_pUserApi(pUserApi) {}
	~CSimpleHandler() {}
	virtual void OnFrontConnected()
	{
		get_date_time();
		cout<<"trader_connected! ask to login!"<<endl;
		os_erro_msg<<"trader_class--"<<"OnFrontConnected:    ";
		os_erro_msg<<"trader_thread_id:"<<syscall(__NR_gettid)<<endl;		

		//客户端认证请求
		CThostFtdcReqAuthenticateField a = { 0 };
		strcpy(a.BrokerID, my_brokeID.c_str());
		strcpy(a.UserID, my_userID.c_str());
		//strcpy(a.UserProductInfo, "");
		strcpy(a.AppID, my_appID.c_str());
		strcpy(a.AuthCode, my_authCode.c_str());
		int b = m_pUserApi->ReqAuthenticate(&a, 1);
		//------------------------------------------------------------------------
	}

	virtual void OnFrontDisconnected(int nReason)
	{
		get_date_time();
		cout<<"trader_disconnected!"<<endl;
		os_erro_msg<<"trader_class--"<<"OnFrontDisconnected    "<<"trader_thread_id:"<<syscall(__NR_gettid)<<endl;
	}	

	///客户端认证响应
	virtual void OnRspAuthenticate(CThostFtdcRspAuthenticateField *pRspAuthenticateField, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
	{
		/*///响应信息
		struct CThostFtdcRspInfoField
		{
			///错误代码
			TThostFtdcErrorIDType	ErrorID;
			///错误信息
			TThostFtdcErrorMsgType	ErrorMsg;
		};*/
		get_date_time();
		cout<<"trader_class--OnRspAuthenticate! "
			<<"BrokerID:"<<pRspAuthenticateField->BrokerID<<"  "
			<<"UserID:"<<pRspAuthenticateField->UserID<<"  "
			<<"AppID:"<<pRspAuthenticateField->AppID<<endl;
		os_erro_msg<<"trader_class--OnRspAuthenticate! 客户端认证响应  "
			<<"BrokerID:"<<pRspAuthenticateField->BrokerID<<"  "
			<<"UserID:"<<pRspAuthenticateField->UserID<<"  "
			<<"AppID:"<<pRspAuthenticateField->AppID<<"    "
			<<"erroID:"<<pRspInfo->ErrorID<<"  "
			<<"messsage:"<<pRspInfo->ErrorMsg<<"  "
			<<"trader_thread_id:"<<syscall(__NR_gettid)<<endl;

		sleep(1);

		CThostFtdcReqUserLoginField reqUserLogin = { 0 };
		strcpy(reqUserLogin.BrokerID, my_brokeID.c_str());
		strcpy(reqUserLogin.UserID, my_userID.c_str());
		strcpy(reqUserLogin.Password, my_passWord.c_str());
		//strcpy(reqUserLogin.ClientIPAddress, "::c0a8:0101");
		//strcpy(reqUserLogin.UserProductInfo, "123");
		// 发出登陆请求
		m_pUserApi->ReqUserLogin(&reqUserLogin, nRequestID++);
	}

	//登录响应
	virtual void OnRspUserLogin(CThostFtdcRspUserLoginField *pRspUserLogin,	CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
	{
		//OnRspUserLogin:成功0：60  信息：CTP:用户在线会话超出上限  有时候有这个报错
		get_date_time();
		os_erro_msg<<"trader_class--"<<"OnRspUserLogin:"<<"成功0："<<pRspInfo->ErrorID<<"  "<<"信息："<<pRspInfo->ErrorMsg<<"    ";
		os_erro_msg<<"trader_thread_id:"<<syscall(__NR_gettid)<<endl;

		if(pRspInfo->ErrorID == 60)
		{
			///登出请求
			//virtual int ReqUserLogout(CThostFtdcUserLogoutField *pUserLogout, int nRequestID) = 0;
			///用户登出请求   //因为CTP登录数量限制
			CThostFtdcUserLogoutField aa={0};
			strcpy(aa.BrokerID, my_brokeID.c_str());
			strcpy(aa.UserID, my_userID.c_str());
			int a = m_pUserApi->ReqUserLogout(&aa, 1);
			get_date_time();
			os_erro_msg<<"trader_class--"<<"OnRspUserLogin:  "<<"用户在线会话超出上限，请求登出：成功0网络连接失败-1未处理请求超过许可数-2每秒发送请求超过许可数-3："<<a<<endl;

			sleep(3);//省得请求登出后，那边还没反应过来登出，一直报 //成功0：60  信息：CTP:用户在线会话超出上限

			//再请求登录
			CThostFtdcReqUserLoginField reqUserLogin = { 0 };
			strcpy(reqUserLogin.BrokerID, my_brokeID.c_str());
			strcpy(reqUserLogin.UserID, my_userID.c_str());
			strcpy(reqUserLogin.Password, my_passWord.c_str());
			//strcpy(reqUserLogin.ClientIPAddress, "::c0a8:0101");
			//strcpy(reqUserLogin.UserProductInfo, "123");
			// 发出登陆请求
			int b = m_pUserApi->ReqUserLogin(&reqUserLogin, nRequestID++);
			get_date_time();
			os_erro_msg<<"trader_class--"<<"OnRspUserLogin:  "<<"用户在线会话超出上限，请求登出后，继续请求登录：成功0网络连接失败-1未处理请求超过许可数-2每秒发送请求超过许可数-3："<<b<<endl;
		}

		if(pRspInfo->ErrorID == 0)
		{
			hasLogin_trader=true;
			cout<<"trader Login succeed!"<<endl;

			if(hasLogin_trader==true) 
			{
				//请求查询合约 //要在这个类里查询合约  外边查不到
				CThostFtdcQryInstrumentField chaxunheyue={ 0 };
				//strcpy(chaxunheyue.InstrumentID, "IF2009");
				//strcpy(chaxunheyue.ExchangeID, "CFFEX");
				//m_pUserApi->ReqQryInstrument(&chaxunheyue, nRequestID++);//这个不是必须查询，可以看有哪些合约，响应回来的是几百个合约代码

				///请求查询投资者结算结果
				//virtual int ReqQrySettlementInfo(CThostFtdcQrySettlementInfoField *pQrySettlementInfo, int nRequestID) = 0;
				cout<<"jiesuan jieguo chaxun"<<endl;

				TThostFtdcDateType pre_day="20200915";//用前一个交易日  实盘检查
				CThostFtdcQrySettlementInfoField settlementInfo = { 0 };
				strcpy(settlementInfo.BrokerID, my_brokeID.c_str());
				strcpy(settlementInfo.InvestorID, my_investID.c_str());
				strcpy(settlementInfo.TradingDay, pre_day);
				int a = m_pUserApi->ReqQrySettlementInfo(&settlementInfo, nRequestID++);	
				get_date_time();
				os_erro_msg<<"trader_class--"<<"OnRspUserLogin:  "<<"登陆成功，请求结算信息查询：成功0网络连接失败-1未处理请求超过许可数-2每秒发送请求超过许可数-3："<<a<<"  "
					<<"trader_thread_id:"<<syscall(__NR_gettid)<<endl;

				///请求查询结算信息确认  //确认结算结果 不是用这个请求
				//virtual int ReqQrySettlementInfoConfirm(CThostFtdcQrySettlementInfoConfirmField *pQrySettlementInfoConfirm, int nRequestID) = 0;
			}
		}
		else
		{
			hasLogin_trader=false;
			cout<<"trader Login failed!"<<endl;
		}		
	}

	///登出请求响应
	virtual void OnRspUserLogout(CThostFtdcUserLogoutField *pUserLogout, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
	{
		get_date_time();
		cout<<"trader_OnRspUserLogout!"<<endl;
		os_erro_msg<<"trader_class--"<<"OnRspUserLogout    "<<"BrokerID:"<<pUserLogout->BrokerID<<"  "<<"UserID:"<<pUserLogout->UserID<<"  "<<"trader_thread_id:"<<syscall(__NR_gettid)<<endl;
	}

	///请求查询投资者结算结果响应
	virtual void OnRspQrySettlementInfo(CThostFtdcSettlementInfoField *pSettlementInfo, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
	{
		if(pSettlementInfo!=NULL)
		{
			get_date_time();
			cout<<"trader_class--"<<"OnRspQrySettlementInfo:  "<<"trader_id:"<<syscall(__NR_gettid)<<endl;
			os_erro_msg<<"trader_class--"<<"OnRspQrySettlementInfo: 结算信息查询响应: "
				<<"TradingDay:"<<pSettlementInfo->TradingDay<<"  "
				<<"jiesuanCode:"<<pSettlementInfo->SettlementID<<"  "
				<<"trader_id:"<<syscall(__NR_gettid)<<endl;

			///投资者结算结果确认 //
			//virtual int ReqSettlementInfoConfirm(CThostFtdcSettlementInfoConfirmField *pSettlementInfoConfirm, int nRequestID) = 0;
			cout<<"jiesuan jieguo queren"<<endl;

			sleep(1);

			CThostFtdcSettlementInfoConfirmField infoConfirm = { 0 };	
			strcpy(infoConfirm.BrokerID, my_brokeID.c_str());
			strcpy(infoConfirm.InvestorID, my_investID.c_str());
			infoConfirm.SettlementID = pSettlementInfo->SettlementID;
			int a = m_pUserApi->ReqSettlementInfoConfirm(&infoConfirm, nRequestID++);//看清楚，不是ReqQrySettlementInfoConfirm
			get_date_time();
			os_erro_msg<<"trader_class--"<<"OnRspQrySettlementInfo:  "<<"结算结果已查出，请求确认：成功0网络连接失败-1未处理请求超过许可数-2每秒发送请求超过许可数-3："<<a<<"  "
				<<"trader_thread_id:"<<syscall(__NR_gettid)<<endl;
		}
		else
		{
			get_date_time();
			os_erro_msg<<"trader_class--"<<"OnRspQrySettlementInfo: 结算信息查询响应: "<<"pSettlementInfo为NULL    "<<"trader_id:"<<syscall(__NR_gettid)<<endl;

		}
	}

	///投资者结算结果确认响应  先查询ReqQrySettlementInfo，再用查到的结算单号，确认ReqSettlementInfoConfirm。就自动确认结算了。不用打开simNow软件在弹出的界面手动确认了。
	virtual void OnRspSettlementInfoConfirm(CThostFtdcSettlementInfoConfirmField *pSettlementInfoConfirm, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
	{
		if(pSettlementInfoConfirm!=NULL)
		{
			get_date_time();
			cout<<"trader_class--"<<"OnRspSettlementInfoConfirm:  "<<"trader_id:"<<syscall(__NR_gettid)<<endl;
			os_erro_msg<<"trader_class--"<<"OnRspSettlementInfoConfirm: 结算确认响应  "<<"trader_id:"<<syscall(__NR_gettid)<<endl;
			has_jiesuanConfirm=true;

			if (Heyueprice_lai&&indexPrice_lai&&capital_lai)
			{
				get_date_time();
				os_erro_msg<<"trader_class--"<<"断线重连后，下单测试"<<endl;
				duanxianchonglian=true;
			}
		}
		else
		{
			get_date_time();
			os_erro_msg<<"trader_class--"<<"OnRspSettlementInfoConfirm: 结算确认响应  "<<"pSettlementInfoConfirm为NULL    "<<"trader_id:"<<syscall(__NR_gettid)<<endl;
		}
	}

	//可用资金查询响应
	virtual void OnRspQryTradingAccount(CThostFtdcTradingAccountField *pTradingAccount, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
	{
		if(pTradingAccount!=NULL)
		{
			get_date_time();
			cout<<"Account query respond!"<<endl;
			os_erro_msg<<"trader_class--"<<"OnRspQryTradingAccount:  "<<pTradingAccount->BrokerID<<"  "<<pTradingAccount->AccountID<<"  "<<pTradingAccount->Available<<"    ";
			os_erro_msg<<"trader_id:"<<syscall(__NR_gettid)<<endl;
			cout<<pTradingAccount->BrokerID<<"  "<<pTradingAccount->AccountID<<"  "<<pTradingAccount->Available<<endl;
		}
		else
		{
			get_date_time();
			cout<<"Account query respond!"<<endl;
			os_erro_msg<<"trader_class--"<<"OnRspQryTradingAccount:  "<<"pTradingAccount为NULL"<<"    ";
			os_erro_msg<<"trader_id:"<<syscall(__NR_gettid)<<endl;
		}
	}

	///报单录入请求响应   //有点问题的报单，都由这个响应，此时OnRtnOrder不会响应
	virtual void OnRspOrderInsert(CThostFtdcInputOrderField *pInputOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
	{
		func_OnRspOrderInsert(pInputOrder,pRspInfo,nRequestID,bIsLast);
	}

	///报单通知  一次下单，可能多次回调这个  成不成交都会回调 但是有错的时候不会回调，会调OnRspOrderInsert
	virtual void OnRtnOrder(CThostFtdcOrderField *pOrder) 
	{
		func_OnRtnOrder(pOrder);
	}

	///成交通知  不成交就不回调  包括撤单也不回调
	virtual void OnRtnTrade(CThostFtdcTradeField *pTrade) 
	{
		func_OnRtnTrade(pTrade);
	}

	///报单操作错误回报，只有报单有错才会回调这个
	virtual void OnErrRtnOrderAction(CThostFtdcOrderActionField *pOrderAction, CThostFtdcRspInfoField *pRspInfo) 
	{
		get_date_time();
		os_erro_msg<<"trader_class--"<<"报单操作错误回报:OnErrRtnOrderAction"<<"  "<<pRspInfo->ErrorID<<":"<<pRspInfo->ErrorMsg<<"    ";
		os_erro_msg<<"trader_id:"<<syscall(__NR_gettid)<<endl;
		cout<<"报单操作错误回报:OnErrRtnOrderAction"<<endl;
	}

	///请求查询投资者持仓响应  //用这个  //有时候没反应，要多查几次
	virtual void OnRspQryInvestorPosition(CThostFtdcInvestorPositionField *pInvestorPosition, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
	{
		//有响应的时候，但是没有任何隔夜的或当日的持仓，pInvestorPosition可能相应个NULL
		if(pInvestorPosition!=NULL)
		{
			get_date_time();
			//一次查询会响应回来两次，第一次是空单的昨持和今持，第二次是多单的昨持和今持
			//如果空单没有昨持和今持，就没有多单的响应；如果多单没有昨持和今持，就没有多单的响应
			//仿真盘下单前，必须先打开simNow登录上，否则下单不会成交，erro_msg:CTP:结算结果未确认
			//chaxun_num = chaxun_num + 1;//不能用这种方式判断多空
			os_erro_msg<<"trader_class--"<<"查询持仓:OnRspQryInvestorPosition"<<"  "<<"查询号"<<nRequestID<<"  "
				<<"合约："<<pInvestorPosition->InstrumentID<<"  "
				<<"多2空3："<<pInvestorPosition->PosiDirection<<"  "			///多头#define THOST_FTDC_PD_Long '2'			///空头#define THOST_FTDC_PD_Short '3'
				<<"上日持仓："<<pInvestorPosition->YdPosition<<"  "
				<<"今日持仓："<<pInvestorPosition->Position<<"  ";
			os_erro_msg<<"trader_id:"<<syscall(__NR_gettid)<<endl;
			if(pInvestorPosition->PosiDirection == '3')//空
			{
				position_chaxun_kong_youxiangying=true;
			}
			if(pInvestorPosition->PosiDirection == '2')//多
			{
				position_chaxun_duo_youxiangying=true;
			}
		}
		else
		{
			get_date_time();
			os_erro_msg<<"trader_class--"<<"查询持仓:OnRspQryInvestorPosition"<<"  "<<"查询号"<<nRequestID<<"  "<<"pInvestorPosition为NULL"<<"  ";
			os_erro_msg<<"trader_id:"<<syscall(__NR_gettid)<<endl;
		}
	}
	///请求查询投资者持仓明细响应  //没有响应
	virtual void OnRspQryInvestorPositionDetail(CThostFtdcInvestorPositionDetailField *pInvestorPositionDetail, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
	{
		if(pInvestorPositionDetail!=NULL)
		{
			get_date_time();
			os_erro_msg<<"trader_class--"<<"查询持仓明细:OnRspQryInvestorPositionDetail"<<"  "<<pRspInfo->ErrorID<<""<<pRspInfo->ErrorMsg<<"    ";
			os_erro_msg<<"合约："<<pInvestorPositionDetail->InstrumentID<<"  "
				<<"买卖："<<pInvestorPositionDetail->Direction<<"  "
				<<"数量："<<pInvestorPositionDetail->Volume<<"  ";
			os_erro_msg<<"trader_id:"<<syscall(__NR_gettid)<<endl;
			cout<<"查询持仓明细响应:OnRspQryInvestorPositionDetail"<<endl;	
		}
		else
		{
			get_date_time();
			os_erro_msg<<"trader_class--"<<"查询持仓明细:OnRspQryInvestorPositionDetail"<<"  "<<"pInvestorPositionDetail(失败0):"<<pInvestorPositionDetail<<"  ";
			os_erro_msg<<"trader_id:"<<syscall(__NR_gettid)<<endl;
			cout<<"查询持仓明细响应:OnRspQryInvestorPositionDetail"<<endl;	
		}
	}

	//合约查询响应  //响应回来的是几百个合约代码
	virtual void OnRspQryInstrument(CThostFtdcInstrumentField *pInstrument, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
	{
		get_date_time();
		os_erro_msg<<"trader_class--"<<"合约查询响应:OnRspQryInstrument"<<"  "<<pInstrument->InstrumentID<<"  ";
		os_erro_msg<<"trader_id:"<<syscall(__NR_gettid)<<endl;
		if (pInstrument)
		{
			//md_InstrumentID.push_back(pInstrument->InstrumentID);
		}
	}

private:
	CThostFtdcTraderApi *m_pUserApi;//在SPI类里放一个对应的API对象，在SPI类里主动挑事，下单、查询什么的。自建的响应类SPI里一个traderAPI对象干活，而且不用像main中的那个API对象进行一串初始化
};

//API类是抽象类，不能实例化，但是可以声明指针；SPI类是正常类，可以实例化
//以上CTP----------------------------------------------------------------------------------

int runMode=2;//1实盘  2历史  //实盘检查



int main(int argc, char* argv[])
{
	cout<<"now_kaishi"<<endl;
	get_date_time();
	os_erro_msg<<"now kaishi!"<<endl;

	//start_agent(data_callback, trader_callback);

	if(true)  //Linux linux
	{
		if(out_agent::instance().load() == false )
		{   		
			printf("fail open lib  return !\r\n");
			return 1;
		}
		out_agent::instance().m_start_agent(data_callback, trader_callback);
	}

	if (runMode==1)
	{
		IndexCode="000001";
		HeyueTag="IF";

		//实盘需要的前20天,期指顶底差参照标准
		//int start_day1=20181201;
		//int end_day1=20190306;
		//dingdicha_standard_IF=getAveHeyueDingichaPre20_shipan(start_day1,end_day1,HeyueTag);
		if(dingdicha_standard_IF==0)
		{
			dingdicha_standard_IF=80.39;//实盘检查
		}
		for (int xx=0;xx<date_valid.size();xx++)
		{
			os_synget_check<<date_valid[xx]<<"  ";
		}
		//历史成交峰值和量
		read_lishifengzhi();
		//昨日结算价
		int zuoDate=20200915;//实盘检查  填昨天的日期
		int fetchTime = time2Seconds(zuoDate, 0);
		vector<MutiTypeDataOneDay> VMT = SyncHistoryData("IF","IF2009",20024,fetchTime,fetchTime);//前一天的结算价
		vector<StructDataValue> vv1=zhuanhuan(VMT);
		if(!vv1.empty())
		{
			jiesuanjia_IF_fu1=vv1.back().m_fields[7];
			for (int i=0;i<vv1.size();i++)//历史有全天的行数
			{
				//时间处理
				t_real=vv1[i].m_timeTag+30000;//86400数据
				p_real=gmtime(&t_real);

				if((p_real->tm_year+1900)*10000+(p_real->tm_mon+1)*100+p_real->tm_mday == zuoDate)
				{
					jiesuanjia_IF_fu1=vv1[i].m_fields[7];
				}
			}
		}
		//历史成交峰值
		if(true)
		{
			v_chengjiaofengzhi_lishi.push_back(4622);//实盘检查
			v_chengjiaofengzhi_liang_lishi.push_back(1951);
		}

		//实盘7天
		int start_day=20200908;//实盘检查
		int end_day=20200916;
		date_process(start_day,end_day);
		for (int i=0;i<date_valid.size();i++)
		{
			cout<<date_valid[i]<<endl;
		}
		cout<<"date_valid.size():"<<date_valid.size()<<endl;
		if(date_valid.size()!=7)
			date_valid.push_back(end_day);
		for (int xx=0;xx<date_valid.size();xx++)
		{
			os_synget_check<<date_valid[xx]<<"  ";
		} 

		for(int kk=0;kk<date_valid.size()-6;kk++)
		{
			//每日初始化变量
			Init_ByDay();

			today=date_valid[kk+6];
			day_fu1=date_valid[kk+5];
			day_fu2=date_valid[kk+4];
			day_fu3=date_valid[kk+3];
			day_fu4=date_valid[kk+2];
			day_fu5=date_valid[kk+1];
			day_fu6=date_valid[kk];
			days=date_valid.size()-6-kk;//days==1时，就是最后一天

			//指数涨幅顶底差参照标准
			if(dingdicha_zhangfu_ave_index.size()==0)
			{
				dingdicha_zhangfu_standard_index=0.02;//2%
			}
			else
			{
				dingdicha_zhangfu_standard_index=dingdicha_zhangfu_ave_index.back();
			}
			//------------------------------------------------------------------------------------------

			//历史换手率
			int fetchTime_hsl=time2Seconds(20190326,0);
			getHuanshoulv(fetchTime_hsl,"000001");

			//昨天换手率
			huanshoulv_fu1=0;
			for (int i=0;i<date_huanshoulv.size();i++)
			{
				if (date_huanshoulv[i] == day_fu1)
				{
					huanshoulv_fu1 = index_huanshoulv86400[i];
					break;
				}
			}

			//准备参数
			int res=dataPreProcess(today,day_fu1,day_fu2,day_fu3,day_fu4,day_fu5,kk,IndexCode,HeyueTag);
			//实盘--------------------------------------------------------------------------------
			cout<<"prepare to login---";
			//if(!trader_login(1000,"hj887012",'1',"bying7573"))//实盘检查
			//if(!trader_login(1001,"yl881000",'1',"yl123321"))
			//if(!trader_login(2100,"205774",'1',"568568"))
			//if(!trader_login(2100,"211821",'1',"210037"))	

			//CTP
			os_erro_msg<<"main_thread_id:"<<syscall(__NR_gettid)<<endl;
			//交易类处理	
			//CThostFtdcTraderApi *pUserApi = CThostFtdcTraderApi::CreateFtdcTraderApi();//主线程里一个traderAPI对象干活
			cout<<"ctp_version:"<<pUserApi->GetApiVersion()<<endl;
			CSimpleHandler sh(pUserApi);
			pUserApi->RegisterSpi(&sh);//在API里注册上SPI，自建的两个类都继承自SPI
			pUserApi->SubscribePrivateTopic(THOST_TERT_QUICK);
			pUserApi->SubscribePublicTopic(THOST_TERT_QUICK);
			pUserApi->RegisterFront(const_cast<char *>(my_trader_Frontaddr1.c_str()));
			pUserApi->Init();//下单的必须用这个处理好的实例对象下单，其它新建的对象都不能，因此下单函数要传参这个实例
			cout<<"trader_init!"<<endl;

			cout<<"date:"<<pUserApi->GetTradingDay()<<endl;
			while (true)
			{
				if(hasLogin_trader&&has_jiesuanConfirm)
				{
					break;
				}
			}
			cout<<"login succeed and jiesuan queren ok!"<<endl;

			//资金查询
			sleep(2);
			if(true)
			{
				cout<<"ask to Account query!"<<endl;
				CThostFtdcQryTradingAccountField a = { 0 };
				strcpy(a.BrokerID, my_brokeID.c_str());
				strcpy(a.InvestorID, my_investID.c_str());
				strcpy(a.CurrencyID, my_currencyID.c_str());
				int ab = pUserApi->ReqQryTradingAccount(&a, nRequestID++);  //返回的ab什么意思 去接口说明文档里查
				get_date_time();
				os_erro_msg<<"main: 资金查询 : 成功0网络连接失败-1未处理请求超过许可数-2每秒发送请求超过许可数-3："<<ab<<endl;
				//未处理请求超过许可数: 因为动态库底层设置每次只允许1个查询请求在途，即请求发出后，未收到响应前，不能发起下一笔查询请求，sleep不能解决
				//每秒发送请求超过许可数: 每秒钟只允许发出1次查询请求 期货公司设定的次数。用sleep可以解决
			}
			///请求查询投资者持仓
			sleep(2);
			int n=1;
			while(n<3)
			{
				n++;
				cout<<"chaxun"<<endl;
				sleep(2);
				///请求查询投资者持仓
				CThostFtdcQryInvestorPositionField chicang ={ 0 };
				strcpy(chicang.BrokerID, my_brokeID.c_str());
				strcpy(chicang.InvestorID, my_investID.c_str());
				strcpy(chicang.InstrumentID, my_instrumentID.c_str());
				strcpy(chicang.ExchangeID, my_exchangeID.c_str());
				int ab = pUserApi->ReqQryInvestorPosition(&chicang, nRequestID++);
				get_date_time();
				os_erro_msg<<"main: 持仓查询 : 成功0网络连接失败-1未处理请求超过许可数-2每秒发送请求超过许可数-3："<<ab<<endl;
			}
			//agent_subscribe("IF","IF2009",20,0,0);
			//agent_subscribe("SH","000001",25,0,0);
			//agent_subscribe("SH","000001",45,0,0);
			//agent_subscribe("SH","000001",96,0,0);
			//agent_subscribe("SH","000001",88,0,0);
			//agent_subscribe("SH","000001",17,0,0);
			//agent_subscribe("SH","000001",231,0,0);
			//agent_subscribe("SH","000001",44,0,0);
			//agent_subscribe("BK","SI0001",232,0,0);

			out_agent::instance().m_agent_subscribe("IF","IF2009",20,0,0);//Linux linux  //实盘检查  合约  期权的是203
			out_agent::instance().m_agent_subscribe("SH","000001",25,0,0);
			out_agent::instance().m_agent_subscribe("SH","000001",45,0,0);
			out_agent::instance().m_agent_subscribe("SH","000001",96,0,0);
			out_agent::instance().m_agent_subscribe("SH","000001",88,0,0);
			out_agent::instance().m_agent_subscribe("SH","000001",17,0,0);
			out_agent::instance().m_agent_subscribe("SH","000001",231,0,0);
			out_agent::instance().m_agent_subscribe("SH","000001",44,0,0);
			out_agent::instance().m_agent_subscribe("BK","SI0001",232,0,0);
			out_agent::instance().m_agent_subscribe("SH","000001",38,0,0);
			
			/////////////////////////////////////////////////////////////////////////////
			cout<<"Data read ok!"<<endl;
		}
	}

	if (runMode==2)
	{
		//date_process(20140401,20190622);
		//date_process(20140401,20190716);
		//date_process(20140401,20190901);
		//date_process(20140401,20191114);
		date_process(20140401,20201206);
		//date_process(20200201,20200716);
		//date_process(20200301,20200408);//实盘检查
		if (days==1)
		{
			for (int xx=0;xx<date_valid.size();xx++)
			{
				os_synget_check<<date_valid[xx]<<"  ";
			}
			os_synget_check<<" --------------------------------"<<endl;
		}

		if(false)//有问题的放在这里测试，和正常流程没有关系，好了删除
		{
			int fetchTime=time2Seconds(20190312,0);
			vector<MutiTypeDataOneDay> VMT= SyncHistoryData("IF","IF2009",20,fetchTime,fetchTime);
			vector<StructDataValue> vv1=zhuanhuan(VMT);
			os_synget_check<<"IF2009问题测试5：vv1.size():"<<vv1.size()<<endl;
		}
		//历史换手率
		int fetchTime_hsl=time2Seconds(20190326,0);
		getHuanshoulv(fetchTime_hsl,"000001");

		if(true)
		{
			cout<<"day_xunhuan:"<<date_valid.size()<<endl;
			int kk_num=0;
			for(int kk=0;kk<date_valid.size()-6;kk++)
			{
				cout<<"day_xunhuan:"<<date_valid.size()<<endl;
				//每日初始化变量
				Init_ByDay();

				today=date_valid[kk+6];
				day_fu1=date_valid[kk+5];
				day_fu2=date_valid[kk+4];
				day_fu3=date_valid[kk+3];
				day_fu4=date_valid[kk+2];
				day_fu5=date_valid[kk+1];
				day_fu6=date_valid[kk];
				days=date_valid.size()-6-kk;//days==1时，就是最后一天

				IndexCode="000001";
				HeyueTag="IF";

				//昨天换手率
				huanshoulv_fu1=0;
				for (int i=0;i<date_huanshoulv.size();i++)
				{
					if (date_huanshoulv[i] == day_fu1)
					{
						huanshoulv_fu1 = index_huanshoulv86400[i];
						break;
					}
				}

				//期指顶底差参照标准------------------------------------------------------------------------
				if(dingdicha_ave_byday_IF.size()==0)
				{
					dingdicha_standard_IF=80.5;
				}
				else
				{
					dingdicha_standard_IF=dingdicha_ave_byday_IF.back();
				}
				//指数涨幅顶底差参照标准
				if(dingdicha_zhangfu_ave_index.size()==0)
				{
					dingdicha_zhangfu_standard_index=0.02;//2%
				}
				else
				{
					dingdicha_zhangfu_standard_index=dingdicha_zhangfu_ave_index.back();
				}
				//------------------------------------------------------------------------------------------				

				//取上证指数数据SH000001，必须取

				int res=dataPreProcess(today,day_fu1,day_fu2,day_fu3,day_fu4,day_fu5,kk,IndexCode,HeyueTag);
				if(res==-1)//如果数据处理有问题，当天不再继续
					continue;
				else
				{}
				kk_num=kk_num+1;
				//------------------------------------------------------------------------------------------				

				//取通用数据  没用到，去掉

				cout<<"Data of one day fetch ok-"<<kk<<endl;		
				//////////////////////////////////////////以上是准备数据流///////////////////////////////////////////////////////////		

				//逐条接收数据
				for (int i = 0; i < new_14400_secondIndexPrice.size(); i++)
				{
					//数据实时处理				
					dataRealProcess(i,-1);
				}

				//以下，一天内的总结，只是记录，不参与实时控制//////////////////////////////
				if(max_heyueprice>0)
				{
					conclude_onday(kk_num);//
				}

				/////////////////////////////////////////////////////////////////////////////
				cout<<"Data read ok!"<<endl;
			}
		}
	}
	//join_agent();
	pUserApi->Join();
	out_agent::instance().m_join_agent();//Linux linux

	cout<<"all_thread_finished!"<<endl;

	exit(0);
	return 0;
}

void dataRealProcess(int h,int whichzhibiaolai)
{
	if(h==58)
	{
		cout<<"wait"<<endl;
	}
	if(runMode==2)
	{
#pragma region Receive_data_one_by_one
		//合约价格与合约成交量
		if(new_14400_secondHeyuePrice.size()>0)
		{
			if(new_14400_secondHeyuePrice[h]!=0)
			{
				pre_Heyueprice=new_14400_secondHeyuePrice[h];
				pre_Heyuechengjiaoliang=new_14400_secondHeyueAmount[h];
			}
			this_Heyueprice=new_14400_secondHeyuePrice[h];
			this_Heyuechengjiaoliang=new_14400_secondHeyueAmount[h];
		}
		//指数主力等级，需计算
		//指数成交额 分钟数据用于计算主力等级
		if(new_14400_secondZLDJe.size()>0)
		{
			if(new_14400_secondZLDJe[h]!=0)
			{
				pre_ZLDJe=new_14400_secondZLDJe[h];					
				ZLDJe_lai=true;
				e_time=new_14400_ZLDJeTimeFlag[h];//用于判断谁是后到的数据
			}
			this_ZLDJe=new_14400_secondZLDJe[h];
		}
		//大内盘大外盘成交额    应该是现货的，因为主力等级就是现货的指标
		if(new_14400_secondDaNeie.size()>0)
		{
			if(new_14400_secondDaNeie[h]!=0)
			{
				pre_daneiE=new_14400_secondDaNeie[h];
				pre_dawaiE=new_14400_secondDaWaie[h];
				daneiwai_lai=true;
				neiwaie_time=new_14400_DaNeiWaieTimeflag[h];//用于判断谁是后到的数据
			}
			this_daneiE=new_14400_secondDaNeie[h];
			this_dawaiE=new_14400_secondDaWaie[h];
		}
		//期货动力等级，需计算
		//forceXD
		if(new_14400_secondForceXD.size()>0)
		{
			if(new_14400_secondForceXD[h]!=0)
			{
				pre_forceXD=new_14400_secondForceXD[h];	
			}
			this_forceXD=new_14400_secondForceXD[h];
		}
		//委比等级，需计算
		//weituoe
		if(new_14400_secondOrderRatio1.size()>0)
		{
			if(new_14400_secondOrderRatio1[h]!=0)
			{
				pre_weimairu38=new_14400_secondOrderRatio1[h];	
				pre_weimaichu38=new_14400_secondOrderRatio2[h];
			}
			this_weimairu38=new_14400_secondOrderRatio1[h];
			this_weimaichu38=new_14400_secondOrderRatio2[h];
		}
		//盘面资金
		if(new_14400_secondCapital.size()>0)
		{
			if(new_14400_secondCapital[h]!=0)
			{
				pre_capital=new_14400_secondCapital[h];
			}
			this_capital=new_14400_secondCapital[h];
		}
		//标的指数评分
		if(new_14400_secondZhuLipingfen.size()>0)
		{
			if(new_14400_secondZhuLipingfen[h]!=-5)
			{
				pre_zhulipingfen=new_14400_secondZhuLipingfen[h];
				pre_zhichengpingfen=new_14400_secondZhiChengpingfen[h];
				pre_paoyapingfen=new_14400_secondPaoYapingfen[h];
			}
			this_zhulipingfen=new_14400_secondZhuLipingfen[h];
			this_zhichengpingfen=new_14400_secondZhiChengpingfen[h];
			this_paoyapingfen=new_14400_secondPaoYapingfen[h];
		}
		//上证指数评分
		if(true)
		{
			if(new_14400_secondZhuLipingfen_SH000001.size()>0)
			{
				if(new_14400_secondZhuLipingfen_SH000001[h]!=-5)
				{
					pre_zhulipingfen_SH000001=new_14400_secondZhuLipingfen_SH000001[h];
					//pre_zhulipingfen=new_14400_secondZhuLipingfen_SH000001[h];
				}
				this_zhulipingfen_SH000001=new_14400_secondZhuLipingfen_SH000001[h];
				//this_zhulipingfen=new_14400_secondZhuLipingfen_SH000001[h];
			}
		}
		//指数形态
		if(new_14400_secondIndexPrice.size()>0)
		{
			if(new_14400_secondIndexPrice[h]!=0)
			{
				pre_indexPrice=new_14400_secondIndexPrice[h];
			}
			this_indexPrice=new_14400_secondIndexPrice[h];
		}
		//指数成交额和成交量 秒数据 用于计算指数的成本均线
		if(new_14400_secondLiang.size()>0)
		{
			if(new_14400_secondLiang[h]!=0)
			{
				pre_chengjiaoliang=new_14400_secondLiang[h];
				pre_chengjiaoe=new_14400_secondE[h];
			}
			this_chengjiaoliang=new_14400_secondLiang[h];
			this_chengjiaoe=new_14400_secondE[h];
		}
		if(new_14400_weimaiweimaiTimeflag.size()>0)
		{
			if(new_14400_secondweimaichu[h]!=0)
			{
				pre_weimaichu=new_14400_secondweimaichu[h];
				pre_weimairu=new_14400_secondweimairu[h];
			}
			this_weimaichu=new_14400_secondweimaichu[h];
			this_weimairu=new_14400_secondweimairu[h];
		}
		//指数动力线
		if(new_14400_secondIndexDonglixian.size()>0)
		{
			if(new_14400_secondIndexDonglixian[h]!=0)
			{
				pre_donglixian=new_14400_secondIndexDonglixian[h];
			}
			this_donglixian=new_14400_secondIndexDonglixian[h];
		}
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma endregion Receive_data_one_by_one
	}

	//全局变量改局部变量
	//以上
	//以下数据格式处理依据的基础是，数据已经预先都逐秒存放在标准的开盘时间内了，共14400个////////////////////////////

#pragma region Heyue_price_and_ChengJiaoShouShu
	//1.合约量价处理/////////////////////////////////////
	if((this_Heyueprice!=0&&runMode==2)||(runMode==1&&whichzhibiaolai==1))  //上证指数处理IF合约，沪深300不再重复处理
	{		
		if(runMode==2)
		{
			time_heyuePrice.push_back(new_14400_heyuepriceTimeflag[h]);
			heyuePrice_heibing.push_back(pre_Heyueprice);//开平仓时统计使用的合约价格

			t_ctrl=int(new_14400_heyuepriceTimeflag[h]);
			pt_ctrl=gmtime(&t_ctrl);
		}
		if(runMode==1)
		{
			time_heyuePrice.push_back(t_real);
			heyuePrice_heibing.push_back(pre_Heyueprice);//开平仓时统计使用的合约价格

			t_ctrl=t_real;//ctrl是无论实盘还是历史都全程控制，real是实盘来的
			pt_ctrl=gmtime(&t_ctrl);
		}
		Heyueprice_lai=true;
		
		//以下，合约量价分布处理//////////////////////
		HeyuepriceKK=HeyuepriceKK+1;
		bool already_has_this_Heyueprice=false;

		//合约价格一更新，就创建所有需要的新键值对，其中的量，在成交量更新时再修改
		if(HeyuepriceKK==1)//第一次来合约价格
		{
			Jia_Liang JL_jianzhidui;
			JL_jianzhidui.heyue_price=pre_Heyueprice;			
			JL_jianzhidui.heyue_liang=0;//pre_Heyuechengjiaoliang改成0,否则20150511第一个价格对应成交量会很高	
			//JL_jianzhidui.heyue_liang=0;
			Jia_Liang_jianzhiduis.push_back(JL_jianzhidui);
		}
		else
		{
			for (int k=0;k<Jia_Liang_jianzhiduis.size();k++)
			{
				if(pre_Heyueprice==Jia_Liang_jianzhiduis[k].heyue_price)
				{
					already_has_this_Heyueprice=true;
					Jia_Liang_jianzhiduis[k].heyue_liang=Jia_Liang_jianzhiduis[k].heyue_liang+pre_Heyuechengjiaoliang-pre_pre_Heyuechengjiaoliang;
					break;
				}
			}
			if(already_has_this_Heyueprice==false)
			{
				Jia_Liang JL_jianzhidui;
				JL_jianzhidui.heyue_price=pre_Heyueprice;
				JL_jianzhidui.heyue_liang=pre_Heyuechengjiaoliang-pre_pre_Heyuechengjiaoliang;
				Jia_Liang_jianzhiduis.push_back(JL_jianzhidui);
			}
		}
		//按合约价格排序
		for (int m=0;m<Jia_Liang_jianzhiduis.size();m++)
		{
			for(int n=m+1;n<Jia_Liang_jianzhiduis.size();n++)
			{
				Jia_Liang tmpJianzhidui;
				if(Jia_Liang_jianzhiduis[n].heyue_price<Jia_Liang_jianzhiduis[m].heyue_price)
				{
					tmpJianzhidui=Jia_Liang_jianzhiduis[m];
					Jia_Liang_jianzhiduis[m]=Jia_Liang_jianzhiduis[n];
					Jia_Liang_jianzhiduis[n]=tmpJianzhidui;
				}
			}
		}
		pre_pre_Heyuechengjiaoliang=pre_Heyuechengjiaoliang;
		//合约价格做成分钟数据没有意义，不做了		

		//全天合约的最大最小值
		if(pre_Heyueprice>max_heyueprice)
			max_heyueprice=pre_Heyueprice;
		if(pre_Heyueprice<min_heyueprice)
			min_heyueprice=pre_Heyueprice;

		//合约涨幅
		if(jiesuanjia_IF_fu1!=0)
		{
			this_zhangfu_IF=(pre_Heyueprice-jiesuanjia_IF_fu1)/jiesuanjia_IF_fu1;
		}

		//合约的四分位
		max_10s_heyueprice=-1e15;
		min_10s_heyueprice=1e15;
		base_hour=int(pt_ctrl->tm_hour+8);//当前时间，比较的基准
		base_minute=int(pt_ctrl->tm_min);
		base_second=int(pt_ctrl->tm_sec);
		now_hour1=0;
		now_minute1=0;
		now_second1=0;

		int x=time_heyuePrice.size();

		vector<double> heyuePrice_temp;
		vector<double> heyueprice_period;
		for (int bb=time_heyuePrice.size()-1;bb>=0;bb--)
		{
			ttt=int(time_heyuePrice[bb]);
			pttt=gmtime(&ttt);
			now_hour1=int(pttt->tm_hour+8);
			now_minute1=int(pttt->tm_min);
			now_second1=int(pttt->tm_sec);
			if((base_hour<=11&&now_hour1<=11&base_hour*3600+base_minute*60+base_second-(now_hour1*3600+now_minute1*60+now_second1)<=2400)
				||(base_hour>=13&&now_hour1>=13&&base_hour*3600+base_minute*60+base_second-(now_hour1*3600+now_minute1*60+now_second1)<=2400)
				||(base_hour>=13&&now_hour1<=11&&base_hour*3600+base_minute*60+base_second-(now_hour1*3600+now_minute1*60+now_second1)<=7800))
			{
				if(heyuePrice_heibing[bb]>max_10s_heyueprice)
					max_10s_heyueprice=heyuePrice_heibing[bb];
				if(heyuePrice_heibing[bb]<min_10s_heyueprice)
					min_10s_heyueprice=heyuePrice_heibing[bb];

				heyuePrice_temp.push_back(heyuePrice_heibing[bb]);

				x=-1;				
			}
			else
				break;							
		}
		if(max_10s_heyueprice!=-1e15 && min_10s_heyueprice !=1e15)
		{
			heyueprice_period.clear();
			for (int bb=heyuePrice_temp.size()-1;bb>=0;bb--)
			{
				heyueprice_period.push_back(heyuePrice_temp[bb]);
			}
			dingdicha_huyue_10s=max_10s_heyueprice-min_10s_heyueprice;
			//KDJ
			double this_RSV=50.0;
			if(max_10s_heyueprice!=min_10s_heyueprice)
				this_RSV=(pre_Heyueprice-min_10s_heyueprice)/(max_10s_heyueprice-min_10s_heyueprice)*100;
			double this_K=50;
			if(heyueKDJ_K.size()==0)
			{
				this_K=2*50.0/3+1*this_RSV/3;
			}
			else
			{
				this_K=2*heyueKDJ_K.back()/3+1*this_RSV/3;
			}
			heyueKDJ_K.push_back(this_K);
			//爆发
			int num_1=heyueprice_period.size()/6;
			int num_2=2*heyueprice_period.size()/6;
			int num_3=3*heyueprice_period.size()/6;
			int num_4=4*heyueprice_period.size()/6;
			int num_5=7*heyueprice_period.size()/8;
			int num_40=36*heyueprice_period.size()/40;
			int num_6=5*heyueprice_period.size()/6;

			baofa_kai_10s=0;
			baofa_ping_10s=0;
			max_IFprice_10s_hou_1_6=-1e15;
			min_IFprice_10s_hou_1_6=1e15;
			daoxiang_10s_IF=0;

			max_IFprice_10s_hou_1_2=-1e15;
			min_IFprice_10s_hou_1_2=1e15;
			max_IFprice_10s_hou_1_3=-1e15;
			min_IFprice_10s_hou_1_3=1e15;

			mean_if_10s_hou_1_3=0;
			std_if_10s_hou_1_3=0;
			mean_if_10s_hou_1_2=0;
			std_if_10s_hou_1_2=0;
			double sum_if_hou_1_3=0;
			double sum_iffang_hou_1_3=0;
			double sum_if_hou_1_2=0;
			double sum_iffang_hou_1_2=0;
			int counts_1=0;
			int counts_2=0;
			int counts_3=0;

			lianzhang_count_IF=0;
			liandie_count_IF=0;
			zhangdiebi=1.0;
			bengpan=false;
			for (int ee=0;ee<heyueprice_period.size();ee++)
			{
				if(ee>=num_3)//后1/2
				{
					if(heyueprice_period[ee]>max_IFprice_10s_hou_1_2)
						max_IFprice_10s_hou_1_2=heyueprice_period[ee];
					if(heyueprice_period[ee]<min_IFprice_10s_hou_1_2)
						min_IFprice_10s_hou_1_2=heyueprice_period[ee];
					sum_if_hou_1_2=sum_if_hou_1_2+heyueprice_period[ee];
				}
				if(ee>=num_6)//后1/6
				{
					if(heyueprice_period[ee]>max_IFprice_10s_hou_1_3)
						max_IFprice_10s_hou_1_3=heyueprice_period[ee];
					if(heyueprice_period[ee]<min_IFprice_10s_hou_1_3)
						min_IFprice_10s_hou_1_3=heyueprice_period[ee];
				}
				if(ee>=num_5)
				{
					if(heyueprice_period[ee]>max_IFprice_10s_hou_1_6)
						max_IFprice_10s_hou_1_6=heyueprice_period[ee];//AAA实盘问题，heyueprice_period 163比heyuePrice_temp 1540少，ee很大722
					if(heyueprice_period[ee]<min_IFprice_10s_hou_1_6)
						min_IFprice_10s_hou_1_6=heyueprice_period[ee];
				}
				if(ee>=num_4)
				{
					sum_if_hou_1_3=sum_if_hou_1_3+heyueprice_period[ee];
				}
				//判断期指偏向
				if(ee>=5)
				{
					if(
						heyueprice_period[ee]>heyueprice_period[ee-1]
					&&
						heyueprice_period[ee-1]>heyueprice_period[ee-2]
					&&
						heyueprice_period[ee-2]>heyueprice_period[ee-3]
					&&
						heyueprice_period[ee-3]>heyueprice_period[ee-4]
					&&
						heyueprice_period[ee-4]>heyueprice_period[ee-5]
					)
					{
						lianzhang_count_IF = lianzhang_count_IF + 1;
					}
					if(
						heyueprice_period[ee]<heyueprice_period[ee-1]
					&&
						heyueprice_period[ee-1]<heyueprice_period[ee-2]
					&&
						heyueprice_period[ee-2]<heyueprice_period[ee-3]
					&&
						heyueprice_period[ee-3]<heyueprice_period[ee-4]
					&&
						heyueprice_period[ee-4]<heyueprice_period[ee-5]
					)
					{
						liandie_count_IF = liandie_count_IF + 1;
					}
								
				}
				if(ee>=num_40)
				{
					if(
						bengpan==false
						//&&heyueprice_period.back()<min_10s_heyueprice+0.75*(max_10s_heyueprice-min_10s_heyueprice)
						&&heyueprice_period.back()-heyueprice_period[ee]<-5
						&&heyueprice_period.back()-heyueprice_period[ee]<-dingdicha_standard_IF/8
						&&heyueprice_period.back()-heyueprice_period[ee]<-(max_heyueprice-min_heyueprice)/5
						//&&heyueprice_period[ee]>min_10s_heyueprice+0.75*(max_10s_heyueprice-min_10s_heyueprice)
						)
					{
						bengpan=true;
					}
				}
			}
			//
			vpecent_lianzhang_IF.push_back((double)lianzhang_count_IF/heyueprice_period.size());
			vpecent_liandie_IF.push_back((double)liandie_count_IF/heyueprice_period.size());
			if(liandie_count_IF!=0)
			{
				zhangdiebi=double(lianzhang_count_IF)/liandie_count_IF;
			}
			if(days==1)
			{
				os_pianjian_IF<<vpecent_lianzhang_IF.back()<<endl;
				os_pianjian_IF<<vpecent_liandie_IF.back()<<endl;
				os_pianjian_IF<<heyuePrice_heibing.back()<<endl;
				os_pianjian_IF<<zhangdiebi<<endl;
			}
			//以上----------------------
			//后三分之一的均值和方差
			mean_if_10s_hou_1_3=sum_if_hou_1_3/(heyueprice_period.size()-num_4);
			for (int ee=num_4;ee<heyueprice_period.size();ee++)
			{
				sum_iffang_hou_1_3=sum_iffang_hou_1_3+(heyueprice_period[ee]-mean_if_10s_hou_1_3)*(heyueprice_period[ee]-mean_if_10s_hou_1_3);
			}
			std_if_10s_hou_1_3=sqrt(sum_iffang_hou_1_3/(heyueprice_period.size()-num_4));
			stds_hou_1_3.push_back(std_if_10s_hou_1_3);
			//后二分之一的均值和方差
			mean_if_10s_hou_1_2=sum_if_hou_1_2/(heyueprice_period.size()-num_3);
			for (int ee=num_3;ee<heyueprice_period.size();ee++)
			{
				sum_iffang_hou_1_2=sum_iffang_hou_1_2+(heyueprice_period[ee]-mean_if_10s_hou_1_2)*(heyueprice_period[ee]-mean_if_10s_hou_1_2);
			}
			std_if_10s_hou_1_2=sqrt(sum_iffang_hou_1_2/(heyueprice_period.size()-num_3));
			stds_hou_1_2.push_back(std_if_10s_hou_1_2);

			double ck=1.5;
			for (int ee=num_4;ee<heyueprice_period.size();ee++)
			{
				if(heyueprice_period[ee]>=mean_if_10s_hou_1_3-ck*std_if_10s_hou_1_3&&heyueprice_period[ee]<=mean_if_10s_hou_1_3+ck*std_if_10s_hou_1_3)
					counts_1=counts_1+1;
				if(heyueprice_period[ee]>=mean_if_10s_hou_1_3)
					counts_2=counts_2+1;
				if(heyueprice_period[ee]<=mean_if_10s_hou_1_3)
					counts_3=counts_3+1;
			}
			//导向开仓用导向
			if(base_hour>=10
				&&double(counts_1)/(heyueprice_period.size()-num_4)>0.80
				&&double(counts_2)/(heyueprice_period.size()-num_4)>0.42
				&&double(counts_3)/(heyueprice_period.size()-num_4)>0.42
				&&std_if_10s_hou_1_3*ck*2<=(max_if_10s-min_if_10s)/4
				&&mean_if_10s_hou_1_3>=if_3_4_10s
				&&pre_Heyueprice>mean_if_10s_hou_1_3-ck*std_if_10s_hou_1_3)
			{
				daoxiang_10s_IF=1;//上导向
				daoxiang_10s_IF_shangxian=mean_if_10s_hou_1_3+ck*std_if_10s_hou_1_3;
				daoxiang_10s_IF_zhongxian=mean_if_10s_hou_1_3;
				daoxiang_10s_IF_xiaxian=mean_if_10s_hou_1_3-ck*std_if_10s_hou_1_3;
			}
			if(base_hour>=10
				&&double(counts_1)/(heyueprice_period.size()-num_4)>0.80
				&&double(counts_2)/(heyueprice_period.size()-num_4)>0.42
				&&double(counts_3)/(heyueprice_period.size()-num_4)>0.42
				&&std_if_10s_hou_1_3*ck*2<=(max_if_10s-min_if_10s)/4
				&&mean_if_10s_hou_1_3<=if_1_4_10s
				&&pre_Heyueprice<mean_if_10s_hou_1_3+ck*std_if_10s_hou_1_3)
			{
				daoxiang_10s_IF=-1;//下导向
				daoxiang_10s_IF_shangxian=mean_if_10s_hou_1_3+ck*std_if_10s_hou_1_3;
				daoxiang_10s_IF_zhongxian=mean_if_10s_hou_1_3;
				daoxiang_10s_IF_xiaxian=mean_if_10s_hou_1_3-ck*std_if_10s_hou_1_3;
			}
			if(base_hour>=10
				&&double(counts_1)/(heyueprice_period.size()-num_4)>0.80
				&&double(counts_2)/(heyueprice_period.size()-num_4)>0.42
				&&double(counts_3)/(heyueprice_period.size()-num_4)>0.42
				&&std_if_10s_hou_1_3*ck*2<=(max_if_10s-min_if_10s)/4
				&&mean_if_10s_hou_1_3<if_3_4_10s&&mean_if_10s_hou_1_3>if_1_4_10s
				&&pre_Heyueprice<mean_if_10s_hou_1_3+ck*std_if_10s_hou_1_3)
			{
				daoxiang_10s_IF=-2;//下导向
				daoxiang_10s_IF_shangxian=mean_if_10s_hou_1_3+ck*std_if_10s_hou_1_3;
				daoxiang_10s_IF_zhongxian=mean_if_10s_hou_1_3;
				daoxiang_10s_IF_xiaxian=mean_if_10s_hou_1_3-ck*std_if_10s_hou_1_3;
			}
			//形态用导向
			if(base_hour>=10&&new_minuteIndexPrice.size()>0
				&&double(counts_1)/(heyueprice_period.size()-num_4)>0.80
				&&double(counts_2)/(heyueprice_period.size()-num_4)>0.42
				&&double(counts_3)/(heyueprice_period.size()-num_4)>0.42
				&&std_if_10s_hou_1_3*ck*2<=(max_if_10s-min_if_10s)/4
				&&mean_if_10s_hou_1_3>=if_3_4_10s)
			{
				daoxiang_keep_10s=1;//上导向
				daoxiang_start_time = new_minuteIndexPrice.size();
				daoxiang_start_indexprice=new_minuteIndexPrice.back();
			}
			if(base_hour>=10&&new_minuteIndexPrice.size()>0
				&&double(counts_1)/(heyueprice_period.size()-num_4)>0.80
				&&double(counts_2)/(heyueprice_period.size()-num_4)>0.42
				&&double(counts_3)/(heyueprice_period.size()-num_4)>0.42
				&&std_if_10s_hou_1_3*ck*2<=(max_if_10s-min_if_10s)/4
				&&mean_if_10s_hou_1_3<=if_1_4_10s)
			{
				daoxiang_keep_10s=-1;//下导向
				daoxiang_start_time = new_minuteIndexPrice.size();
				daoxiang_start_indexprice=new_minuteIndexPrice.back();
			}

			//爆发
			/*if(base_hour>=10&&max_IFprice_10s_hou_1_6-min_IFprice_10s_hou_1_6>=1*dingdicha_huyue_10s/2)
			baofa_kai_10s=1;
			else
			baofa_kai_10s=0;*/
			if(base_hour>=0&&pre_Heyueprice-min_IFprice_10s_hou_1_6>=1*dingdicha_huyue_10s/2&&pre_Heyueprice-min_IFprice_10s_hou_1_6>=1*dingdicha_standard_IF/3&&pre_Heyueprice-min_IFprice_10s_hou_1_6>=12)//20190426由4改2  加12限制
			{
				baofa_kai_10s=1;
				baofa_kai_allow=1;
				baofa_kai_time=new_minuteIndexPrice.size();
			}
			if(base_hour>=0&&max_IFprice_10s_hou_1_6-pre_Heyueprice>=1*dingdicha_huyue_10s/2&&max_IFprice_10s_hou_1_6-pre_Heyueprice>=1*dingdicha_standard_IF/3&&max_IFprice_10s_hou_1_6-pre_Heyueprice>=12)
			{
				baofa_kai_10s=-1;
				baofa_kai_allow=-1;
				baofa_kai_time=new_minuteIndexPrice.size();
			}
			if(baofa_kai_allow!=0&&new_minuteIndexPrice.size() - baofa_kai_time >=10)
			{
				baofa_kai_allow = 0;
			}

			if(base_hour>=0&&pre_Heyueprice-min_IFprice_10s_hou_1_6>=1*dingdicha_standard_IF/4&&pre_Heyueprice-min_IFprice_10s_hou_1_6>=10)//要超过10个点 新增20190605
			{
				baofa_ping_10s=1;
				youBaofa_10s = 1;
				baofa_time=new_minuteIndexPrice.size();
			}
			if(base_hour>=0&&max_IFprice_10s_hou_1_6-pre_Heyueprice>=1*dingdicha_standard_IF/4&&max_IFprice_10s_hou_1_6-pre_Heyueprice>=10)//要超过10个点 新增20190605
			{
				baofa_ping_10s=-1;//正 向上爆发；负 向下爆发
				youBaofa_10s = -1;
				baofa_time=new_minuteIndexPrice.size();
			}
			if(youBaofa_10s!=0&&new_minuteIndexPrice.size() - baofa_time > 20)
			{
				youBaofa_10s = 0;
			}
			////防止先爆发，一开仓立即被平
			//if(baofa_ping_10s==1&&hasChicangIF!=1)
			//{
			//	//向上爆发  但并没持多仓
			//	baofa_ping_duo_youxiao=0;//
			//}

			if(days==1)
			{
				os_fenwei_IF<<max_10s_heyueprice<<endl;
				os_fenwei_IF<<min_10s_heyueprice+(max_10s_heyueprice-min_10s_heyueprice)*3/4<<endl;
				os_fenwei_IF<<pre_Heyueprice<<endl;
				os_fenwei_IF<<min_10s_heyueprice+(max_10s_heyueprice-min_10s_heyueprice)*1/4<<endl;
				os_fenwei_IF<<min_10s_heyueprice<<endl;
				os_fenwei_IF<<this_K<<endl;
				os_fenwei_IF<<baofa_kai_10s<<endl;
				os_fenwei_IF<<mean_if_10s_hou_1_3<<endl;
				os_fenwei_IF<<std_if_10s_hou_1_3<<endl;
				os_fenwei_IF<<daoxiang_10s_IF<<endl;
				os_fenwei_IF<<x<<endl;
				os_fenwei_IF<<today<<endl;
				os_fenwei_IF<<std_if_10s_hou_1_2<<endl;
				os_fenwei_IF<<0<<endl;
				os_fenwei_IF<<0<<endl;
				os_fenwei_IF<<0<<endl;
				os_fenwei_IF<<0<<endl;
			}
		}		
		//
		if(runMode==2)
		{
			t_ctrl=int(new_14400_heyuepriceTimeflag[h]);//时间恢复，必须给时间指针恢复原来的值。因为任何一个地方修改了，所有的时间都跟着变
			pt_ctrl=gmtime(&t_ctrl);
		}
		if(runMode==1)
		{
			t_ctrl=t_real;//时间恢复，必须给时间指针恢复原来的值。因为任何一个地方修改了，所有的时间都跟着变
			pt_ctrl=gmtime(&t_ctrl);
		}
		//以上，合约的四分位

		//保存此刻量价分布.不保存了，实时保存没意义
		if(days==1)
		{}
	}
	//以上，量价分布处理/////////////////////////////////////////////////////////////////////////
#pragma endregion Heyue_price_and_ChengJiaoShouShu
	
#pragma region Index_ZhuLiDengji
	//2.主力等级和大单流向相对值计算/////////////////////////////////////////////////////////////
	//主力等级由两个分钟数据计算得出，主力等级值在二者较后到达者到达的时间点更新，而谁较后到达，并不一定
	if(
		(ZLDJe_lai==true&&daneiwai_lai==true&&((this_ZLDJe!=0&&e_time-neiwaie_time>=0&&e_time-neiwaie_time<15)||(this_dawaiE!=0&&neiwaie_time-e_time>=0&&neiwaie_time-e_time<15))&&runMode==2)
		||
		(runMode==1&&(whichzhibiaolai==6||whichzhibiaolai==4))
		)
	{
		if(runMode==2)
		{
			if(this_ZLDJe!=0)
			{
				t_ctrl=int(new_14400_ZLDJeTimeFlag[h]);
				pt_ctrl=gmtime(&t_ctrl);
			}
			if(this_dawaiE!=0)
			{
				t_ctrl=int(new_14400_DaNeiWaieTimeflag[h]);
				pt_ctrl=gmtime(&t_ctrl);
			}
		}
		if(runMode==1)
		{
			t_ctrl=t_real;
			pt_ctrl=gmtime(&t_ctrl);		
		}

		//计算主力等级
		if(pre_ZLDJe!=0&&movedata!=0&&movedata!=-1e15)
		{
			this_ZLDJ=((1.05659*pre_dawaiE-pre_daneiE)/pre_ZLDJe - 0) / (0.7 * movedata);
			vZhuLiDengJi.push_back(this_ZLDJ);//已检验20181116

			if(true)
			{
				int this_tag=0;
				double huanchongdai_shang=this_ZLDJ+1;
				double huanchongdai_xia=this_ZLDJ-1;
				for (int s=5;s<vZhuLiDengJi.size();s++)
				{
					if(vZhuLiDengJi[s]>huanchongdai_shang)
					{
						this_tag=1;
					}
					if(vZhuLiDengJi[s]<huanchongdai_xia)
					{
						this_tag=-1;
					}
					if(s==vZhuLiDengJi.size()-1)
					{
						if(this_tag==-1)//从低位到现在上升了1
						{
							this_ZLDJ_tag=1;
						}
						if(this_tag==1)//从高位到现在降低了1
						{
							this_ZLDJ_tag=-1;
						}
					}
				}
			}

			hour_vZhuLiDengJi.push_back(int(pt_ctrl->tm_hour+8));
			minute_vZhuLiDengJi.push_back(int(pt_ctrl->tm_min));
			second_vZhuLiDengJi.push_back(int(pt_ctrl->tm_sec));
			ZLDJ_lai=true;
		}
		//计算大单流向
		if(pre_ZLDJe!=0)
		{
			this_bigFlow=(pre_dawaiE-pre_daneiE)/pre_ZLDJe*100;
			bigFlow.push_back(this_bigFlow);//已检查20181116
			this_dadanliuxiang=pre_dawaiE-pre_daneiE;			

			hour_bigFlow.push_back(int(pt_ctrl->tm_hour+8));
			minute_bigFlow.push_back(int(pt_ctrl->tm_min));
			second_bigFlow.push_back(int(pt_ctrl->tm_sec));

			if(this_bigFlow>max_bigFlow)
			{
				max_bigFlow=this_bigFlow;
			}
			if(this_bigFlow<min_bigFlow)
			{
				min_bigFlow=this_bigFlow;
			}
			if(this_dadanliuxiang>max_dadanliuxiang)
			{
				max_dadanliuxiang=this_dadanliuxiang;
			}
			if(this_dadanliuxiang<min_dadanliuxiang)
			{
				min_dadanliuxiang=this_dadanliuxiang;
			}
		}
		//保存txt/////////////////////////
		if(days==1)
		{
			//主力等级
			if(vZhuLiDengJi.size()>0)
			{
				//画图
				if(hour_vZhuLiDengJi.back()*3600+minute_vZhuLiDengJi.back()*60+second_vZhuLiDengJi.back()>43200)
					os_zhulidengji_huatu<<t_ctrl-5400<<endl;
				else
					os_zhulidengji_huatu<<t_ctrl<<endl;
				os_zhulidengji_huatu<<this_ZLDJ<<endl;
				os_zhulidengji_huatu<<this_ZLDJ_tag<<endl;//加3个
				os_zhulidengji_huatu<<0<<endl;//加3个
				os_zhulidengji_huatu<<0<<endl;//加3个
				//检查
				os_zhulidengji_check<<hour_vZhuLiDengJi.back()<<":"<<minute_vZhuLiDengJi.back()<<":"<<second_vZhuLiDengJi.back()<<"    "<<this_ZLDJ<<endl;
			}
			//大单流向相对值
			if(bigFlow.size()>0)
			{
				//画图
				if(hour_vZhuLiDengJi.back()*3600+minute_vZhuLiDengJi.back()*60+second_vZhuLiDengJi.back()>43200)
					os_bigflow_huatu<<t_ctrl-5400<<endl;
				else
					os_bigflow_huatu<<t_ctrl<<endl;
				os_bigflow_huatu<<this_bigFlow<<endl;
				os_bigflow_huatu<<this_dadanliuxiang<<endl;
				os_bigflow_huatu<<max_dadanliuxiang<<endl;
				os_bigflow_huatu<<min_dadanliuxiang<<endl;
				//检查
				os_bigflow_check<<hour_bigFlow.back()<<":"<<minute_bigFlow.back()<<":"<<second_bigFlow.back()<<"    "<<this_bigFlow<<"    "<<this_dadanliuxiang<<endl;
			}
		}
	}
	//以上，主力等级和大单流向相对值计算/////////////////////////////////////
#pragma endregion Index_ZhuLiDengji
	
#pragma region Heyue_DongLiDengJi
	//3.期货动力等级计算/////////////////////////////////////////////////////
	if((this_forceXD!=0&&runMode==2)||(runMode==1&&whichzhibiaolai==8))
	{
		if(runMode==2)
		{
			t_ctrl=int(new_14400_forceXDTimeflag[h]);
			pt_ctrl=gmtime(&t_ctrl);
		}
		if(runMode==1)
		{
			t_ctrl=t_real;
			pt_ctrl=gmtime(&t_ctrl);
		}
		forceXD_hour=int(pt_ctrl->tm_hour+8);
		forceXD_minute=int(pt_ctrl->tm_min);
		forceXD_second=int(pt_ctrl->tm_sec);
		forceXD_lai=true;
		//if(forceXD_minute!=pre_forceXD_minute&&pre_forceXD_minute!=-1) //并列界面全部用秒数据
		{
			if(emacq!=0&&commonRating!=0&&emacq!=-1e15&&commonRating!=-1e15)
			{
				this_DLDJ=10000*pre_forceXD/emacq/(0.5*commonRating);

				vDongliLiDengJi.push_back(this_DLDJ);//已检验20181116

				if(true)
				{
					int this_tag=0;
					double huanchongdai_shang=this_DLDJ+1;
					double huanchongdai_xia=this_DLDJ-1;
					for (int s=300;s<vDongliLiDengJi.size();s++)
					{
						if(vDongliLiDengJi[s]>huanchongdai_shang)
						{
							this_tag=1;
						}
						if(vDongliLiDengJi[s]<huanchongdai_xia)
						{
							this_tag=-1;
						}
						if(s==vDongliLiDengJi.size()-1)
						{
							if(this_tag==-1)//从低位到现在上升了1
							{
								this_DLDJ_tag=1;
							}
							if(this_tag==1)//从高位到现在降低了1
							{
								this_DLDJ_tag=-1;
							}
						}
					}
				}

				//记录
				if(days==1)
				{
					os_donglidengji<<this_DLDJ<<endl;
					os_donglidengji<<this_DLDJ_tag<<endl;
					os_donglidengji<<0<<endl;
					os_donglidengji<<0<<endl;
				}
				DLDJ_lai=true;
			}
		}
	}
	//以上，期货动力等级计算/////////////////////////////////////////////////
#pragma endregion Heyue_DongLiDengJi

#pragma region weibidengji
	//3.委比等级计算/////////////////////////////////////////////////////
	if((this_weimairu38!=0&&runMode==2)||(runMode==1&&whichzhibiaolai==10))
	{
		if(runMode==2)
		{
			t_ctrl=int(new_14400_OrderRatioTimeflag[h]);
			pt_ctrl=gmtime(&t_ctrl);
		}
		if(runMode==1)
		{
			t_ctrl=t_real;
			pt_ctrl=gmtime(&t_ctrl);
		}
		weimai38_hour=int(pt_ctrl->tm_hour+8);
		weimai38_minute=int(pt_ctrl->tm_min);
		weimai38_second=int(pt_ctrl->tm_sec);
		weimai38_lai=true;
		//并列界面全部用秒数据
		if(orderRatio2!=0&&orderRatio2!=-1e15)
		{
			if(pre_weimaichu38>0)
			{
				this_weituobi=pre_weimairu38/pre_weimaichu38;//委托比
				if(days==1)
				{
					os_weituobi_huatu<<this_weituobi<<endl;
				}
			}			
			this_WBDJ = ((pre_weimairu38 - pre_weimaichu38)/(pre_weimairu38 + pre_weimaichu38) - orderRatio1) / (0.5 * orderRatio2);

			if(weimai38_hour*3600+weimai38_minute*60>9*3600+35*60)
			{
				vWeiBiDengJi.push_back(this_WBDJ);//已检验20181116
			}
			if(vWeiBiDengJi.size()>0)
			{
				int this_tag=0;
				double huanchongdai_shang=this_WBDJ+1;
				double huanchongdai_xia=this_WBDJ-1;
				for (int s=0;s<vWeiBiDengJi.size();s++)
				{
					if(vWeiBiDengJi[s]>huanchongdai_shang)
					{
						this_tag=1;
					}
					if(vWeiBiDengJi[s]<huanchongdai_xia)
					{
						this_tag=-1;
					}
					if(s==vWeiBiDengJi.size()-1)
					{
						if(this_tag==-1)//从低位到现在上升了1
						{
							this_WBDJ_tag=1;
						}
						if(this_tag==1)//从高位到现在降低了1
						{
							this_WBDJ_tag=-1;
						}
					}
				}
			}

			//记录
			if(days==1)
			{
				os_weibidengji<<this_WBDJ<<endl;
				os_weibidengji<<pre_weimairu38<<endl;
				os_weibidengji<<pre_weimaichu38<<endl;
				os_weibidengji<<orderRatio1<<endl;
				os_weibidengji<<orderRatio2<<endl;
				os_weibidengji<<this_WBDJ_tag<<endl;
				os_weibidengji<<this_weituobi<<endl;
				os_weibidengji<<0<<endl;
			}
			WBDJ_lai=true;
		}

	}
	//以上，委比等级计算/////////////////////////////////////////////////
#pragma endregion weibidengji
	
#pragma region Index_capital
	//4.盘面资金处理/////////////////////////////////////////////////////////
	if((this_capital!=0&&runMode==2)||(runMode==1&&whichzhibiaolai==2))
	{
		if(runMode==2)
		{
			t_ctrl=int(new_14400_capitalTimeflag[h]);
			pt_ctrl=gmtime(&t_ctrl);
		}
		if(runMode==1)
		{
			t_ctrl=t_real;
			pt_ctrl=gmtime(&t_ctrl);
		}	
		//历史资金等级用的分钟数据  因为历史测试没取资金的秒数据   实盘用秒数据
		this_ZJDJ=(pre_capital-aCotMoveAverage_forToday)/(0.5*aCotMoveStandard_forToday);//资金等级
		if(pre_hour_capital_kaipinghandle*3600+pre_minute_capital_kaipinghandle*60>9*3600+35*60)
		{
			vZiJinDengji.push_back(this_ZJDJ);
		}
		if(vZiJinDengji.size()>0)
		{
			int this_tag=0;
			double huanchongdai_shang=this_ZJDJ+1;
			double huanchongdai_xia=this_ZJDJ-1;
			for (int s=0;s<vZiJinDengji.size();s++)
			{
				if(vZiJinDengji[s]>huanchongdai_shang)
				{
					this_tag=1;
				}
				if(vZiJinDengji[s]<huanchongdai_xia)
				{
					this_tag=-1;
				}
				if(s==vZiJinDengji.size()-1)
				{
					if(this_tag==-1)//从低位到现在上升了1
					{
						this_ZJDJ_tag=1;
					}
					if(this_tag==1)//从高位到现在降低了1
					{
						this_ZJDJ_tag=-1;
					}
				}
			}
		}
		os_zijindengji_huatu<<this_ZJDJ<<endl;
		os_zijindengji_huatu<<this_ZJDJ_tag<<endl;//加3个
		os_zijindengji_huatu<<0<<endl;
		os_zijindengji_huatu<<0<<endl;

		pre_hour_capital_kaipinghandle=hour_capital_kaipinghandle;
		pre_minute_capital_kaipinghandle=minute_capital_kaipinghandle;
		pre_second_capital_kaipinghandle=second_capital_kaipinghandle;

		hour_capital_kaipinghandle=int(pt_ctrl->tm_hour+8);
		minute_capital_kaipinghandle=int(pt_ctrl->tm_min);
		second_capital_kaipinghandle=int(pt_ctrl->tm_sec);

		if(runMode==2
			||(runMode==1&&minute_capital_kaipinghandle!=pre_minute_capital_kaipinghandle&&pre_pre_capital>0))
		{
			hour_new_minuteCapital.push_back(hour_capital_kaipinghandle);
			minute_new_minuteCapital.push_back(minute_capital_kaipinghandle);
			second_new_minuteCapital.push_back(second_capital_kaipinghandle);

			if(runMode==2)
			{
				new_minuteCapital.push_back(pre_capital);//资金数据与软件完全一致，均值在中午之后出现一点偏差
			}
			if(runMode==1)
			{
				new_minuteCapital.push_back(pre_pre_capital);
			}
			//资金均线
			if(Capital_junxian.size()==0)
				Capital_junxian.push_back(new_minuteCapital.back());
			else
				Capital_junxian.push_back((Capital_junxian.back()*Capital_junxian.size()+new_minuteCapital.back())/(Capital_junxian.size()+1));

			capital_lai=true;

			//保存txt
			if(days==1&&Capital_junxian.size()<=239)//为了和历史的资金239个数据对应画图
			{
				//画图
				if(hour_capital_kaipinghandle*3600+minute_capital_kaipinghandle*60+second_capital_kaipinghandle>43200)
					os_capital_huatu<<t_ctrl-5400<<endl;
				else
					os_capital_huatu<<t_ctrl<<endl;
				os_capital_huatu<<new_minuteCapital.back()<<endl;
				os_capital_huatu<<Capital_junxian.back()<<endl;
				os_capital_huatu<<ave_capital_last5<<endl;
				//检查
				os_capital_check<<hour_capital_kaipinghandle<<":"<<minute_capital_kaipinghandle<<":"<<second_capital_kaipinghandle<<"  "<<new_minuteCapital.back()<<"    "<<Capital_junxian.back()<<endl;
			}
		}
		pre_pre_capital=pre_capital;
	}
	//以上，盘面资金/////////////////////////////////////////////////////////
#pragma endregion Index_capital

#pragma region WeimaiWeimai
	//委卖委买处理/////////////////////////////////////////////////////////
	if((this_weimaichu!=0&&runMode==2)||(runMode==1&&whichzhibiaolai==9))
	{
		if(runMode==2)
		{
			t_ctrl=int(new_14400_weimaiweimaiTimeflag[h]);
			pt_ctrl=gmtime(&t_ctrl);
		}
		if(runMode==1)
		{
			t_ctrl=t_real;
			pt_ctrl=gmtime(&t_ctrl);
		}
		cout<<"44 - 1--------"<<endl;
		pre_hour_weimaiweimai_kaipinghandle=hour_weimaiweimai_kaipinghandle;
		pre_minute_weimaiweimai_kaipinghandle=minute_weimaiweimai_kaipinghandle;
		pre_second_weimaiweimai_kaipinghandle=second_weimaiweimai_kaipinghandle;

		hour_weimaiweimai_kaipinghandle=int(pt_ctrl->tm_hour+8);
		minute_weimaiweimai_kaipinghandle=int(pt_ctrl->tm_min);
		second_weimaiweimai_kaipinghandle=int(pt_ctrl->tm_sec);
		cout<<"44 - 2--------"<<endl;

		if(runMode==2
			||(runMode==1&&minute_weimaiweimai_kaipinghandle!=pre_minute_weimaiweimai_kaipinghandle&&pre_pre_weimairu>0))
		{
			hour_new_minuteWeimaiWeimai.push_back(hour_weimaiweimai_kaipinghandle);
			minute_new_minuteWeimaiWeimai.push_back(minute_weimaiweimai_kaipinghandle);
			second_new_minuteWeimaiWeimai.push_back(second_weimaiweimai_kaipinghandle);

			if(runMode==2)
			{
				new_minuteWeimaichu.push_back(pre_weimaichu);
				new_minuteWeimairu.push_back(pre_weimairu);
				new_minuteWeituobi.push_back(pre_weimairu/pre_weimaichu);
			}
			if(runMode==1)
			{
				new_minuteWeimaichu.push_back(pre_pre_weimaichu);
				new_minuteWeimairu.push_back(pre_pre_weimairu);
				new_minuteWeituobi.push_back(pre_pre_weimairu/pre_pre_weimaichu);
			}

			cout<<"44 - 3--------"<<endl;

			if(new_minuteWeimaichu_junxian.size()==0)//委卖均线
				new_minuteWeimaichu_junxian.push_back(new_minuteWeimaichu.back());
			else
				new_minuteWeimaichu_junxian.push_back((new_minuteWeimaichu_junxian.back()*new_minuteWeimaichu_junxian.size()+new_minuteWeimaichu.back())/(new_minuteWeimaichu_junxian.size()+1));
			
			int ci=new_minuteWeimaichu_junxian.size()-1;

			cout<<"44 - 4--------"<<endl;
			if(ci<=weimaichu_huanchongdai1.size()-1)
			{
				if(new_minuteWeimaichu_junxian.back()>=weimaichu_huanchongdai1[ci])
					this_modified_paoyapingfen=-0.5;  //抛压越高  评分越低
				if(new_minuteWeimaichu_junxian.back()>=weimaichu_huanchongdai3[ci]&&new_minuteWeimaichu_junxian.back()<=weimaichu_huanchongdai2[ci])
					this_modified_paoyapingfen=0.0;
				if(new_minuteWeimaichu_junxian.back()<=weimaichu_huanchongdai4[ci])
					this_modified_paoyapingfen=0.5;

				paoyafen_modified_hebing.push_back(this_modified_paoyapingfen);//修正后评分

				//保存txt
				if(days==1)//为了和历史的资金239个数据对应画图
				{	
					os_paoyapingfen_xiuzheng<<new_minuteWeimaichu_junxian.back()<<endl;
					os_paoyapingfen_xiuzheng<<AveWeimaichu_240_dayfu1[ci]<<endl;
					os_paoyapingfen_xiuzheng<<AveWeimaichu_240_dayfu2[ci]<<endl;
					os_paoyapingfen_xiuzheng<<AveWeimaichu_240_dayfu3[ci]<<endl;
					os_paoyapingfen_xiuzheng<<AveWeimaichu_240_dayfu4[ci]<<endl;
					os_paoyapingfen_xiuzheng<<AveWeimaichu_240_dayfu5[ci]<<endl;
					os_paoyapingfen_xiuzheng<<weimaichu_huanchongdai1[ci]<<endl;
					os_paoyapingfen_xiuzheng<<weimaichu_huanchongdai2[ci]<<endl;
					os_paoyapingfen_xiuzheng<<weimaichu_huanchongdai3[ci]<<endl;
					os_paoyapingfen_xiuzheng<<weimaichu_huanchongdai4[ci]<<endl;
					os_paoyapingfen_xiuzheng<<this_modified_paoyapingfen<<endl;
				}
			}
			if(paoyafen_modified_hebing.size()>=2)
			{
				if(paoyafen_modified_hebing.back()>paoyafen_modified_hebing[paoyafen_modified_hebing.size()-2])
				{
					paoyapingfen_keep=1;
				}
				if(paoyafen_modified_hebing.back()<paoyafen_modified_hebing[paoyafen_modified_hebing.size()-2])
				{
					paoyapingfen_keep=-1;
				}
				if(paoyafen_modified_hebing.back()==-0.5)
				{
					paoyapingfen_keep=-1;
				}
			}

			weimai_lai=true;
		}
		cout<<"44 - 5--------"<<endl;
		pre_pre_weimairu=pre_weimairu;
		pre_pre_weimaichu=pre_weimaichu;
		
	}
	//以上，委卖委买/////////////////////////////////////////////////////////
#pragma endregion WeimaiWeimai
	
#pragma region Index_pingfen
	//5.支撑评分的修正///////////////////////////////////////////////////////
	//防守指标：支撑和抛压看沪深300的评分    进攻指标：主力评分看上证指数的评分	
	if((this_zhichengpingfen!=-5&&runMode==2)||(runMode==1&&whichzhibiaolai==7))
	{
		int ci=new_minuteCapital.size()-1;
		if(ci<239&&zhichengfen_modified_hebing.size()<239)//与保存的资金个数相等。//防止ci没变，但是评分接连来两个数
		{
			if(runMode==2)
			{
				t_ctrl=int(new_14400_forceXDTimeflag[h]);
				pt_ctrl=gmtime(&t_ctrl);
			}
			if(runMode==1)
			{
				t_ctrl=t_real;
				pt_ctrl=gmtime(&t_ctrl);
			}
			pre_hour_pingfen_kaipinghandle=hour_pingfen_kaipinghandle;
			pre_minute_pingfen_kaipinghandle=minute_pingfeni_kaipinghandle;
			pre_second_pingfen_kaipinghandle=second_pingfen_kaipinghandle;//一开始写反了

			hour_pingfen_kaipinghandle=int(pt_ctrl->tm_hour+8);
			minute_pingfeni_kaipinghandle=int(pt_ctrl->tm_min);
			second_pingfen_kaipinghandle=int(pt_ctrl->tm_sec);
			if(runMode==2||
				(runMode==1&&minute_pingfeni_kaipinghandle!=pre_minute_pingfen_kaipinghandle&&pre_pre_zhulipingfen!=-5))
			{
				hour_new_minutePingFen.push_back(hour_pingfen_kaipinghandle);
				minute_new_minutePingFen.push_back(minute_pingfeni_kaipinghandle);
				second_new_minutePingFen.push_back(second_pingfen_kaipinghandle);

				if(runMode==2)
				{
					new_minuteZhuLipingfen.push_back(pre_zhulipingfen);
					new_minuteZhiChengpingfen.push_back(pre_zhichengpingfen);
					new_minutePaoYapingfen.push_back(pre_paoyapingfen);
				}
				if(runMode==1)
				{
					new_minuteZhuLipingfen.push_back(pre_pre_zhulipingfen);
					new_minuteZhiChengpingfen.push_back(pre_pre_zhichengpingfen);
					new_minutePaoYapingfen.push_back(pre_pre_paoyapingfen);
				}

				pingfen_lai=true;

				//修正支撑评分
				//this_ZJDJ=0.0;
				if(pre_pre_zhichengpingfen==-5||new_minuteCapital.size()==0||cot_huanchongdai1.size()==0)//当天第一次传来指数评分，修正值就取原始评分
				{
					this_modified_zhichengpingfen=pre_zhichengpingfen;
				}
				else//不是第一次传来指数评分
				{
					if(this_modified_zhichengpingfen==-5)
						this_modified_zhichengpingfen=0;
					//this_ZJDJ=(new_minuteCapital.back()-aCotMoveAverage_forToday)/(0.5*aCotMoveStandard_forToday);//资金等级  挪到资金去了  更细
					//资金均值的最大最小值，为了得到一个阈值
					if(Capital_junxian.back()>max_capitalJunXian)
						max_capitalJunXian=Capital_junxian.back();
					if(Capital_junxian.back()<min_capitalJunXian)
						min_capitalJunXian=Capital_junxian.back();
					fazhi_capitalJunXianBianhua=(max_capitalJunXian-min_capitalJunXian)/20;

					{
						//新增处理，几天的资金均值大小差不多，缓冲带没有区分度
						if(true)
						{
							//if(Capital_junxian.back()>=cot_huanchongdai1[ci]&&Capital_junxian.back()-cot_huanchongdai4[ci]>2e10)
							//	this_modified_zhichengpingfen=0.5;//处于最高带以上，且均值比最低带线高100亿
							//if(Capital_junxian.back()>=cot_huanchongdai3[ci]&&Capital_junxian.back()<=cot_huanchongdai2[ci])
							//	this_modified_zhichengpingfen=0.0;
							//if(Capital_junxian.back()<=cot_huanchongdai4[ci]&&Capital_junxian.back()-cot_huanchongdai1[ci]<-2e10)
							//	this_modified_zhichengpingfen=-0.5;//处于最低带以下，且均值比最高带线低100亿
							if(Capital_junxian.back()>=cot_huanchongdai1[ci])
								this_modified_zhichengpingfen=0.5;
							if(Capital_junxian.back()>=cot_huanchongdai3[ci]&&Capital_junxian.back()<=cot_huanchongdai2[ci])
								this_modified_zhichengpingfen=0.0;
							if(Capital_junxian.back()<=cot_huanchongdai4[ci])
								this_modified_zhichengpingfen=-0.5;
						}

					}
				}
				CapitalDengJi.push_back(this_ZJDJ);
				zhichengfen_modified_hebing.push_back(this_modified_zhichengpingfen);

				//位置评分
				this_weizhipingfen=0.0;
				if(pre_pre_zhichengpingfen==-5||new_minuteIndexPrice.size()==0)//当天第一次传来指数评分，修正值就取原始评分
				{
					this_weizhipingfen=0.0;
				}
				else
				{
					//位置评分 处于低位得1分，处于高位得-1分

					double a=highIndexprice_3days.back();
					double b=lowIndexprice_3days.back();
					if(new_minuteIndexPrice.back()>a-(a-b)/3)
						this_weizhipingfen=-1;
					if(new_minuteIndexPrice.back()<a-2*(a-b)/3)
						this_weizhipingfen=1;
				}
				vweizhipingfen.push_back(this_weizhipingfen);

				//问题：假如支撑评分没变化，资金均值却剧烈变化，评分是否需要修正？
				//10点以后，均值几乎都非常非常平稳。如果均值变化大，那么评分应该跟随变化。暂时不用考虑。

				//保存txt
				if(days==1)  //实际这里实盘有可能数据不足239个  严谨起来在下午3点后应该补足239
				{
					if(runMode==2)
					{
						//画图
						if(hour_pingfen_kaipinghandle*3600+minute_pingfeni_kaipinghandle*60+second_pingfen_kaipinghandle>43200)
							os_pingfen_huatu<<t_ctrl-5400<<endl;
						else
							os_pingfen_huatu<<t_ctrl<<endl;
						os_pingfen_huatu<<pre_zhulipingfen<<endl;
						os_pingfen_huatu<<pre_zhichengpingfen<<endl;
						os_pingfen_huatu<<pre_paoyapingfen<<endl;
						os_pingfen_huatu<<this_modified_zhichengpingfen<<endl;
						os_pingfen_huatu<<this_ZJDJ<<endl;
						os_pingfen_huatu<<0<<endl;
						//检查
						os_pingfen_check<<hour_pingfen_kaipinghandle<<":"<<minute_pingfeni_kaipinghandle<<":"<<second_pingfen_kaipinghandle<<"    "<<pre_zhulipingfen<<"    "<<pre_zhichengpingfen<<"    "<<pre_paoyapingfen<<endl;
					}
					if(runMode==1)
					{
						//画图
						if(hour_pingfen_kaipinghandle*3600+minute_pingfeni_kaipinghandle*60+second_pingfen_kaipinghandle>43200)
							os_pingfen_huatu<<t_ctrl-5400<<endl;
						else
							os_pingfen_huatu<<t_ctrl<<endl;
						os_pingfen_huatu<<pre_pre_zhulipingfen<<endl;
						os_pingfen_huatu<<pre_pre_zhichengpingfen<<endl;
						os_pingfen_huatu<<pre_pre_paoyapingfen<<endl;
						os_pingfen_huatu<<this_modified_zhichengpingfen<<endl;
						os_pingfen_huatu<<this_ZJDJ<<endl;
						os_pingfen_huatu<<0<<endl;
						//检查
						os_pingfen_check<<hour_pingfen_kaipinghandle<<":"<<minute_pingfeni_kaipinghandle<<":"<<second_pingfen_kaipinghandle<<"    "<<pre_pre_zhulipingfen<<"    "<<pre_pre_zhichengpingfen<<"    "<<pre_pre_paoyapingfen<<endl;
					}
				}
			}
			pre_pre_zhulipingfen=pre_zhulipingfen;
			pre_pre_zhichengpingfen=pre_zhichengpingfen;
			pre_pre_paoyapingfen=pre_paoyapingfen;
		}
	}
	//以上，支撑评分的修正///////////////////////////////////////////////////
#pragma endregion Index_pingfen
	
#pragma region Index_Price
	//6.指数形态/////////////////////////////////////////////////////////////
	if((this_indexPrice!=0&&runMode==2)||(runMode==1&&whichzhibiaolai==3))
	{
		if(runMode==2)
		{
			t_ctrl=int(new_14400_indexpriceTimeflag[h]);
			pt_ctrl=gmtime(&t_ctrl);
		}
		if(runMode==1)
		{
			t_ctrl=t_real;
			pt_ctrl=gmtime(&t_ctrl);
		}
		indexPrice_lai=true;
		minute_indexprice_kaipinghandle=int(pt_ctrl->tm_min);//分钟

		//指数均值/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(ave_price.size()==0)
		{
			ave_price.push_back(pre_indexPrice);
			prepareDataOfLast5(pre_indexPrice);//第一次来指数价格时，确定盘面资金的参考天数	
			//os_ave_check<<ave_price.back()<<"    "<<1<<endl;
		}
		else
		{
			if(pre_chengjiaoliang==0)
			{
				ave_price.push_back(pre_indexPrice);
				//os_ave_check<<ave_price.back()<<"    "<<2<<endl;
			}
			else
			{
				double pre_ave=ave_price.back();//上一时间点时的均价
				ave_price.push_back((pre_ave*pre_pre_chengjiaoliang+pre_indexPrice*(pre_chengjiaoliang-pre_pre_chengjiaoliang))/pre_chengjiaoliang);
				//os_ave_check<<ave_price.back()<<"    "<<pre_chengjiaoliang-pre_pre_chengjiaoliang<<"    "<<3<<"  "<<pre_chengjiaoliang<<"  "<<pre_pre_chengjiaoliang<<endl;
			}
		}
		pre_pre_chengjiaoliang=pre_chengjiaoliang;
		//////////////////////////////

		//处理成分钟数据
		if(minute_indexprice_kaipinghandle!=pre_minute_indexprice_kaipinghandle&&pre_minute_indexprice_kaipinghandle!=-1)
		{
			capital_beili_state=0;   //盘面资金背离的状态 放在分钟价格下就持续一分钟，放在外面就持续数秒
			if(DingDiBeiLi_Capital.size()>0)
			{
				//capital_beili_state=DingDiBeiLi_Capital.back();//出现顶底背离信号就一直保持，直到出现下一个背离信号
			}

			//简单均线，与前五天的简单均线比较
			if(indexprice_ave_today.size()==0)
			{
				indexprice_ave_today.push_back(pre_pre_indexPrice);
			}
			else
			{
				indexprice_ave_today.push_back(indexprice_ave_today.back()*9/10 + pre_pre_indexPrice/10);
			}		

			//价格分钟数据
			hour_new_minuteIndexPrice.push_back(int(pt_ctrl->tm_hour+8));
			minute_new_minuteIndexPrice.push_back(int(pt_ctrl->tm_min));
			second_new_minuteIndexPrice.push_back(int(pt_ctrl->tm_sec));
			new_minuteIndexPrice.push_back(pre_pre_indexPrice);
			ave_price_minute.push_back(ave_price.back());

			t_ctrl_indexprice.push_back(t_ctrl);//指数极值需要的时间

			//成本均线上下的面积
			if(new_minuteIndexPrice.back()>ave_price.back())
			{
				S_junxian_shang = S_junxian_shang + new_minuteIndexPrice.back() - ave_price.back();
			}
			if(new_minuteIndexPrice.back()<ave_price.back())
			{
				S_junxian_xia = S_junxian_xia + ave_price.back() - new_minuteIndexPrice.back();
			}

			//与前3|4|5天指数比较均线相对位置
			if(false)
			{
				double this_compare_fen=0;

				int num =100000;
				if(num>indexprice_ave_fu1.size())
					num=indexprice_ave_fu1.size();
				if(num>indexprice_ave_fu2.size())
					num=indexprice_ave_fu2.size();
				if(num>indexprice_ave_fu3.size())
					num=indexprice_ave_fu3.size();
				if(need_days == 4)
				{
					if(num>indexprice_ave_fu4.size())
						num=indexprice_ave_fu4.size();
				}
				if(need_days == 5)
				{
					if(num>indexprice_ave_fu5.size())
						num=indexprice_ave_fu5.size();
				}
				if(num>0 && new_minuteIndexPrice.size()<=num)
				{}
				indexprice_compare_pingfen.push_back(this_compare_fen);
			}

			//判断波动幅度-------------------------------------------------------------
			bodong_max_i.clear();
			bodong_min_i.clear();
			bodong_max_price.clear();
			bodong_min_price.clear();
			bodong_this_max_price=-100000;
			bodong_this_min_price=100000;
			bodong_this_max_i=0;
			bodong_this_min_i=0;
			bodong_temp1=0;
			bodong_temp2=0;
			bodong_there_is_up=0;
			bodong_there_is_down=0;

			bodong_count=0;

			double bodong_x1=0.4;
			double bodong_x2=0.4;
			for (int k=0;k<new_minuteIndexPrice.size();k++)
			{
				if(bodong_there_is_down==0)  //还没出现下跌超0.5%  找高点
				{
					if (new_minuteIndexPrice[k]>bodong_this_max_price)
					{
						bodong_this_max_price=new_minuteIndexPrice[k];
						bodong_this_max_i=k;
					}
				}    
				//一旦
				if ((new_minuteIndexPrice[k]-bodong_this_max_price)/bodong_this_max_price<-bodong_x2/100 && bodong_temp1==0)  //跌0.5%
				{
					bodong_temp1=1;
					bodong_temp2=0;
					bodong_there_is_down=1;

					bodong_this_min_price=100000;

					bodong_max_i.push_back(bodong_this_max_i);
					bodong_max_price.push_back(bodong_this_max_price);
				}
				if (bodong_temp1==1)    //一旦跌0.5%，开始从此时更新最低点       到涨0.5的时候停止更新低点
				{
					if (new_minuteIndexPrice[k]<bodong_this_min_price)
					{
						bodong_this_min_price=new_minuteIndexPrice[k];
						bodong_this_min_i=k;
					}
				}
				//------------------------------------------------------------------------------------------------------------------------------
					if(bodong_there_is_up==0)//还没出现上涨超0.4%  找低点
					{
						if (new_minuteIndexPrice[k]<bodong_this_min_price)
						{
							bodong_this_min_price=new_minuteIndexPrice[k];
							bodong_this_min_i=k;
						}
					}
					if ((new_minuteIndexPrice[k]-bodong_this_min_price)/bodong_this_min_price>bodong_x1/100 && bodong_temp2==0)  //涨0.5%
					{
						bodong_temp2=1;
						bodong_temp1=0;
						bodong_there_is_up=1;

						bodong_this_max_price=-100000;

						bodong_min_i.push_back(bodong_this_min_i);
						bodong_min_price.push_back(bodong_this_min_price);
					}
					if (bodong_temp2==1)    //一旦涨0.5%，开始从此时更新最高点  到跌0.5的时候停止更新高点
					{
						if (new_minuteIndexPrice[k]>bodong_this_max_price)
						{
							bodong_this_max_price=new_minuteIndexPrice[k];
							bodong_this_max_i=k;
						}
					}
			}
			int pre_bodong_count=bodong_count;
			bodong_count = bodong_max_price.size() + bodong_min_price.size();
			//记录每次波动次数增加时的时间
			if(bodong_count!=pre_bodong_count)
			{
				bo_count_add_time=(pt_ctrl->tm_hour+8)*3600+(pt_ctrl->tm_min)*60+(pt_ctrl->tm_sec);
				bo_count_add_times.push_back(bo_count_add_time); 
			}

			//以上  波动幅度-------------------


			//判断均线上下
			if(new_minuteIndexPrice.back()>=ave_price.back())//均值之上
			{
				up_down_ave.push_back(1);
			}
			else                                                    //均值之下
			{
				up_down_ave.push_back(-1);
			}

			//找缓平勾
			double this_huanpinggou_minutePrice=1;
			if(new_minuteIndexPrice.size()>=3)
			{
				if((new_minuteIndexPrice.back()-new_minuteIndexPrice[new_minuteIndexPrice.size()-2])
					*(new_minuteIndexPrice[new_minuteIndexPrice.size()-2]-new_minuteIndexPrice[new_minuteIndexPrice.size()-3])<0)
					this_huanpinggou_minutePrice=0;
			}
			HuanPingGou_minutePrice.push_back(this_huanpinggou_minutePrice);

			//计算涨幅，以前日收盘价为基准的涨跌幅
			this_zhangfu_indexPrice=0.0;
			if(yesterday_shoupanjia_indexPrice!=0)
				this_zhangfu_indexPrice=(pre_pre_indexPrice-yesterday_shoupanjia_indexPrice)/yesterday_shoupanjia_indexPrice;
			else
				this_zhangfu_indexPrice=1000;
			vec_IndexPrice_zhangfu.push_back(this_zhangfu_indexPrice);

			if(this_zhangfu_indexPrice>0)
			{
				zhangfu_GT0_count=zhangfu_GT0_count+1;
			}
			else
			{
				zhangfu_LT0_count=zhangfu_LT0_count+1;
			}

			minutePrice_lai=true;	
			//指数10分钟内的纠缠区域
			int minnum1=(new_minuteIndexPrice.size()<10?new_minuteIndexPrice.size():10);
			vector<double> index_thisPeriod;
			vector<int> counts_each_index;
			double jizhongdu_zhongxin=0.0;
			for (int k=0;k<minnum1;k++)
			{
				index_thisPeriod.push_back(new_minuteIndexPrice[new_minuteIndexPrice.size()-minnum1+k]);
			}
			for (int k=0;k<index_thisPeriod.size();k++)
			{
				int this_count=0;
				for (int r=0;r<index_thisPeriod.size();r++)
				{
					if(index_thisPeriod[r]>=index_thisPeriod[k]-3&&index_thisPeriod[r]<=index_thisPeriod[k]+3)
					{
						this_count=this_count+1;
					}
				}
				counts_each_index.push_back(this_count);
			}
			int this_max_count=-100000;
			double index_zhongxin_now=0;
			for (int k=0;k<index_thisPeriod.size();k++)
			{
				if(counts_each_index[k]>this_max_count)
				{
					this_max_count=counts_each_index[k];
					index_zhongxin_now=index_thisPeriod[k];
				}
			}
			jizhongdu_zhongxin=this_max_count/minnum1;
			//以上，指数10分钟内的纠缠区域
			
			//寻找4分位。过去40分钟
			int minnum=(new_minuteIndexPrice.size()<40?new_minuteIndexPrice.size():40);
			double max_40_indexprice=-1e15;
			double min_40_indexprice=1e15;
			double indexprice_weizhi1,indexprice_weizhi2,indexprice_weizhi3;
			double sum1=0;
			double mean_indexprice_last40=0.0;
			double sum2=0;
			double std_indexprice_last40=0.0;
			for (int k=0;k<minnum;k++)
			{
				if(new_minuteIndexPrice[new_minuteIndexPrice.size()-minnum+k]>max_40_indexprice)
				{
					max_40_indexprice=new_minuteIndexPrice[new_minuteIndexPrice.size()-minnum+k];
				}
				if(new_minuteIndexPrice[new_minuteIndexPrice.size()-minnum+k]<min_40_indexprice)
				{
					min_40_indexprice=new_minuteIndexPrice[new_minuteIndexPrice.size()-minnum+k];
				}
				sum1=sum1+new_minuteIndexPrice[new_minuteIndexPrice.size()-minnum+k];
			}
			indexprice_weizhi1=min_40_indexprice+0.75*(max_40_indexprice-min_40_indexprice);//上下四分位，改成上下10分位，为了严格isguC
			indexprice_weizhi2=min_40_indexprice+0.5*(max_40_indexprice-min_40_indexprice);
			indexprice_weizhi3=min_40_indexprice+0.25*(max_40_indexprice-min_40_indexprice);

			mean_indexprice_last40=sum1/minnum;
			for (int k=0;k<minnum;k++)
			{
				sum2=sum2+(new_minuteIndexPrice[new_minuteIndexPrice.size()-minnum+k]-mean_indexprice_last40)*(new_minuteIndexPrice[new_minuteIndexPrice.size()-minnum+k]-mean_indexprice_last40);
			}
			std_indexprice_last40=sqrt(sum2/minnum);

			//峰谷和背离					
			if(new_minuteCapital.size()==1)//出现峰谷之前,盘面资金第一次来值时，定为峰也为谷
			{
				feng_time.push_back(t_ctrl);
				feng_price.push_back(new_minuteIndexPrice.back());
				feng_cot.push_back(new_minuteCapital.back());
				up_down_ave.back()=1;

				gu_time.push_back(t_ctrl);
				gu_price.push_back(new_minuteIndexPrice.back());
				gu_cot.push_back(new_minuteCapital.back());

				feng_indexcount.push_back(new_minuteIndexPrice.size());
				gu_indexcount.push_back(new_minuteIndexPrice.size());

				//保存txt
				if(days==1)
				{
					if(hour_new_minuteIndexPrice.back()*3600+minute_new_minuteIndexPrice.back()*60+second_new_minuteIndexPrice.back()>43200)
						os_feng<<feng_time.back()-5400<<endl;
					else
						os_feng<<feng_time.back()<<endl;
					os_feng<<feng_price.back()<<endl;
					os_feng<<feng_cot.back()<<endl;
					if(hour_new_minuteIndexPrice.back()*3600+minute_new_minuteIndexPrice.back()*60+second_new_minuteIndexPrice.back()>43200)
						os_gu<<gu_time.back()-5400<<endl;
					else
						os_gu<<gu_time.back()<<endl;
					os_gu<<gu_price.back()<<endl;
					os_gu<<gu_cot.back()<<endl;
				}

				pre_ding_indexprice=feng_price.back();//保存最高的顶，以后更新
				pre_di_price=gu_price.back();         //保存最低的底，以后更新

				DingDiBeiLi_Capital.push_back(0);
			}
			/////////////////寻找当前指数价格和盘面资金的最大最小值，用于背离的大小比较//////////////////////////////////////
			if(pre_indexPrice>max_indexPrice)
				max_indexPrice=pre_indexPrice;
			if(pre_indexPrice<min_indexPrice&&pre_indexPrice>0)//防止之前还没有接收到价格，直接就把0赋值给min了，min将一直为0
				min_indexPrice=pre_indexPrice;
			if(pre_capital>max_capital)
				max_capital=pre_capital;
			if(pre_capital<min_capital&&pre_capital>0)//防止之前还没有接收到资金，直接就把0赋值给min了，min将一直为0
				min_capital=pre_capital;

			double interval_chuyi10_price=(max_indexPrice-min_indexPrice)/25;
			double interval_chuyi10_capital=(max_capital-min_capital)/100;

			//double interval_chuyi10_price=0.0;
			//double interval_chuyi10_capital=0.0;
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////

			//判断峰谷
			isFeng=false;
			isGu=false;

			//用分钟价格找峰谷
			double boduanfudu1=(max_indexPrice-min_indexPrice)/5;
			double boduanfudu2=(max_indexPrice-min_indexPrice)/12;
			if(new_minuteIndexPrice.size()>=5&&new_minuteCapital.size()>1)
			{
				if(
					(new_minuteIndexPrice.back()<new_minuteIndexPrice[new_minuteIndexPrice.size()-2])
					&&(new_minuteIndexPrice[new_minuteIndexPrice.size()-2]>new_minuteIndexPrice[new_minuteIndexPrice.size()-3])
					&&(new_minuteIndexPrice[new_minuteIndexPrice.size()-3]>new_minuteIndexPrice[new_minuteIndexPrice.size()-4])
					//&&((new_minuteIndexPrice[new_minuteIndexPrice.size()-2]>=index_zhongxin_now+5&&jizhongdu_zhongxin>=0)||jizhongdu_zhongxin<0)//原来是0.6和0.3
					&&
					(false||
					(feng_price.size()>0&&gu_price.size()>0&&new_minuteIndexPrice.back()-feng_price.back()>=boduanfudu2&&new_minuteIndexPrice.back()-gu_price.back()>=boduanfudu1)
					||(feng_price.size()>0&&gu_price.size()>0&&feng_indexcount.size()>0&&new_minuteIndexPrice.size()-feng_indexcount.back()>=12&&new_minuteIndexPrice.back()-gu_price.back()>=boduanfudu1)
					)
					&&new_minuteIndexPrice.back()>indexprice_weizhi1
					)
				{
					isFeng=true;
				}
				if(
					(new_minuteIndexPrice.back()>new_minuteIndexPrice[new_minuteIndexPrice.size()-2])
					&&(new_minuteIndexPrice[new_minuteIndexPrice.size()-2]<new_minuteIndexPrice[new_minuteIndexPrice.size()-3])
					&&(new_minuteIndexPrice[new_minuteIndexPrice.size()-3]<new_minuteIndexPrice[new_minuteIndexPrice.size()-4])
					//&&((new_minuteIndexPrice[new_minuteIndexPrice.size()-2]<=index_zhongxin_now-5&&jizhongdu_zhongxin>=0)||jizhongdu_zhongxin<0)
					&&
					(false||
					(gu_price.size()>0&&feng_price.size()>0&&new_minuteIndexPrice.back()-gu_price.back()<=-boduanfudu2&&new_minuteIndexPrice.back()-feng_price.back()<=-boduanfudu1)
					||(feng_price.size()>0&&gu_price.size()>0&&gu_indexcount.size()>0&&new_minuteIndexPrice.size()-gu_indexcount.back()>=12&&new_minuteIndexPrice.back()-feng_price.back()<=-boduanfudu1)
					)
					&&new_minuteIndexPrice.back()<indexprice_weizhi3
					)
				{
					isGu=true;
				}
			}

			//价格的峰
			now_is_fengC=false;
			if(isFeng==true&&new_minuteIndexPrice.size()>=2)  //找到一个峰，峰开始-1
			{
				int this_ding_time=t_ctrl;
				double this_ding_indexprice=new_minuteIndexPrice[new_minuteIndexPrice.size()-2];

				/////////////////////////////新增/////////////////////////////////////////////////////////
				//寻找本次尖峰时刻附近对应的盘面资金的最高值
				int back_num=0;
				if(new_minuteCapital.size()>3)
					back_num=3;
				else
					back_num=new_minuteCapital.size()-1;

				double max_cot=0.0;
				for (int k=0;k<=back_num;k++)
				{
					if(max_cot<new_minuteCapital[new_minuteCapital.size()-1-k])
					{
						max_cot=new_minuteCapital[new_minuteCapital.size()-1-k];
					}
				}
				feng_time.push_back(this_ding_time);
				feng_price.push_back(this_ding_indexprice);
				feng_cot.push_back(max_cot);//保存峰时间和资金区间最大值
				feng_indexcount.push_back(new_minuteIndexPrice.size());
				//保存顶txt
				if(days==1)
				{
					if(true)
					{
						if(hour_new_minuteIndexPrice.back()*3600+minute_new_minuteIndexPrice.back()*60+second_new_minuteIndexPrice.back()>43200)
							os_feng<<feng_time.back()-5400<<endl;
						else
							os_feng<<feng_time.back()<<endl;
						os_feng<<feng_price.back()<<endl;
						os_feng<<feng_cot.back()<<endl;
					}					
				}
				////////////////////////////以上新增///////////////////////////////////////////////////////////
				//新增找C点//////////////////////////////////

				
				if(feng_time.size()>=3)//去掉第一个峰，因为是起始点
				{
					//for (int ff=0;ff<gu_time.size();ff++)
					{
						//if(gu_time[ff]>feng_time[feng_time.size()-2]&&gu_time[ff]<feng_time.back())//两峰之间有谷
						{
							if (feng_price.back()>=feng_price[feng_price.size()-2])//后峰大于等于前锋,在上四分位
							{
								now_is_fengC=true;//是C点
							}
						}
					}
				}
				//以上，新增找C点//////////////////////////////////

				//顶的处理
				//if(this_ding_indexprice>=indexprice_weizhi1&&hour_new_minuteIndexPrice.back()>=10)//在上四分位 10点以后才找背离
				if(this_ding_indexprice>=indexprice_weizhi1||true)
				{
					if(this_ding_indexprice>pre_ding_indexprice+interval_chuyi10_price)  //本次是冲顶   
					{
						for (int k = 0; k < feng_time.size()-1; k++)
						{
							capital_beili_state=0;
							if(DingDiBeiLi_Capital.size()>0)
							{
								//capital_beili_state=DingDiBeiLi_Capital.back();//出现顶底背离信号就一直保持，直到出现下一个背离信号  去掉  20190521
							}
							if(this_ding_time-feng_time[k]>0)  //与紧挨着的前面一个顶比较。判断是否背离
							{
								if(feng_cot.back()<feng_cot[k]) //盘面资金不是顶
								{
									capital_beili_state=2;//顶背离
								}
							}
						}
					}
					else  //是峰但不是冲顶
					{
						//新来的峰和前面最近的一个具有可比性的顶作比较
						for (int k=0;k<feng_time.size();k++)
						{
							if(this_ding_time-feng_time[feng_time.size()-1-k]>0)
							{
								//如果指数新峰在被比较的老峰附近
								if((feng_price.back()>=feng_price[feng_time.size()-1-k]-interval_chuyi10_price)&&(feng_price.back()<=feng_price[feng_time.size()-1-k]+interval_chuyi10_price))
								{
									//盘面资金下降，视为ding背离
									if(feng_cot.back()<feng_cot[feng_time.size()-1-k]-interval_chuyi10_capital)
									{
										capital_beili_state=1;//普通顶背离											
									}
									break;//周老师策略增加
								}
								//如果指数新峰高于被比较的老峰
								if(feng_price.back()>feng_price[feng_time.size()-1-k]+interval_chuyi10_price)
								{
									//盘面资金不高于之前的盘面资金，视为背离
									if(feng_cot.back()<=feng_cot[feng_time.size()-1-k])
									{
										capital_beili_state=1;//普通顶背离											
									}
									break;//周老师策略增加
								}
							}
						}
					}
				}
				if(this_ding_indexprice>=pre_ding_indexprice)  //更新最大的顶值
				{  
					pre_ding_indexprice=this_ding_indexprice;//更新原来保存的顶。为了更容易出现冲顶，把之前的顶向下降低一点
				}
				///////////////////////////////以上，顶的处理////////////////////////////////////////////////////////////////
			}
			//价格的谷
			now_is_guC=false;
			if(isGu==true&&new_minuteIndexPrice.size()>=2)  //找到一个谷，谷开始1
			{
				int this_di_time=t_ctrl;
				double this_di_indexprice=new_minuteIndexPrice[new_minuteIndexPrice.size()-2];

				/////////////////////////////新增/////////////////////////////////////////////////////////
				//寻找本次谷底时刻附近对应的盘面资金的最低值（向前找3分钟），盘面资金一分钟来一个数
				int back_num=0;
				if(new_minuteCapital.size()>3)
				{
					back_num=3;
				}
				else
					back_num=new_minuteCapital.size()-1;

				double min_cot=1e20;
				for (int k=0;k<=back_num;k++)
				{
					if(min_cot>new_minuteCapital[new_minuteCapital.size()-1-k])
					{
						min_cot=new_minuteCapital[new_minuteCapital.size()-1-k];
					}
				}
				gu_time.push_back(this_di_time);
				gu_price.push_back(this_di_indexprice);
				gu_cot.push_back(min_cot);//保存谷时间和资金区间最小值
				gu_indexcount.push_back(new_minuteIndexPrice.size());
				//保存txt
				if(days==1)
				{
					if(hour_new_minuteIndexPrice.back()*3600+minute_new_minuteIndexPrice.back()*60+second_new_minuteIndexPrice.back()>43200)
						os_gu<<gu_time.back()-5400<<endl;
					else
						os_gu<<gu_time.back()<<endl;
					os_gu<<gu_price.back()<<endl;
					os_gu<<gu_cot.back()<<endl;					
				}

				////////////////////////////以上新增///////////////////////////////////////////////////////////
				//新增找C点//////////////////////////////////				
				if(gu_time.size()>=3)//去掉第一个谷，因为是起始点
				{
					//for (int ff=0;ff<gu_time.size();ff++)
					{
						//if(feng_time[ff]>gu_time[gu_time.size()-2]&&feng_time[ff]<gu_time.back())//两谷之间有峰
						{
							if (gu_price.back()<=gu_price[gu_price.size()-2])//后谷小于等于前谷
							{
								now_is_guC=true;//是C点
							}
						}
					}
				}
				//以上，新增找C点//////////////////////////////////
				//底的处理
				//if(this_di_indexprice<=indexprice_weizhi3&&hour_new_minuteIndexPrice.back()>=10)//在下四分位  10点之后才找背离
				if(this_di_indexprice<=indexprice_weizhi3||true)
				{
					if(this_di_indexprice<=pre_di_price-interval_chuyi10_price)  //本次是脱底
					{
						for (int k = 0; k < gu_time.size()-1; k++)
						{
							capital_beili_state=0;
							if(DingDiBeiLi_Capital.size()>0)
							{
								//capital_beili_state=DingDiBeiLi_Capital.back();//出现顶底背离信号就一直保持，直到出现下一个背离信号  去掉20190521
							}
							if(this_di_time-gu_time[k]>0)  //回看之前一小时的所有小区间的盘面资金。判断是否背离
							{
								if(gu_cot.back()>gu_cot[k]) //盘面资金不是底
								{
									capital_beili_state=-2;//底背离。冲顶和脱底的用2表示，普通的背离用1表示
								}
							}
						}
					}
					else//是底，但不是脱底
					{
						//新来的谷和之前一个小时之内的谷作比较
						for (int k=0;k<gu_time.size();k++)
						{
							if(this_di_time-gu_time[gu_time.size()-1-k]>0)
							{
								//如果指数新谷在被比较的老谷附近
								if((gu_price.back()>=gu_price[gu_time.size()-1-k]-interval_chuyi10_price)&&(gu_price.back()<=gu_price[gu_time.size()-1-k]+interval_chuyi10_price))
								{
									//盘面资金上升，视为di背离
									if(gu_cot.back()>gu_cot[gu_time.size()-1-k]+interval_chuyi10_capital)
									{
										capital_beili_state=-1;//普通底背离
									}
									break;//周老师策略增加
								}
								//如果指数新谷低于被比较的老谷
								if(gu_price.back()<gu_price[gu_time.size()-1-k]-interval_chuyi10_price)
								{
									//盘面资金不低于之前的盘面资金，视为背离
									if(gu_cot.back()>=gu_cot[gu_time.size()-1-k])
									{
										capital_beili_state=-1;//普通底背离	
									}
									break;//周老师策略增加
								}
							}
						}
					}
				}
				if(this_di_indexprice<=pre_di_price)  //更新最谷值
				{
					pre_di_price=this_di_indexprice+0.0;//更新原来保存的底。为了使脱底更容易出来，把之前的每个底用完之后都向上提一点,不提了
				}
			}
			DingDiBeiLi_Capital.push_back(capital_beili_state);//保存盘面资金顶底背离

			//背离信号处理成延长的指标
			if(capital_beili_state>0)
			{
				now_is_beili=capital_beili_state;
				count_dingbeili=count_dingbeili+1;
				indexPrice_when_beili=new_minuteIndexPrice.back();
				time_when_beili=new_minuteIndexPrice.size();
			}
			if(now_is_beili>0
				&&
				(
				((new_minuteIndexPrice.back()-indexPrice_when_beili)/indexPrice_when_beili<-0.005)				
				||
				(new_minuteIndexPrice.back()<ave_price.back())
				||
				(new_minuteIndexPrice.size()-time_when_beili>30)
				)
				)
			{
				now_is_beili=0;
			}
			if(capital_beili_state<0)
			{
				now_is_beili=capital_beili_state;
				count_dibeili=count_dibeili+1;
				indexPrice_when_beili=new_minuteIndexPrice.back();
				time_when_beili=new_minuteIndexPrice.size();
			}
			if(now_is_beili<0
				&&
				(
				((new_minuteIndexPrice.back()-indexPrice_when_beili)/indexPrice_when_beili>0.005)				
				||
				(new_minuteIndexPrice.back()>ave_price.back())
				||
				(new_minuteIndexPrice.size()-time_when_beili>30)
				)
				)
			{
				now_is_beili=0;
			}

			//保存txt
			if(days==1)
			{
				//画图
				if(hour_new_minuteIndexPrice.back()*3600+minute_new_minuteIndexPrice.back()*60+second_new_minuteIndexPrice.back()>43200)
					os_minuteIndexprice_huatu<<t_ctrl-5400<<endl;                         //时间
				else
					os_minuteIndexprice_huatu<<t_ctrl<<endl;                         //时间
				os_minuteIndexprice_huatu<<new_minuteIndexPrice.back()<<endl;    //价格
				os_minuteIndexprice_huatu<<ave_price.back()<<endl;               //均价
				os_minuteIndexprice_huatu<<HuanPingGou_minutePrice.back()<<endl; //缓平勾
				os_minuteIndexprice_huatu<<vec_IndexPrice_zhangfu.back()<<endl;  //涨跌幅
				os_minuteIndexprice_huatu<<DingDiBeiLi_Capital.back()<<endl;     //资金背离
				os_minuteIndexprice_huatu<<indexprice_weizhi1<<endl;
				os_minuteIndexprice_huatu<<indexprice_weizhi2<<endl;
				os_minuteIndexprice_huatu<<indexprice_weizhi3<<endl;
				os_minuteIndexprice_huatu<<mean_indexprice_last40<<endl;
				os_minuteIndexprice_huatu<<std_indexprice_last40<<endl;
				os_minuteIndexprice_huatu<<index_zhongxin_now<<endl;
				os_minuteIndexprice_huatu<<S_shang_10s<<endl;
				os_minuteIndexprice_huatu<<S_xia_10s<<endl;
				os_minuteIndexprice_huatu<<donglixian_min_i_10s<<endl;
				os_minuteIndexprice_huatu<<donglixian_max_i_10s<<endl;
				os_minuteIndexprice_huatu<<fenge_num2_10s<<endl;
				os_minuteIndexprice_huatu<<now_is_beili<<endl;//加5个
				os_minuteIndexprice_huatu<<count_dingbeili<<endl;
				os_minuteIndexprice_huatu<<count_dibeili<<endl;
				os_minuteIndexprice_huatu<<0<<endl;
				os_minuteIndexprice_huatu<<0<<endl;
				//检查
				os_minuteIndexprice_check<<hour_new_minuteIndexPrice.back()<<":"
					<<minute_new_minuteIndexPrice.back()<<":"<<second_new_minuteIndexPrice.back()<<"    "
					<<new_minuteIndexPrice.back()<<endl;
			}
			///////////////////////////////////////////以上是用峰谷找背离//////////////////////////////////////
		}
		//以上，价格的分钟处理///////////////////////////////////////////////////////////////////////////////////////////////////

		pre_pre_indexPrice=pre_indexPrice;//保存本次指数价格，用于反回来取分钟数据
		pre_minute_indexprice_kaipinghandle=minute_indexprice_kaipinghandle;
	}
	//以上，指数形态/////////////////////////////////////////////////////////
#pragma endregion Index_Price

#pragma region Index_chengjiao_e_liang
	if((this_chengjiaoe!=0&&runMode==2)||(runMode==1&&whichzhibiaolai==4))
	{
		if(runMode==2)
		{
			t_ctrl=int(new_14400_ELiangTimeflag[h]);
			pt_ctrl=gmtime(&t_ctrl);
		}
		if(runMode==1)
		{
			t_ctrl=t_real;
			pt_ctrl=gmtime(&t_ctrl);
		}
		int eliang_hour=int(pt_ctrl->tm_hour+8);
		int eliang_minute=int(pt_ctrl->tm_min);
		int eliang_second=int(pt_ctrl->tm_sec);

		if(eliang_minute!=pre_minute_chengjiaoe_kaipinghandle&&pre_minute_chengjiaoe_kaipinghandle!=-1)
		{
			time_indexChengjiaoe.push_back(t_ctrl);
			//new_minuteE.push_back(pre_pre_chengjiaoe);
			//new_minuteLiang.push_back(pre_pre_chengjiaoliang);
			new_minuteE.push_back(pre_chengjiaoe);
			new_minuteLiang.push_back(pre_chengjiaoliang);

			//保存txt
			if(days==1)
			{
				//画图
				if(eliang_hour*3600+eliang_minute*60+eliang_second>43200)
					os_new_minuteELiang_huatu<<t_ctrl-5400<<endl;
				else
					os_new_minuteELiang_huatu<<t_ctrl<<endl;
				os_new_minuteELiang_huatu<<new_minuteE.back()<<endl;
				os_new_minuteELiang_huatu<<new_minuteLiang.back()<<endl;
				//检查
				os_new_minuteELiang_check<<eliang_hour<<":"<<eliang_minute<<":"<<eliang_second<<"    "<<new_minuteE.back()<<"    "<<new_minuteLiang.back()<<endl;
			}
			chengjiaoe_lai=true;
		}
		pre_minute_chengjiaoe_kaipinghandle=eliang_minute;
		//pre_pre_chengjiaoe=pre_chengjiaoe;
		//pre_pre_chengjiaoliang=pre_chengjiaoliang;
	}
#pragma endregion Index_chengjiao_e_liang	

#pragma region Index_donglixian

	if((this_donglixian!=0&&runMode==2)||(runMode==1&&whichzhibiaolai==5))
	{
		if(runMode==2)
		{
			t_ctrl=int(new_14400_indexdonglixianTimeflag[h]);
			pt_ctrl=gmtime(&t_ctrl);
		}
		if(runMode==1)
		{
			t_ctrl=t_real;
			pt_ctrl=gmtime(&t_ctrl);
		}

		pre_hour_indexDonglixian_kaipinghandle=hour_indexDonglixian_kaipinghandle;
		pre_minute_indexDonglixian_kaipinghandle=minute_indexDonglixian_kaipinghandle;
		pre_second_indexDonglixian_kaipinghandle=second_indexDonglixian_kaipinghandle;

		hour_indexDonglixian_kaipinghandle=int(pt_ctrl->tm_hour+8);
		minute_indexDonglixian_kaipinghandle=int(pt_ctrl->tm_min);
		second_indexDonglixian_kaipinghandle=int(pt_ctrl->tm_sec);

		//10s划窗
		if(true && pre_Heyueprice>0)
		{			
			int chuangkou=2400;		
			vector<int> period_time_new;//本次使用的vector   防止干扰，改为局部
			vector<double> period_donglixian_new;
			vector<double> period_ifprice_new;
			vector<int> period_hour_new;
			vector<int> period_minute_new;
			vector<int> period_second_new;
			if(hour_indexDonglixian_kaipinghandle*3600+minute_indexDonglixian_kaipinghandle*60<=34800)//9:40之前，准备数据
			{
				period_time_10s.push_back(t_ctrl);//上次的vector
				period_donglixian_10s.push_back(pre_donglixian);
				period_ifprice_10s.push_back(pre_Heyueprice);

				period_hour_10s.push_back(hour_indexDonglixian_kaipinghandle);
				period_minute_10s.push_back(minute_indexDonglixian_kaipinghandle);
				period_second_10s.push_back(second_indexDonglixian_kaipinghandle);
			}
			if(hour_indexDonglixian_kaipinghandle*3600+minute_indexDonglixian_kaipinghandle*60>34800)//9:40之后
			{
				if(hour_indexDonglixian_kaipinghandle*3600+minute_indexDonglixian_kaipinghandle*60>43200
					&&hour_indexDonglixian_kaipinghandle*3600+minute_indexDonglixian_kaipinghandle*60<49200)//12:00-13:40
				{
					chuangkou=7800;
				}
				for (int i=0;i<period_time_10s.size();i++)
				{
					if(t_ctrl-period_time_10s[i]<=chuangkou)//保留上次vector中仍然在最新4分钟窗口内的
					{
						period_time_new.push_back(period_time_10s[i]);//本次使用的vector
						period_donglixian_new.push_back(period_donglixian_10s[i]);     //已对照
						period_ifprice_new.push_back(period_ifprice_10s[i]);//已对照    AAA实盘问题  这几个vector长度都不一样
						period_hour_new.push_back(period_hour_10s[i]);//已对照
						period_minute_new.push_back(period_minute_10s[i]);//已对照
						period_second_new.push_back(period_second_10s[i]);//已对照
					}
				}			
				period_time_new.push_back(t_ctrl);//再补上最新的这个值   163个数
				period_donglixian_new.push_back(pre_donglixian);
				period_ifprice_new.push_back(pre_Heyueprice);
				period_hour_new.push_back(hour_indexDonglixian_kaipinghandle);
				period_minute_new.push_back(minute_indexDonglixian_kaipinghandle);
				period_second_new.push_back(second_indexDonglixian_kaipinghandle);

				//IF合约窗口
				max_if_10s=-1e15;
				min_if_10s=1e15;
				double sum_if_10s=0.0;
				double sum_if2_10s=0.0;
				mean_if_10s=0.0;
				std_if_10s=0.0;
				for (int i=0;i<period_ifprice_new.size();i++)
				{
					if (period_ifprice_new[i]>max_if_10s)
					{
						max_if_10s=period_ifprice_new[i];
					}
					if (period_ifprice_new[i]<min_if_10s)
					{
						min_if_10s=period_ifprice_new[i];
					}
					sum_if_10s=sum_if_10s+period_ifprice_new[i];
				}
				mean_if_10s=sum_if_10s/period_ifprice_new.size();
				for (int i=0;i<period_ifprice_new.size();i++)
				{
					sum_if2_10s=sum_if2_10s+(period_ifprice_new[i]-mean_if_10s)*(period_ifprice_new[i]-mean_if_10s);
				}
				std_if_10s=sqrt(sum_if2_10s/period_ifprice_new.size());

				if(max_if_10s<-100000||min_if_10s>100000)
				{
					return;
				}
				if_3_4_10s=min_if_10s+3*(max_if_10s-min_if_10s)/4;
				if_2_4_10s=min_if_10s+2*(max_if_10s-min_if_10s)/4;
				if_1_4_10s=min_if_10s+1*(max_if_10s-min_if_10s)/4;
				if(days==1)
				{
					os_baofa_if<<pre_Heyueprice<<endl;
					os_baofa_if<<max_if_10s<<endl;
					os_baofa_if<<if_3_4_10s<<endl;
					os_baofa_if<<if_1_4_10s<<endl;
					os_baofa_if<<min_if_10s<<endl;
					os_baofa_if<<mean_if_10s<<endl;
					os_baofa_if<<std_if_10s<<endl;
					os_baofa_if<<period_time_new.size()<<endl;
				}		

				//C_DLX模式动力线窗口
				double max_indexdonglixian=-1e15;
				double min_indexdonglixian=1e15;
				donglixian_max_i_10s=0;
				donglixian_min_i_10s=0;
				for (int i=0;i<period_donglixian_new.size();i++)//找窗口内期货动力线最大最小值
				{
					if(period_donglixian_new[i]>max_indexdonglixian)
					{
						max_indexdonglixian=period_donglixian_new[i];//
						donglixian_max_i_10s=i;
					}
					if(period_donglixian_new[i]<min_indexdonglixian)
					{
						min_indexdonglixian=period_donglixian_new[i];
						donglixian_min_i_10s=i;
					}
				}

				fenge_num1_10s=period_donglixian_new.size()/3;//
				fenge_num2_10s=15*period_donglixian_new.size()/16;//
				fenge_num3_10s=7*period_donglixian_new.size()/12;//
				fenge_num4_10s=1*period_donglixian_new.size()/4;//

				//逆趋势多			

				DLX_S1_S2_GT6_10s=false;//动力线最后1/16的上面积是下面积的6倍以上 maxDLX为上边，minDLX为下边，DLX为分割线，//S1上面积  S2下面积
				DLX_S2_S1_GT6_10s=false;
				double maxDLX_hou_1_16=-1e15;
				double minDLX_hou_1_16=1e15;
				S_shang_10s=0;
				S_xia_10s=0;
				for (int i=0;i<period_donglixian_new.size();i++)
				{
					if(i>fenge_num2_10s)//右1/16区
					{
						//新走平，面积比
						if(period_donglixian_new[i]>maxDLX_hou_1_16)
							maxDLX_hou_1_16=period_donglixian_new[i];
						if(period_donglixian_new[i]<minDLX_hou_1_16)
							minDLX_hou_1_16=period_donglixian_new[i];
					}				
				}
				//计算上下面积
				for (int i=0;i<period_donglixian_new.size();i++)
				{
					if(i>fenge_num2_10s)//右1/16区
					{
						//新走平，面积比
						if(period_donglixian_new[i]>maxDLX_hou_1_16)
							maxDLX_hou_1_16=period_donglixian_new[i];
						if(period_donglixian_new[i]<minDLX_hou_1_16)
							minDLX_hou_1_16=period_donglixian_new[i];
						S_shang_10s=S_shang_10s+(maxDLX_hou_1_16-period_donglixian_new[i]);
						S_xia_10s=S_xia_10s+(period_donglixian_new[i]-minDLX_hou_1_16);
					}
				}
				if(S_shang_10s/(S_xia_10s+0.01)>=1.5)
				{
					DLX_S1_S2_GT6_10s=true;
				}
				if(S_xia_10s/(S_shang_10s+0.01)>=1.5)
				{
					DLX_S2_S1_GT6_10s=true;
				}
				int temp1=0;			
				if(xunfeng_dlx_zouping_10s.size()>0&&xunfeng_dlx_zouping_10s.back()!=0)
					start_size_10s=xunfeng_dlx_zouping_10s.size();
				if(DLX_S1_S2_GT6_10s&&donglixian_min_i_10s>fenge_num2_10s&&xunfeng_dlx_zouping_10s.size()-start_size_10s>80)
				{
					temp1=-1;//底
					xunfeng_dlx_zouping_use_10s.push_back(temp1);
					xunfeng_indexprice_use_10s.push_back(pre_indexPrice);
					xunfeng_dlx_zouping_use_di_10s.push_back(temp1);
				}
				if(DLX_S2_S1_GT6_10s&&donglixian_max_i_10s>fenge_num2_10s&&xunfeng_dlx_zouping_10s.size()-start_size_10s>80)
				{
					temp1=1;//顶
					xunfeng_dlx_zouping_use_10s.push_back(temp1);
					xunfeng_indexprice_use_10s.push_back(pre_indexPrice);
					xunfeng_dlx_zouping_use_ding_10s.push_back(temp1);
				}
				xunfeng_dlx_zouping_10s.push_back(temp1);
				//找到顶  做顶部区域
				if(true)
				{
					//if(temp1==1)//顶
					if(xunfeng_dlx_zouping_use_10s.size()>=3
						&&xunfeng_dlx_zouping_use_10s[xunfeng_dlx_zouping_use_10s.size()-3]==1
						&&xunfeng_dlx_zouping_use_10s[xunfeng_dlx_zouping_use_10s.size()-2]==1
						&&xunfeng_dlx_zouping_use_10s.back()==1
						&&xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-2]>=xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-3]
						&&xunfeng_indexprice_use_10s.back()>=xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-2]
						)
					{
						now_is_dingbu_dibu=1;//1顶部  2 底部
						indexprice_dingdibu=new_minuteIndexPrice.back();
						start_time_dingdibu=new_minuteIndexPrice.size();
					}
					if (
						now_is_dingbu_dibu==1
						&&
						(
						(daoxiang_10s_IF==1||daoxiang_keep_10s==1)
						||
						((new_minuteIndexPrice.back()-indexprice_dingdibu)/indexprice_dingdibu<0.003)
						||
						(new_minuteIndexPrice.size()-start_time_dingdibu>40)
						)
						)
					{
						now_is_dingbu_dibu=0;
					}
					//if(temp1==-1)//底
					if(xunfeng_dlx_zouping_use_10s.size()>=3
						&&xunfeng_dlx_zouping_use_10s[xunfeng_dlx_zouping_use_10s.size()-3]==-1
						&&xunfeng_dlx_zouping_use_10s[xunfeng_dlx_zouping_use_10s.size()-2]==-1
						&&xunfeng_dlx_zouping_use_10s.back()==-1
						&&xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-2]<=xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-3]
						&&xunfeng_indexprice_use_10s.back()<=xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-2]
						)
					{
						now_is_dingbu_dibu=-1;//1顶部  2 底部
						indexprice_dingdibu=new_minuteIndexPrice.back();
						start_time_dingdibu=new_minuteIndexPrice.size();
					}
					if (
						now_is_dingbu_dibu==-1
						&&
						(
						(daoxiang_10s_IF==-1||daoxiang_keep_10s==-1)
						||
						((new_minuteIndexPrice.back()-indexprice_dingdibu)/indexprice_dingdibu>0.003)
						||
						(new_minuteIndexPrice.size()-start_time_dingdibu>40)
						)
						)
					{
						now_is_dingbu_dibu=0;
					}
				}

				period_time_10s=period_time_new;
				period_donglixian_10s=period_donglixian_new;
				period_ifprice_10s=period_ifprice_new;
				period_hour_10s=period_hour_new;
				period_minute_10s=period_minute_new;
				period_second_10s=period_second_new;
			}
			if(xunfeng_dlx_zouping_use_ding_10s.size()-maodunshi_ding_count>0||xunfeng_dlx_zouping_use_di_10s.size()-maodunshi_di_count>0)
			{
				fangxiangmaodun=false;
			}
			if(days==1&&pre_indexPrice>0&&xunfeng_dlx_zouping_10s.size()>0)
			{
				os_donglixiandingdi_10s<<pre_donglixian<<endl;
				os_donglixiandingdi_10s<<S_shang_10s<<endl;
				os_donglixiandingdi_10s<<S_xia_10s<<endl;
				os_donglixiandingdi_10s<<donglixian_min_i_10s<<endl;
				os_donglixiandingdi_10s<<donglixian_max_i_10s<<endl;
				os_donglixiandingdi_10s<<fenge_num2_10s<<endl;
				os_donglixiandingdi_10s<<pre_indexPrice<<endl;
				os_donglixiandingdi_10s<<xunfeng_dlx_zouping_10s.back()<<endl;
			}
		}
		//5s划窗
		if(false && pre_Heyueprice>0)
		{			
			int chuangkou=240;		
			vector<int> period_time_new;//本次使用的vector   防止干扰，改为局部
			vector<double> period_donglixian_new;
			vector<double> period_ifprice_new;
			vector<int> period_hour_new;
			vector<int> period_minute_new;
			vector<int> period_second_new;
			if(hour_indexDonglixian_kaipinghandle*3600+minute_indexDonglixian_kaipinghandle*60<=34800)//9:40之前，准备数据
			{
				period_time_5s.push_back(t_ctrl);//上次的vector
				period_donglixian_5s.push_back(pre_donglixian);
				period_ifprice_5s.push_back(pre_Heyueprice);

				period_hour_5s.push_back(hour_indexDonglixian_kaipinghandle);
				period_minute_5s.push_back(minute_indexDonglixian_kaipinghandle);
				period_second_5s.push_back(second_indexDonglixian_kaipinghandle);
			}
			if(hour_indexDonglixian_kaipinghandle*3600+minute_indexDonglixian_kaipinghandle*60>34800)//9:40之后
			{
				if(hour_indexDonglixian_kaipinghandle*3600+minute_indexDonglixian_kaipinghandle*60>43200
					&&hour_indexDonglixian_kaipinghandle*3600+minute_indexDonglixian_kaipinghandle*60<49200)//12:00-13:40
				{
					chuangkou=5400+1200;
				}
				for (int i=0;i<period_time_5s.size();i++)
				{
					if(t_ctrl-period_time_5s[i]<=chuangkou)//保留上次vector中仍然在最新4分钟窗口内的
					{
						period_time_new.push_back(period_time_5s[i]);//本次使用的vector
						period_donglixian_new.push_back(period_donglixian_5s[i]);     //已对照
						period_ifprice_new.push_back(period_ifprice_5s[i]);//已对照    AAA实盘问题  这几个vector长度都不一样
						period_hour_new.push_back(period_hour_5s[i]);//已对照
						period_minute_new.push_back(period_minute_5s[i]);//已对照
						period_second_new.push_back(period_second_5s[i]);//已对照
					}
				}			
				period_time_new.push_back(t_ctrl);//再补上最新的这个值   163个数
				period_donglixian_new.push_back(pre_donglixian);
				period_ifprice_new.push_back(pre_Heyueprice);
				period_hour_new.push_back(hour_indexDonglixian_kaipinghandle);
				period_minute_new.push_back(minute_indexDonglixian_kaipinghandle);
				period_second_new.push_back(second_indexDonglixian_kaipinghandle);

				//IF合约窗口
				max_if_5s=-1e15;
				min_if_5s=1e15;
				double sum_if_5s=0.0;
				double sum_if2_5s=0.0;
				mean_if_5s=0.0;
				std_if_5s=0.0;
				for (int i=0;i<period_ifprice_new.size();i++)
				{
					if (period_ifprice_new[i]>max_if_5s)
					{
						max_if_5s=period_ifprice_new[i];
					}
					if (period_ifprice_new[i]<min_if_5s)
					{
						min_if_5s=period_ifprice_new[i];
					}
					sum_if_5s=sum_if_5s+period_ifprice_new[i];
				}
				mean_if_5s=sum_if_5s/period_ifprice_new.size();
				for (int i=0;i<period_ifprice_new.size();i++)
				{
					sum_if2_5s=sum_if2_5s+(period_ifprice_new[i]-mean_if_5s)*(period_ifprice_new[i]-mean_if_5s);
				}
				std_if_5s=sqrt(sum_if2_5s/period_ifprice_new.size());

				if_3_4_5s=min_if_5s+3*(max_if_5s-min_if_5s)/4;
				if_1_4_5s=min_if_5s+1*(max_if_5s-min_if_5s)/4;
				if(false && days==1)
				{
					os_baofa_if<<pre_Heyueprice<<endl;
					os_baofa_if<<max_if_5s<<endl;
					os_baofa_if<<if_3_4_5s<<endl;
					os_baofa_if<<if_1_4_5s<<endl;
					os_baofa_if<<min_if_5s<<endl;
					os_baofa_if<<mean_if_5s<<endl;
					os_baofa_if<<std_if_5s<<endl;
					os_baofa_if<<0<<endl;
				}		

				//C_DLX模式动力线窗口
				double max_indexdonglixian=-1e15;
				double min_indexdonglixian=1e15;
				donglixian_max_i_5s=0;
				donglixian_min_i_5s=0;
				for (int i=0;i<period_donglixian_new.size();i++)//找窗口内期货动力线最大最小值
				{
					if(period_donglixian_new[i]>max_indexdonglixian)
					{
						max_indexdonglixian=period_donglixian_new[i];//
						donglixian_max_i_5s=i;
					}
					if(period_donglixian_new[i]<min_indexdonglixian)
					{
						min_indexdonglixian=period_donglixian_new[i];
						donglixian_min_i_5s=i;
					}
				}

				fenge_num1_5s=period_donglixian_new.size()/3;//
				fenge_num2_5s=15*period_donglixian_new.size()/16;//
				fenge_num3_5s=7*period_donglixian_new.size()/12;//
				fenge_num4_5s=1*period_donglixian_new.size()/4;//

				//逆趋势多			

				DLX_S1_S2_GT6_5s=false;//动力线最后1/16的上面积是下面积的6倍以上 maxDLX为上边，minDLX为下边，DLX为分割线，//S1上面积  S2下面积
				DLX_S2_S1_GT6_5s=false;
				double maxDLX_hou_1_16=-1e15;
				double minDLX_hou_1_16=1e15;
				S_shang_5s=0;
				S_xia_5s=0;
				for (int i=0;i<period_donglixian_new.size();i++)
				{
					if(i>fenge_num2_5s)//右1/16区
					{
						//新走平，面积比
						if(period_donglixian_new[i]>maxDLX_hou_1_16)
							maxDLX_hou_1_16=period_donglixian_new[i];
						if(period_donglixian_new[i]<minDLX_hou_1_16)
							minDLX_hou_1_16=period_donglixian_new[i];
					}				
				}
				//计算上下面积
				for (int i=0;i<period_donglixian_new.size();i++)
				{
					if(i>fenge_num2_5s)//右1/16区
					{
						//新走平，面积比
						if(period_donglixian_new[i]>maxDLX_hou_1_16)
							maxDLX_hou_1_16=period_donglixian_new[i];
						if(period_donglixian_new[i]<minDLX_hou_1_16)
							minDLX_hou_1_16=period_donglixian_new[i];
						S_shang_5s=S_shang_5s+(maxDLX_hou_1_16-period_donglixian_new[i]);
						S_xia_5s=S_xia_5s+(period_donglixian_new[i]-minDLX_hou_1_16);
					}
				}
				if(S_shang_5s/(S_xia_5s+0.01)>=1.5)
				{
					DLX_S1_S2_GT6_5s=true;
				}
				if(S_xia_5s/(S_shang_5s+0.01)>=1.5)
				{
					DLX_S2_S1_GT6_5s=true;
				}
				int temp1=0;			
				if(xunfeng_dlx_zouping_5s.size()>0&&xunfeng_dlx_zouping_5s.back()!=0)
					start_size_5s=xunfeng_dlx_zouping_5s.size();
				if(DLX_S1_S2_GT6_5s&&donglixian_min_i_5s>fenge_num2_5s&&xunfeng_dlx_zouping_5s.size()-start_size_5s>40)
				{
					temp1=-1;//底
					xunfeng_dlx_zouping_use_5s.push_back(temp1);
					xunfeng_indexprice_use_5s.push_back(pre_indexPrice);
					xunfeng_dlx_zouping_use_di_5s.push_back(temp1);
				}
				if(DLX_S2_S1_GT6_5s&&donglixian_max_i_5s>fenge_num2_5s&&xunfeng_dlx_zouping_5s.size()-start_size_5s>40)
				{
					temp1=1;//顶
					xunfeng_dlx_zouping_use_5s.push_back(temp1);
					xunfeng_indexprice_use_5s.push_back(pre_indexPrice);
					xunfeng_dlx_zouping_use_ding_5s.push_back(temp1);
				}
				xunfeng_dlx_zouping_5s.push_back(temp1);

				//找到顶  做顶部区域
				if(true)
				{
					//if(temp1==1)//顶
					if(xunfeng_dlx_zouping_use_5s.size()>=3
						&&xunfeng_dlx_zouping_use_5s[xunfeng_dlx_zouping_use_5s.size()-3]==1
						&&xunfeng_dlx_zouping_use_5s[xunfeng_dlx_zouping_use_5s.size()-2]==1
						&&xunfeng_dlx_zouping_use_5s.back()==1
						&&xunfeng_dlx_zouping_use_5s[xunfeng_dlx_zouping_use_5s.size()-2]>=xunfeng_dlx_zouping_use_5s[xunfeng_dlx_zouping_use_5s.size()-3]
					&&xunfeng_dlx_zouping_use_5s.back()>=xunfeng_dlx_zouping_use_5s[xunfeng_dlx_zouping_use_5s.size()-2]
					)
					{
						now_is_dingbu_dibu=1;//1顶部  2 底部
						indexprice_dingdibu=new_minuteIndexPrice.back();
						start_time_dingdibu=new_minuteIndexPrice.size();
					}
					if (
						now_is_dingbu_dibu==1
						&&
						(
						(daoxiang_10s_IF==1||daoxiang_keep_10s==1)
						||
						((new_minuteIndexPrice.back()-indexprice_dingdibu)/indexprice_dingdibu<0.003)
						||
						(new_minuteIndexPrice.size()-start_time_dingdibu>40)
						)
						)
					{
						now_is_dingbu_dibu=0;
					}
					//if(temp1==-1)//底
					if(xunfeng_dlx_zouping_use_5s.size()>=3
						&&xunfeng_dlx_zouping_use_5s[xunfeng_dlx_zouping_use_5s.size()-3]==-1
						&&xunfeng_dlx_zouping_use_5s[xunfeng_dlx_zouping_use_5s.size()-2]==-1
						&&xunfeng_dlx_zouping_use_5s.back()==-1
						&&xunfeng_dlx_zouping_use_5s[xunfeng_dlx_zouping_use_5s.size()-2]<=xunfeng_dlx_zouping_use_5s[xunfeng_dlx_zouping_use_5s.size()-3]
					&&xunfeng_dlx_zouping_use_5s.back()<=xunfeng_dlx_zouping_use_5s[xunfeng_dlx_zouping_use_5s.size()-2]
					)
					{
						now_is_dingbu_dibu=-1;//1顶部  2 底部
						indexprice_dingdibu=new_minuteIndexPrice.back();
						start_time_dingdibu=new_minuteIndexPrice.size();
					}
					if (
						now_is_dingbu_dibu==-1
						&&
						(
						(daoxiang_10s_IF==-1||daoxiang_keep_10s==-1)
						||
						((new_minuteIndexPrice.back()-indexprice_dingdibu)/indexprice_dingdibu>0.003)
						||
						(new_minuteIndexPrice.size()-start_time_dingdibu>40)
						)
						)
					{
						now_is_dingbu_dibu=0;
					}
				}

				period_time_5s=period_time_new;
				period_donglixian_5s=period_donglixian_new;
				period_ifprice_5s=period_ifprice_new;
				period_hour_5s=period_hour_new;
				period_minute_5s=period_minute_new;
				period_second_5s=period_second_new;
			}
			if(days==1&&pre_indexPrice>0&&xunfeng_dlx_zouping_5s.size()>0)
			{
				os_donglixiandingdi_5s<<pre_donglixian<<endl;
				os_donglixiandingdi_5s<<S_shang_5s<<endl;
				os_donglixiandingdi_5s<<S_xia_5s<<endl;
				os_donglixiandingdi_5s<<donglixian_min_i_5s<<endl;
				os_donglixiandingdi_5s<<donglixian_max_i_5s<<endl;
				os_donglixiandingdi_5s<<fenge_num2_5s<<endl;
				os_donglixiandingdi_5s<<pre_indexPrice<<endl;
				os_donglixiandingdi_5s<<xunfeng_dlx_zouping_5s.back()<<endl;
			}
		}
		
	}
	//陈老师1s图动力线模式，以上---------------------------------------------
#pragma endregion Index_donglixian

	//以上，各个指数处理各个指数的，共同使用公用变量，处理的结果放在各自的变量中。
	//下面的开平仓判断，则需要细分到使用的各自的变量，不再使用公用变量。
#pragma region kaiping_panduan

	//开平仓判断
	open_state_JuJi_IF=0;
	//----------------------------------------------------------------------------------------------------------------------------------
	
	if(ZLDJ_lai&&capital_lai&&pingfen_lai&&minutePrice_lai&&chengjiaoe_lai&&weimai_lai&&Heyueprice_lai&&DLDJ_lai&&WBDJ_lai&&max_10s_heyueprice!=-1e15 && min_10s_heyueprice !=1e15 && max_IFprice_10s_hou_1_6!=-1e15 && min_IFprice_10s_hou_1_6!=1e15)//上证指数来
	{
		if(
			this_Heyueprice!=0
			||((this_ZLDJe!=0&&e_time-neiwaie_time>=0&&e_time-neiwaie_time<15)||(this_dawaiE!=0&&neiwaie_time-e_time>=0&&neiwaie_time-e_time<15))
			||this_capital!=0
			||this_zhulipingfen!=-5
			||this_indexPrice!=0
			||this_chengjiaoe!=0
			||runMode==1
			)
		{
			xunhuancishu = xunhuancishu + 1;
			//cout<<"judge_xunhuancishu:"<<xunhuancishu<<endl;
			runTimes=runTimes+1;
			kaiduo_keep=false;
			kaikong_keep=false;
			pingduo_keep=false;
			pingkong_keep=false;

			//1.计算指数评分。上证指数主力评分+中证500支撑评分+中证500抛压评分
			zhangfu_pingfen_fu1 = 0.0;
			if((yesterday_shoupanjia_indexPrice-maxPrice_fu1)/maxPrice_fu1 <= -0.02)
			{
				zhangfu_pingfen_fu1 = 0.5;//昨天大跌  今天资金平分加0.5
			}
			if((yesterday_shoupanjia_indexPrice-minPrice_fu1)/minPrice_fu1 >= 0.02)
			{
				zhangfu_pingfen_fu1 = -0.5;//昨天大跌  今天资金平分减0.5
			}
			zhulipingfen=new_minuteZhuLipingfen.back();
			zhichengpingfen=zhichengfen_modified_hebing.back()+zhangfu_pingfen_fu1;//有问题  下面有用zhichengfen_modified_hebing的
			//paoyapingfen=new_minutePaoYapingfen.back();//
			paoyapingfen=this_modified_paoyapingfen;
			this_indexpingfen=zhulipingfen+zhichengpingfen+paoyapingfen;

			if(zhichengpingfen > 0.5)
			{
				zhichengpingfen = 0.5;
			}
			if(zhichengpingfen < -0.5)
			{
				zhichengpingfen = -0.5;
			}
			//2.判断市场方向。分成做多，做空，可多可空三种    
			market_direction = 0;
			market_direction_forDaoXiang = 0;
			if(true)//原市场类型判断
			{
				if(( zhichengpingfen == 0.5 && paoyapingfen == 0.5 && zhulipingfen >= 0 )
					||
					( zhichengpingfen == 0.5 && paoyapingfen == 0.0 && zhulipingfen >= 0.5 )//
					||
					( zhichengpingfen == 0.0 && paoyapingfen == 0.5 && zhulipingfen >= 0.5 )//
					||
					( zhichengpingfen == 0.0 && paoyapingfen == 0.0 && zhulipingfen >= 1.0 )//
					)
				{
					market_direction = 2;//单边做多  //从下往上找CAD图中的各行
				}
				if(
					( zhichengpingfen == 0.5 && paoyapingfen == 0.5 && zhulipingfen < 0 )
					||
					( zhichengpingfen == 0.5 && paoyapingfen == 0.0 && zhulipingfen == 0 )//
					||
					( zhichengpingfen == 0.5 && paoyapingfen == -0.5 && zhulipingfen >= 0.5 )
					||
					( zhichengpingfen == 0.0 && paoyapingfen == 0.0 && zhulipingfen == 0.5 )//
					||
					( zhichengpingfen == -0.5 && paoyapingfen == 0.5 && zhulipingfen >= 0.5 )
					)
				{
					market_direction = 1;//逢低做多  //从下往上找CAD图中的各行
				}
				if(( zhichengpingfen == -0.5 && paoyapingfen == -0.5 && zhulipingfen <= 0 )//
					||
					( zhichengpingfen == -0.5 && paoyapingfen == 0.0 && zhulipingfen <= -0.5 )
					)
				{
					market_direction = -2;//单边做空  //从上往下找CAD图中的各行
				}
				if(( zhichengpingfen == -0.5 && paoyapingfen == -0.5 && zhulipingfen >= 0.5 )//
					||
					( zhichengpingfen == -0.5 && paoyapingfen == 0.0 && zhulipingfen == 0.0 )//
					||
					( zhichengpingfen == -0.5 && paoyapingfen == 0.5 && zhulipingfen <= -0.5 )//
					||
					( zhichengpingfen == 0.0 && paoyapingfen == -0.5 && zhulipingfen <= 0.0 )//
					||
					( zhichengpingfen == 0.0 && paoyapingfen == 0.0 && zhulipingfen <= -0.5 )//
					||
					( zhichengpingfen == 0.0 && paoyapingfen == 0.5 && zhulipingfen <= -1.5 )
					||
					( zhichengpingfen == 0.5 && paoyapingfen == -0.5 && zhulipingfen <= -1.0 )
					)
				{
					market_direction = -1;//逢低做空  //从上往下找CAD图中的各行
				}
			}
			if(true)//新市场类型判断,用于导向仓   目前实盘在用的20190509
			{
				if(this_indexpingfen>0.5)
				{
					market_direction_forDaoXiang = 2;//单边做多  //从下往上找CAD图中的各行
				}
				if(this_indexpingfen==0.5)
				{
					market_direction_forDaoXiang = 1;//逢低做多  //从下往上找CAD图中的各行
				}
				if(this_indexpingfen==0)
				{
					market_direction_forDaoXiang = 0;
				}
				if(this_indexpingfen==-0.5)
				{
					market_direction_forDaoXiang = -1;//逢低做空  //从上往下找CAD图中的各行
				}
				if(this_indexpingfen<-0.5)
				{
					market_direction_forDaoXiang = -2;//单边做空  //从上往下找CAD图中的各行
				}
				//market_direction = market_direction_forDaoXiang;
			}

			//3.找压力位和支撑位
			double this_max_liang=-1e15;
			double this_min_liang=1e15;
			for (int cc=0;cc<Jia_Liang_jianzhiduis.size();cc++)
			{
				if(Jia_Liang_jianzhiduis[cc].heyue_liang>this_max_liang)
				{
					this_max_liang=Jia_Liang_jianzhiduis[cc].heyue_liang;
					this_chengjiaofengzhi=Jia_Liang_jianzhiduis[cc].heyue_price;//最大成交量处作为价格的成交峰值
				}
				if(Jia_Liang_jianzhiduis[cc].heyue_liang<this_min_liang)
				{
					this_min_liang=Jia_Liang_jianzhiduis[cc].heyue_liang;
				}
			}
			//所有成交峰值
			vector<double> Jialiang_fengs_price;				
			double this_feng_liang=-1e15;
			double this_feng_jia=0.0;
			int qujian=Jia_Liang_jianzhiduis.size()/10+1;//20改成10  20181121
			int this_cc=0;
			for (int cc=0;cc<Jia_Liang_jianzhiduis.size();cc++)//Jia_Liang_jianzhiduis已经是按照合约价格从小到大排列的了
			{
				if(Jia_Liang_jianzhiduis[cc].heyue_liang>=(this_max_liang+this_min_liang)/3)
				{
					if(Jia_Liang_jianzhiduis[cc].heyue_liang>this_feng_liang)
					{
						this_feng_liang=Jia_Liang_jianzhiduis[cc].heyue_liang;
						this_feng_jia=Jia_Liang_jianzhiduis[cc].heyue_price;
						this_cc=cc;
					}
				}
				if((cc-this_cc==qujian||cc==Jia_Liang_jianzhiduis.size()-1)&&this_feng_jia!=0)
				{
					//
					Jialiang_fengs_price.push_back(this_feng_jia);//保存当前截面所有量峰的价格

					this_feng_liang=-1e15;
					this_feng_jia=0.0;
				}
			}
			//找中间位上下两条成交峰值，中间位是最大的成交峰值
			if(Jialiang_fengs_price.size()>0)
			{
				//int middle_tt=-111;
				for (int tt=0;tt<Jialiang_fengs_price.size();tt++)
				{
					if(Jialiang_fengs_price[tt]==this_chengjiaofengzhi)
					{
						middle_tt=tt;//找到中间位
					}
				}
				if(middle_tt==0)//中间位是最下面一条线
				{
					this_chengjiaofengzhi_xiaxian=this_chengjiaofengzhi-dingdicha_standard_IF/6;//自制一条下线
					this_chengjiaofengzhi_shangxian=this_chengjiaofengzhi+dingdicha_standard_IF/6;
					if(Jialiang_fengs_price.size()>=2)
						this_chengjiaofengzhi_shangxian=Jialiang_fengs_price[middle_tt+1];
				}
				if(middle_tt==Jialiang_fengs_price.size()-1)//中间位是最上面一条线
				{
					this_chengjiaofengzhi_xiaxian=this_chengjiaofengzhi-dingdicha_standard_IF/6;//自制一条下线
					this_chengjiaofengzhi_shangxian=this_chengjiaofengzhi+dingdicha_standard_IF/6;
					if(Jialiang_fengs_price.size()>=2)
						this_chengjiaofengzhi_xiaxian=Jialiang_fengs_price[middle_tt-1];
				}
				if(middle_tt>0&&middle_tt<Jialiang_fengs_price.size()-1)
				{
					this_chengjiaofengzhi_xiaxian=Jialiang_fengs_price[middle_tt-1];
					this_chengjiaofengzhi_shangxian=Jialiang_fengs_price[middle_tt+1];
				}
			}
			//以上，成交峰值和上线 下线

			int wei=0;
			double this_zhichengwei=0.0,this_yaliwei=0.0;

			if(days==1)
			{
				os_ZhiChengYaLiwei_IF<<pt_ctrl->tm_hour+8<<":"<<pt_ctrl->tm_min<<":"<<pt_ctrl->tm_sec<<"    "
					<<market_direction<<"    ";
				for (int cc=0;cc<Jialiang_fengs_price.size();cc++)
				{
					os_ZhiChengYaLiwei_IF<<Jialiang_fengs_price[cc]<<"    ";
				}
				os_ZhiChengYaLiwei_IF<<"----"<<Jia_Liang_jianzhiduis.size()<<"----"<<qujian<<"----    "
					<<pre_Heyueprice<<"    "<<zhichengpingfen<<"    "<<paoyapingfen<<"    "<<zhulipingfen<<endl;
			}

			//历史成交峰值上下线
			if(v_chengjiaofengzhi_lishi.size()>0)
			{
				//上下线
				if(pre_Heyueprice>v_chengjiaofengzhi_lishi.back())
				{
					lishi_chengjiaofengzhi_shangxian=20000;
					lishi_chengjiaofengzhi_xiaxian=v_chengjiaofengzhi_lishi.back();
				}
				if(pre_Heyueprice<v_chengjiaofengzhi_lishi[0])
				{
					lishi_chengjiaofengzhi_shangxian=v_chengjiaofengzhi_lishi[0];
					lishi_chengjiaofengzhi_xiaxian=-20000;
				}
				if(v_chengjiaofengzhi_lishi.size()>=2)
				{
					for (int i=0;i<v_chengjiaofengzhi_lishi.size()-1;i++)
					{
						if(v_chengjiaofengzhi_lishi[i]<pre_Heyueprice&&v_chengjiaofengzhi_lishi[i+1]>pre_Heyueprice)
						{
							lishi_chengjiaofengzhi_shangxian=v_chengjiaofengzhi_lishi[i+1];
							lishi_chengjiaofengzhi_xiaxian=v_chengjiaofengzhi_lishi[i];
							break;
						}
					}
				}
				//量最大的峰值
				double max_fengzhi_liang=-1e15;
				int max_i=0;
				for (int i=0;i<v_chengjiaofengzhi_liang_lishi.size();i++)
				{
					if(v_chengjiaofengzhi_liang_lishi[i]>max_fengzhi_liang)
					{
						max_fengzhi_liang=v_chengjiaofengzhi_liang_lishi[i];
						max_i=i;
					}
				}
				lishi_chengjiaofengzhi_liangmax=v_chengjiaofengzhi_lishi[max_i];
				
				//数线数
				if(runTimes==1)
				{
					for (int i=0;i<v_chengjiaofengzhi_lishi.size();i++)
					{
						if(v_chengjiaofengzhi_lishi[i]>pre_Heyueprice)
						{
							kaipan_GT_num=kaipan_GT_num+1;//开盘时，高于价格的峰数量
						}
						if(v_chengjiaofengzhi_lishi[i]<pre_Heyueprice)
						{
							kaipan_LT_num=kaipan_LT_num+1;//开盘时，低于价格的峰数量
						}
					}
				}
				for (int i=0;i<v_chengjiaofengzhi_lishi.size();i++)
				{
					if(v_chengjiaofengzhi_lishi[i]>pre_Heyueprice)
					{
						now_GT_num=now_GT_num+1;//实时，高于价格的峰数量
					}
					//if(v_chengjiaofengzhi_lishi[i]<pre_Heyueprice)
					//{
					//	now_LT_num=now_LT_num+1;//实时，低于价格的峰数量
					//}
				}
				if(now_GT_num>max_GT_num)
				{
					max_GT_num=now_GT_num;
				}
				if(now_GT_num<min_GT_num)
				{
					min_GT_num=now_GT_num;
				}
			}

			//累积今天要用到的峰值
			if(lishi_chengjiaofengzhi_liangmax!=0&&runTimes==1)
			{
				for (int i=0;i<v_chengjiaofengzhi_lishi.size();i++)
				{
					os_fengzhi_alldays_check<<today<<endl;
					os_fengzhi_alldays_check<<v_chengjiaofengzhi_lishi[i]<<endl;
				}
				os_fengzhi_alldays_check<<today<<endl;
				os_fengzhi_alldays_check<<lishi_chengjiaofengzhi_liangmax<<endl;
			}

			//
			if(true)
			{
				//原10s导向信号维持---------------------------------------------------
				//置位
				//if (daoxiang_10s_IF == 1)  //daoxiang_10s_IF本身就在10点以后
				//{
				//	daoxiang_keep_10s = 1;

				//	daoxiang_start_time = new_minuteIndexPrice.size();
				//	daoxiang_start_indexprice=new_minuteIndexPrice.back();
				//}
				//if (daoxiang_10s_IF == -1)
				//{
				//	daoxiang_keep_10s = -1;

				//	daoxiang_start_time = new_minuteIndexPrice.size();
				//	daoxiang_start_indexprice=new_minuteIndexPrice.back();
				//}
				//复位
				if(daoxiang_keep_10s==1&&
					(
					new_minuteIndexPrice.size() - daoxiang_start_time >= 7
					||
					(new_minuteIndexPrice.back()-daoxiang_start_indexprice)/daoxiang_start_indexprice>0.003
					)
					)
				{
					daoxiang_keep_10s = 0;
				}
				if(daoxiang_keep_10s==-1&&
					(
					new_minuteIndexPrice.size() - daoxiang_start_time >= 7
					||
					(new_minuteIndexPrice.back()-daoxiang_start_indexprice)/daoxiang_start_indexprice<-0.003
					)
					)
				{
					daoxiang_keep_10s = 0;
				}
				//---------------------------------------------------------------
			}

			//判断开仓------------------------------------------------------------------------------------------------------
			if((pt_ctrl->tm_hour+8)*3600+(pt_ctrl->tm_min)*60+(pt_ctrl->tm_sec)<50400&&fangxiangmaodun==false&&sum_earning_today>-41)//2:00之前
			{
				//1.导向
				if((pt_ctrl->tm_hour+8)*3600+(pt_ctrl->tm_min)*60+(pt_ctrl->tm_sec)>9.5*3600)//9:30点之后
				{
					//10.走势与主力矛盾对顶
					if(false)
					{
						//多
						if(
							//((this_WBDJ_tag==1&&this_paoyapingfen>=0)||(this_ZJDJ_tag==1&&this_zhichengpingfen>=0)||(this_ZLDJ_tag==1&&this_zhulipingfen>0))
							//&&
							new_minuteIndexPrice.back()<ave_price.back()//上证指数均线之下
							&&donglixian_min_i_10s>fenge_num2_10s
							&&DLX_S1_S2_GT6_10s
							&&this_dadanliuxiang>min_dadanliuxiang+(max_dadanliuxiang-min_dadanliuxiang)*3/4
							&&this_dadanliuxiang>5e8
							//&&(max_heyueprice-min_heyueprice>dingdicha_standard_IF/2) //正向力量爆发过了
							//&&pre_Heyueprice-min_heyueprice<dingdicha_standard_IF/3 //就这要求，不符合的寄希望导向开仓
							&&
							(
							xunfeng_dlx_zouping_use_10s.size()>=2
							//&&xunfeng_dlx_zouping_use_10s[xunfeng_dlx_zouping_use_10s.size()-3]==-1
							&&xunfeng_dlx_zouping_use_10s[xunfeng_dlx_zouping_use_10s.size()-2]==-1
							&&xunfeng_dlx_zouping_use_10s.back()==-1
							//&&xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-2]<=xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-3]
							//&&xunfeng_indexprice_use_10s.back()<xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-2]
							)
							//&&fabs(pre_Heyueprice-lishi_chengjiaofengzhi_xiaxian)<10
							&&fabs(pre_Heyueprice-lishi_chengjiaofengzhi_liangmax)<3
							&&market_direction>-2&&(zhichengpingfen+paoyapingfen>0||zhichengpingfen*paoyapingfen<0)
							&&false
							)
						{
							open_state_JuJi_IF=10;							
						}
						//空
						if(
							//((this_WBDJ_tag==-1&&this_paoyapingfen<=0)||(this_ZJDJ_tag==-1&&this_zhichengpingfen<=0)||(this_ZLDJ_tag==-1&&this_zhulipingfen<0))
							//&&
							new_minuteIndexPrice.back()>ave_price.back()//上证指数均线之上
							&&donglixian_max_i_10s>fenge_num2_10s
							&&DLX_S2_S1_GT6_10s
							&&this_dadanliuxiang<min_dadanliuxiang+(max_dadanliuxiang-min_dadanliuxiang)*2/4
							&&this_dadanliuxiang<-5e8
							//&&max_heyueprice-min_heyueprice>dingdicha_standard_IF/2 //正向力量爆发过了
							//&&max_heyueprice-pre_Heyueprice<dingdicha_standard_IF/3
							&&
							(
							xunfeng_dlx_zouping_use_10s.size()>=2
							//&&xunfeng_dlx_zouping_use_10s[xunfeng_dlx_zouping_use_10s.size()-3]==1
							&&xunfeng_dlx_zouping_use_10s[xunfeng_dlx_zouping_use_10s.size()-2]==1
							&&xunfeng_dlx_zouping_use_10s.back()==1
							//&&xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-2]>xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-3]
							//&&xunfeng_indexprice_use_10s.back()>xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-2]
							)
							//&&fabs(pre_Heyueprice-lishi_chengjiaofengzhi_shangxian)<10
							&&market_direction<2
							&&dingdicha_standard_IF>60 //发现有效后 新增
							&&this_weituobi<0.72 //20200401增加
							&&fabs(pre_Heyueprice-lishi_chengjiaofengzhi_liangmax)<3
							&&market_direction<2&&(zhichengpingfen+paoyapingfen<0||zhichengpingfen*paoyapingfen<0)
							&&false
							)
						{
							open_state_JuJi_IF=-10;
						}
					}
					//11.走势与资金矛盾对顶
					if(true)
					{
						//多
						if(
							//((this_WBDJ_tag==1&&this_paoyapingfen>=0)||(this_ZJDJ_tag==1&&this_zhichengpingfen>=0)||(this_ZLDJ_tag==1&&this_zhulipingfen>0))
							//&&
							new_minuteIndexPrice.back()<ave_price.back()//上证指数均线之下
							&&donglixian_min_i_10s>fenge_num2_10s
							&&DLX_S1_S2_GT6_10s
							&&pre_capital>min_capital+(max_capital-min_capital)*5/8&&max_capital>0
							&&(min_capital-max_capital)/max_capital>-0.10
							&&this_ZJDJ_tag!=-1
							//&&(max_heyueprice-min_heyueprice>dingdicha_standard_IF/2) //正向力量爆发过了
							//&&pre_Heyueprice-min_heyueprice<dingdicha_standard_IF/3 //就这要求，不符合的寄希望导向开仓
							&&
							(
							xunfeng_dlx_zouping_use_10s.size()>=2
							//&&xunfeng_dlx_zouping_use_10s[xunfeng_dlx_zouping_use_10s.size()-3]==-1
							&&xunfeng_dlx_zouping_use_10s[xunfeng_dlx_zouping_use_10s.size()-2]==-1
							&&xunfeng_dlx_zouping_use_10s.back()==-1
							//&&xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-2]<=xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-3]
							//&&xunfeng_indexprice_use_10s.back()<xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-2]
							)
							//&&fabs(pre_Heyueprice-lishi_chengjiaofengzhi_xiaxian)<10
							&&market_direction>-2
							&&dingdicha_standard_IF<100&&(dingdicha_standard_IF<30||dingdicha_standard_IF>40) //发现后新增
							//&&(new_minuteIndexPrice.size()-ping_newminuteindex_size>20||pre_Heyueprice-open_price_IF<-dingdicha_standard_IF/5)							
							)
						{
							heyueprices_at_opensignal_for_11.push_back(pre_Heyueprice);
							//if(heyueprices_at_opensignal_for_11.back()-heyueprices_at_opensignal_for_11[0]>15)
							{
								open_state_JuJi_IF=11;
							}
							feng_counts_at_opensignal_for_11.push_back(xunfeng_dlx_zouping_use_ding_10s.size());
						}
						if(feng_counts_at_opensignal_for_11.size()>0&&xunfeng_dlx_zouping_use_ding_10s.size()-feng_counts_at_opensignal_for_11[0]>0)
						{
							heyueprices_at_opensignal_for_11.clear();
							feng_counts_at_opensignal_for_11.clear();
						}
						//空
						if(
							//((this_WBDJ_tag==-1&&this_paoyapingfen<=0)||(this_ZJDJ_tag==-1&&this_zhichengpingfen<=0)||(this_ZLDJ_tag==-1&&this_zhulipingfen<0))
							//&&
							new_minuteIndexPrice.back()>ave_price.back()//上证指数均线之上
							&&donglixian_max_i_10s>fenge_num2_10s
							&&DLX_S2_S1_GT6_10s
							&&pre_capital<min_capital+(max_capital-min_capital)*5/8&&max_capital>0
							&&(min_capital-max_capital)/max_capital<-0.10
							&&this_ZJDJ_tag==-1   //有这个条件，下午通常开不进去
							&&this_zhichengpingfen<=0//增加
							&&this_dadanliuxiang<35e8//增加
							//&&max_heyueprice-min_heyueprice>dingdicha_standard_IF/2 //正向力量爆发过了
							//&&max_heyueprice-pre_Heyueprice<dingdicha_standard_IF/3
							&&
							(
							xunfeng_dlx_zouping_use_10s.size()>=2
							//&&xunfeng_dlx_zouping_use_10s[xunfeng_dlx_zouping_use_10s.size()-3]==1
							&&xunfeng_dlx_zouping_use_10s[xunfeng_dlx_zouping_use_10s.size()-2]==1
							&&xunfeng_dlx_zouping_use_10s.back()==1
							//&&xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-2]>xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-3]
							//&&xunfeng_indexprice_use_10s.back()>xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-2]
							)
							//&&fabs(pre_Heyueprice-lishi_chengjiaofengzhi_shangxian)<10
							&&market_direction<2
							&&this_weituobi<0.72 //20200401增加
							&&dingdicha_standard_IF<100&&(dingdicha_standard_IF<30||dingdicha_standard_IF>40) //发现后新增
							//&&(new_minuteIndexPrice.size()-ping_newminuteindex_size>20||pre_Heyueprice-open_price_IF>dingdicha_standard_IF/5)
							&&true
							)
							
						{
							heyueprices_at_opensignal_for_fu11.push_back(pre_Heyueprice);
							//if(heyueprices_at_opensignal_for_fu11.back()-heyueprices_at_opensignal_for_fu11[0]<-15)
							{
								open_state_JuJi_IF=-11;
							}
							gu_counts_at_opensignal_for_fu11.push_back(xunfeng_dlx_zouping_use_di_10s.size());
						}
						if(gu_counts_at_opensignal_for_fu11.size()>0&&xunfeng_dlx_zouping_use_di_10s.size()-gu_counts_at_opensignal_for_fu11[0]>0)
						{
							heyueprices_at_opensignal_for_fu11.clear();
							gu_counts_at_opensignal_for_fu11.clear();
						}
					}
					//12.走势与委卖矛盾对顶
					if(true)
					{
						//多
						if(
							//((this_WBDJ_tag==1&&this_paoyapingfen>=0)||(this_ZJDJ_tag==1&&this_zhichengpingfen>=0)||(this_ZLDJ_tag==1&&this_zhulipingfen>0))
							//&&
							new_minuteIndexPrice.back()<ave_price.back()//上证指数均线之下
							&&donglixian_min_i_10s>fenge_num2_10s
							&&DLX_S1_S2_GT6_10s
							&&this_WBDJ_tag!=-1
							//&&(max_heyueprice-min_heyueprice>dingdicha_standard_IF/2) //正向力量爆发过了
							//&&pre_Heyueprice-min_heyueprice<dingdicha_standard_IF/3 //就这要求，不符合的寄希望导向开仓
							&&
							(
							xunfeng_dlx_zouping_use_10s.size()>=2
							//&&xunfeng_dlx_zouping_use_10s[xunfeng_dlx_zouping_use_10s.size()-3]==-1
							&&xunfeng_dlx_zouping_use_10s[xunfeng_dlx_zouping_use_10s.size()-2]==-1
							&&xunfeng_dlx_zouping_use_10s.back()==-1
							//&&xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-2]<=xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-3]
							//&&xunfeng_indexprice_use_10s.back()<xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-2]
							)
							//&&fabs(pre_Heyueprice-lishi_chengjiaofengzhi_xiaxian)<10
							&&market_direction>-2
							&&(dingdicha_standard_IF<30||dingdicha_standard_IF>50)//新增
							//&&(new_minuteIndexPrice.size()-ping_newminuteindex_size>20||pre_Heyueprice-open_price_IF<-dingdicha_standard_IF/5)							
							)
						{
							heyueprices_at_opensignal_for_12.push_back(pre_Heyueprice);
							//if(heyueprices_at_opensignal_for_12.back()-heyueprices_at_opensignal_for_12[0]>15)
							{
								open_state_JuJi_IF=12;
							}
							//记录第一次出现开仓信号时，谷的数量  当未来谷的数量增加一个，就清空heyueprices_at_opensignal_for_12，重新搜集
							feng_counts_at_opensignal_for_12.push_back(xunfeng_dlx_zouping_use_ding_10s.size());
						}
						if(feng_counts_at_opensignal_for_12.size()>0&&xunfeng_dlx_zouping_use_ding_10s.size()-feng_counts_at_opensignal_for_12[0]>0)
						{
							heyueprices_at_opensignal_for_12.clear();
							feng_counts_at_opensignal_for_12.clear();
						}
						//空
						if(
							//((this_WBDJ_tag==-1&&this_paoyapingfen<=0)||(this_ZJDJ_tag==-1&&this_zhichengpingfen<=0)||(this_ZLDJ_tag==-1&&this_zhulipingfen<0))
							//&&
							new_minuteIndexPrice.back()>ave_price.back()//上证指数均线之上
							&&donglixian_max_i_10s>fenge_num2_10s
							&&DLX_S2_S1_GT6_10s
							&&this_WBDJ_tag==-1
							&&this_WBDJ<3//增加
							&&this_dadanliuxiang<35e8//增加
							//&&max_heyueprice-min_heyueprice>dingdicha_standard_IF/2 //正向力量爆发过了
							//&&max_heyueprice-pre_Heyueprice<dingdicha_standard_IF/3
							&&
							(
							xunfeng_dlx_zouping_use_10s.size()>=2
							//&&xunfeng_dlx_zouping_use_10s[xunfeng_dlx_zouping_use_10s.size()-3]==1
							&&xunfeng_dlx_zouping_use_10s[xunfeng_dlx_zouping_use_10s.size()-2]==1
							&&xunfeng_dlx_zouping_use_10s.back()==1
							//&&xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-2]>xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-3]
							//&&xunfeng_indexprice_use_10s.back()>xunfeng_indexprice_use_10s[xunfeng_indexprice_use_10s.size()-2]
							)
							//&&fabs(pre_Heyueprice-lishi_chengjiaofengzhi_shangxian)<10
							&&market_direction<2
							&&(dingdicha_standard_IF<30||dingdicha_standard_IF>50)//新增
							&&this_weituobi<0.72 //20200401增加
							//&&(new_minuteIndexPrice.size()-ping_newminuteindex_size>20||pre_Heyueprice-open_price_IF>dingdicha_standard_IF/5)
							&&true
							)
						{
							heyueprices_at_opensignal_for_fu12.push_back(pre_Heyueprice);
							//if(heyueprices_at_opensignal_for_fu12.back()-heyueprices_at_opensignal_for_fu12[0]<-15)
							{
								open_state_JuJi_IF=-12;
							}
							gu_counts_at_opensignal_for_fu12.push_back(xunfeng_dlx_zouping_use_di_10s.size());
						}
						if(gu_counts_at_opensignal_for_fu12.size()>0&&xunfeng_dlx_zouping_use_di_10s.size()-gu_counts_at_opensignal_for_fu12[0]>0)
						{
							heyueprices_at_opensignal_for_fu12.clear();
							gu_counts_at_opensignal_for_fu12.clear();
						}
					}
					//新导向开仓
					if(true)//实盘检查
					{						
						if((pt_ctrl->tm_hour+8)*3600+(pt_ctrl->tm_min)*60+(pt_ctrl->tm_sec)>10*3600+10*60 && dingdicha_standard_IF<140)//10:10之后
						{
							if(true&&daoxiang_10s_IF==1&&market_direction>=-100&&youBaofa_10s<=0&&pre_Heyueprice<=mean_if_10s_hou_1_3&&DingDiBeiLi_Capital.back()<=0&&vec_IndexPrice_zhangfu.back()<0.02&&daoxiang_kaiduo_count>-10&&huanshoulv_fu1>0.35)//导向开多
							{							
								//if(this_ZLDJ>-2&&this_ZJDJ>-2&&this_WBDJ>-2.5&&this_DLDJ>-2.5)
								{
									//if(this_ZLDJ>-0.6||this_ZJDJ>-0.6||this_WBDJ>-0.6||this_DLDJ>-0.6)
									{
										if(now_is_beili<2)
										{
											if(fabs(pre_indexPrice-ave_price.back())/ave_price.back()>0.002)
											{
												//if((pre_Heyueprice-min_heyueprice)/dingdicha_standard_IF>0.2&&(pre_Heyueprice-min_heyueprice)/dingdicha_standard_IF<0.7)
												{
													if(dingdicha_standard_IF<30||dingdicha_standard_IF>40)//新增20191222
													{
														if(this_ZJDJ_tag!=-1&&this_WBDJ_tag!=-1)
														{
															//double ddc10 = max_10s_heyueprice-min_10s_heyueprice;
															//if( ddc10>dingdicha_standard_IF*2/10 && ddc10<dingdicha_standard_IF*6/10 && ddc10>10 && ddc10<50 )
															{
																if(10>=0)
																{
																	open_state_JuJi_IF=30;//上导向，开多   
																}
															}
														}
													}
												}
											}
										}
									}
								}								
							}
							if(true&&daoxiang_10s_IF==-1&&market_direction<=100&&youBaofa_10s>=0&&pre_Heyueprice>=mean_if_10s_hou_1_3&&DingDiBeiLi_Capital.back()>=0&&vec_IndexPrice_zhangfu.back()>-0.02&&daoxiang_kaikong_count>-10&&huanshoulv_fu1>0.35)//导向开空
							{
								//if(this_ZLDJ<2&&this_ZJDJ<2.5&&this_WBDJ<2&&this_DLDJ<2)
								{
									//if(this_ZLDJ<0.3||this_ZJDJ<0.3||this_WBDJ<0.3||this_DLDJ<0.3)
									{
										if(now_is_beili>-2)
										{
											if(fabs(pre_indexPrice-ave_price.back())/ave_price.back()>0.002)
											{
												//if((max_heyueprice-pre_Heyueprice)/dingdicha_standard_IF>0.2&&(max_heyueprice-pre_Heyueprice)/dingdicha_standard_IF<0.6)
												{
													if(dingdicha_standard_IF<30||dingdicha_standard_IF>40)//新增20191222
													{
														if(this_ZJDJ_tag!=1&&this_WBDJ_tag!=1)
														{
															//double ddc10 = max_10s_heyueprice-min_10s_heyueprice;
															//if( ddc10>dingdicha_standard_IF*2/10 && ddc10<dingdicha_standard_IF*6/10 && ddc10>10 && ddc10<50 )
															{
																if(this_weituobi<0.72) //20200401增加
																{
																	open_state_JuJi_IF=-30;//下导向，开空
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					//原来的导向开仓
					if(false)
					{
						if((pt_ctrl->tm_hour+8)*3600+(pt_ctrl->tm_min)*60+(pt_ctrl->tm_sec)>10*3600+10*60)//10:10之后
						{
							if(daoxiang_10s_IF==1&&market_direction_forDaoXiang>=0&&youBaofa_10s<=0&&pre_Heyueprice<=mean_if_10s_hou_1_3&&DingDiBeiLi_Capital.back()<=0&&vec_IndexPrice_zhangfu.back()<0.02&&daoxiang_kaiduo_count>-10&&huanshoulv_fu1>0.35)//导向开多
							{							
								if(this_ZLDJ>-2&&this_ZJDJ>-2&&this_WBDJ>-2.5&&this_DLDJ>-2.5)
								{
									if(this_ZLDJ>-0.6||this_ZJDJ>-0.6||this_WBDJ>-0.6||this_DLDJ>-0.6)
									{
										if(now_is_beili<2)
										{
											if(fabs(pre_indexPrice-ave_price.back())/ave_price.back()>0.002)
											{
												if((pre_Heyueprice-min_heyueprice)/dingdicha_standard_IF>0.2&&(pre_Heyueprice-min_heyueprice)/dingdicha_standard_IF<0.7)
												{
													if(dingdicha_standard_IF>=25)
													{
														if(this_ZJDJ_tag!=-1&&this_WBDJ_tag!=-1)
														{
															double ddc10 = max_10s_heyueprice-min_10s_heyueprice;
															if( ddc10>dingdicha_standard_IF*2/10 && ddc10<dingdicha_standard_IF*6/10 && ddc10>10 && ddc10<50 )
															{
																open_state_JuJi_IF=30;//上导向，开多   
															}
														}
													}
												}
											}
										}
									}
								}								
							}
							if(daoxiang_10s_IF==-1&&market_direction_forDaoXiang<=-0&&youBaofa_10s>=0&&pre_Heyueprice>=mean_if_10s_hou_1_3&&DingDiBeiLi_Capital.back()>=0&&vec_IndexPrice_zhangfu.back()>-0.02&&daoxiang_kaikong_count>-10&&huanshoulv_fu1>0.35)//导向开空
							{
								if(this_ZLDJ<2&&this_ZJDJ<2.5&&this_WBDJ<2&&this_DLDJ<2)
								{
									if(this_ZLDJ<0.3||this_ZJDJ<0.3||this_WBDJ<0.3||this_DLDJ<0.3)
									{
										if(now_is_beili>-2)
										{
											if(fabs(pre_indexPrice-ave_price.back())/ave_price.back()>0.002)
											{
												if((max_heyueprice-pre_Heyueprice)/dingdicha_standard_IF>0.2&&(max_heyueprice-pre_Heyueprice)/dingdicha_standard_IF<0.6)
												{
													if(dingdicha_standard_IF>=25)
													{
														if(this_ZJDJ_tag!=1&&this_WBDJ_tag!=1)
														{
															double ddc10 = max_10s_heyueprice-min_10s_heyueprice;
															if( ddc10>dingdicha_standard_IF*2/10 && ddc10<dingdicha_standard_IF*6/10 && ddc10>10 && ddc10<50 )
															{
																open_state_JuJi_IF=-30;//下导向，开空
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}				
				if(fabs(kaicangleixing)!=30&&true)//实盘检查
				{					
					//5.峰值空间   //新导向  和原导向合起来1000多单可以用
					if(true&&lishi_chengjiaofengzhi_shangxian>0)
					{
						if(
							lishi_chengjiaofengzhi_liangmax!=0
							&&daoxiang_10s_IF==1
							//&&fabs(pre_indexPrice-ave_price.back())/ave_price.back()>0.002
							&&
							(
							fabs(pre_Heyueprice-lishi_chengjiaofengzhi_liangmax)>dingdicha_standard_IF/3
							||
							(fabs(pre_Heyueprice-lishi_chengjiaofengzhi_liangmax)<dingdicha_standard_IF/3&&market_direction>=0&&this_ZLDJ>-1&&this_ZJDJ>-1&&this_WBDJ>-1)
							)
							&&fabs(pre_indexPrice-ave_price.back())/ave_price.back()>0.002
							&&this_ZJDJ_tag!=-1&&this_WBDJ_tag!=-1
							&&max_10s_heyueprice-min_10s_heyueprice>dingdicha_standard_IF*2/5
							&&dingdicha_standard_IF>50//新增20191222
							//&&daoxiang_kaiduo_count==0
							&&true
							)
						{
							open_state_JuJi_IF=52;
						}
						if(
							lishi_chengjiaofengzhi_liangmax!=0
							&&daoxiang_10s_IF==-1
							//&&fabs(pre_indexPrice-ave_price.back())/ave_price.back()>0.002
							&&
							(
							fabs(pre_Heyueprice-lishi_chengjiaofengzhi_liangmax)>dingdicha_standard_IF/3
							||
							(fabs(pre_Heyueprice-lishi_chengjiaofengzhi_liangmax)<dingdicha_standard_IF/3&&market_direction<=0&&this_ZLDJ<1&&this_ZJDJ<1&&this_WBDJ<1)
							)
							&&fabs(pre_indexPrice-ave_price.back())/ave_price.back()>0.002
							&&this_ZJDJ_tag==-1&&this_WBDJ_tag==-1
							&&max_10s_heyueprice-min_10s_heyueprice>dingdicha_standard_IF*2/5
							&&dingdicha_standard_IF>50//新增20191222
							//&&daoxiang_kaikong_count==0
							&&this_weituobi<0.72 //20200401增加
							&&true
							)
						{
							open_state_JuJi_IF=-52;
						}						
					}
				}
			}
			
			open_IF.push_back(open_state_JuJi_IF);

			if(hasChicangIF==0)
			{
				if(open_state_JuJi_IF == 30)
				{
					daoxiang_kaiduo_count++;
				}
				if(open_state_JuJi_IF == -30)
				{
					daoxiang_kaikong_count++;
				}
			}

			//IF所有条件逐次记录，开不开仓都记录
			if(days==1)
			{
				Tiaojian_jilu_IF<<pt_ctrl->tm_hour+8<<":"<<pt_ctrl->tm_min<<":"<<pt_ctrl->tm_sec<<"    "
					<<"开仓："<<open_state_JuJi_IF<<"  "
					<<"价格："<<pre_Heyueprice<<"  "
					<<"市场："<<market_direction<<"  "
					<<"支撑："<<zhichengpingfen<<"  "
					<<"抛压："<<paoyapingfen<<"  "
					<<"主力："<<zhulipingfen<<"  "
					<<"主力等级："<<this_ZLDJ<<"  "
					<<"资金等级："<<this_ZJDJ<<"  "
					<<"委比等级："<<this_WBDJ<<"  "
					<<"动力等级："<<this_DLDJ<<"  "	
					<<"主力等级变化："<<this_DLDJ_tag<<"  "
					<<"资金等级变化："<<this_ZJDJ_tag<<"  "
					<<"委比等级变化："<<this_WBDJ_tag<<"  "
					<<"动力等级变化："<<this_DLDJ_tag<<"  "<<endl;
				Tiaojian_jilu_IF<<"        "<<"有爆发："<<youBaofa_10s<<"  "
					<<"背离:"<<now_is_beili<<"  "
					<<"导向:"<<daoxiang_10s_IF<<"  "
					<<"昨结算价："<<jiesuanjia_IF_fu1<<"  "
					<<"波数："<<bodong_count<<"  "<<endl;
				Tiaojian_jilu_IF<<"        "<<"涨幅："<<this_zhangfu_indexPrice<<"  "
					<<"离均线："<<(pre_indexPrice-ave_price.back())/ave_price.back()*100<<"%  "<<"指数:"<<pre_indexPrice<<"  "<<"均线:"<<ave_price.back()<<"  "<<"现货成交量："<<pre_chengjiaoliang<<"  "<<"ave个数："<<ave_price.size()<<"  "
					<<"20日均顶底差："<<dingdicha_standard_IF<<"  "
					<<"此时离最高点："<<(max_heyueprice-pre_Heyueprice)/dingdicha_standard_IF*100<<"%  "
					<<"此时离最低点："<<(pre_Heyueprice-min_heyueprice)/dingdicha_standard_IF*100<<"%  "
					<<"窗口顶底差："<<(if_2_4_10s-if_1_4_10s)*4<<"  "<<endl;
				Tiaojian_jilu_IF<<"        "<<"震荡市峰值上线："<<this_chengjiaofengzhi_shangxian<<"  "
					<<"成交峰值："<<this_chengjiaofengzhi<<"  "
					<<"震荡市峰值下线："<<this_chengjiaofengzhi_xiaxian<<"  "
					<<"震荡市中间位峰值序号："<<middle_tt<<"  "
					<<"参考期指顶底差："<<dingdicha_standard_IF<<"  "
					<<"参考天数："<<need_days<<"  "<<endl;
				Tiaojian_jilu_IF<<"              "<<"成交峰值序列：";
				for (int i=0;i<Jialiang_fengs_price.size();i++)
				{
					Tiaojian_jilu_IF<<Jialiang_fengs_price[i]<<"  ";
				}
				Tiaojian_jilu_IF<<"------------------------------------------------"<<endl;
			}
			//IF开仓
			//
			//连到实盘执行,必须在kaicang_record()前，否则hasChicangIF不等于0了
			if(runMode==1&&hasChicangIF==0)
			{
				if((isJiaogeri==false)||(isJiaogeri==true&&geye_duo_count+geye_kong_count>0)) //实盘检查  别忘了交割日当天如果一开始就没有隔夜仓，直接换了合约就行，不当交割日看了isJiaogeri=false
				{
					if(open_IF.back()>0)//实盘开仓信号保持控制
					{
						kaiduo_keep=true;
					}
					if(open_IF.back()<0)
					{
						kaikong_keep=true;
					}
				}
				if(isJiaogeri)//交割日清仓
				{
					if(pt_ctrl->tm_hour+8==14&&pt_ctrl->tm_min>=40 && geye_duo_count>0)
					{
						//xiadan_shoushu=geye_duo_count;
						xiadan_shoushu=1;
						kaiduo_keep=true;
						kaikong_keep=true;
						isJiaogeri=false;//一次信号就足够了，一直保持线程可能来不及修改geye_duo_count，继续下单。一次平一手。平仓一次停止程序，再运行
					}
				}
			}
			if(hasChicangIF==0)
			{
				if(open_IF.back()>0)
				{
					kaicang_record(1);	//开多				
				}
				if(open_IF.back()<0)
				{
					kaicang_record(-1);	//开空			
				}
			}
			//IF平仓
			this_pingMode=0;
			//平多  空间止盈1  止损2  时间3  反向平4 
			if(hasChicangIF==1)
			{
				//反向平仓
				if(open_IF.back()<0&&hasChicangIF==1)
				{
					/*if(new_minuteIndexPrice.size()-open_newminuteindex_size<=3&&fabs(pre_Heyueprice-open_price_IF)<5)
					{
						fangxiangmaodun=true;
						maodunshi_ding_count=xunfeng_dlx_zouping_use_ding_10s.size();
						maodunshi_di_count=xunfeng_dlx_zouping_use_di_10s.size();
					}*/
					//先平
					this_pingMode=4;
					pingcang_record(this_pingMode);
					if(!(new_minuteIndexPrice.size()-open_newminuteindex_size<=3&&fabs(pre_Heyueprice-open_price_IF)<5))
					{
						fangxiangmaodun=false;
					}
					//再开
					if(fangxiangmaodun==false)
					{
						kaicang_record(-1);	
						//if(hasChicangIF==0)
						{
							kaikong_keep=true;//20200911修改反向平仓的同时开仓不下单问题
						}
					}
				}
				//
				if(pre_Heyueprice-open_price_IF>max_fuying)
					max_fuying=pre_Heyueprice-open_price_IF;//最大浮盈
				if(pre_Heyueprice-open_price_IF<min_fukui)
					min_fukui=pre_Heyueprice-open_price_IF;//最大浮亏，负数
				//浮亏达到30个点
				if(pre_Heyueprice-open_price_IF<=-12)
				//if(min_fukui<=-dingdicha_standard_IF/3&&dingdicha_standard_IF>80)
					now_is_big_fukui_IF=true;

				if(pre_Heyueprice>open_lishi_chengjiaofengzhi_shangxian+2)
				{
					has_tupo_shangxian=true;
				}

				
				//止盈平仓
				if(
					(
					(
					dingdicha_standard_IF>=40&&(
					(max_fuying>=dingdicha_standard_IF/4&&pre_Heyueprice-open_price_IF<0.5*max_fuying)
					//||(max_fuying>=10&&pre_Heyueprice-open_price_IF<0.2*max_fuying)//
					||(max_fuying>=dingdicha_standard_IF/3&&pre_Heyueprice-open_price_IF<0.6*max_fuying)
					||(max_fuying>=dingdicha_standard_IF/2&&pre_Heyueprice-open_price_IF<0.7*max_fuying)
					||(max_fuying>=dingdicha_standard_IF/1&&pre_Heyueprice-open_price_IF<0.8*max_fuying)
					||(max_fuying>=8&&pre_Heyueprice-open_price_IF<0.3*max_fuying&&false))//这一行新加
					)
					||
					(
					dingdicha_standard_IF<40&&(
					(max_fuying>=10&&pre_Heyueprice-open_price_IF<0.6*max_fuying)
					||(max_fuying>=10&&pre_Heyueprice-open_price_IF<0.7*max_fuying)
					||(max_fuying>=30&&pre_Heyueprice-open_price_IF<0.8*max_fuying)
					||(max_fuying>=40&&pre_Heyueprice-open_price_IF<0.9*max_fuying))
					)
					||
					(max_fuying>=dingdicha_standard_IF/5&&max_fuying>=20&&pre_Heyueprice-open_price_IF<max_fuying-2&&vec_IndexPrice_zhangfu.back()>0.004)
					)
					&&hasChicangIF==1
					)
				{
					this_pingMode=1;
					pingcang_record(this_pingMode);
				}
				//止损平仓
				if(
					(
					(pre_Heyueprice-(open_price_IF+max_fuying)<=-20&&pre_Heyueprice-(open_price_IF+max_fuying)>-40&&max_fuying>=0)//open_price_IF+max_fuying作为开仓价格
					||
					(pre_Heyueprice-open_price_IF<=-20&&pre_Heyueprice-(open_price_IF+max_fuying)>-40&&max_fuying<=0)
					)
					&&hasChicangIF==1
					)
				{
					this_pingMode=2;
					pingcang_record(this_pingMode);
				}
				//时间平仓
				if(
					(
					(pt_ctrl->tm_hour+8==14&&pt_ctrl->tm_min>=30&&market_direction!=2&&fabs(kaicangleixing)!=70)
					||
					(pt_ctrl->tm_hour+8==14&&pt_ctrl->tm_min>=50)
					)
					&&hasChicangIF==1
					)
				{
					this_pingMode=3;
					pingcang_record(this_pingMode);
				}
				//反弹平仓
				if(false&&hasChicangIF==1&&now_is_big_fukui_IF&&pre_Heyueprice>=min_10s_heyueprice+(max_10s_heyueprice-min_10s_heyueprice)*1/2)
				{
					this_pingMode=20;
					pingcang_record(this_pingMode);
				}
				//新增平仓：震荡市20分钟平，指数上四分位平，爆发平（峰或谷个数加一），评分变化平
				if(true)
				{
					int now_hour=int(pt_ctrl->tm_hour+8);
					int now_minute=int(pt_ctrl->tm_min);
					int now_second=int(pt_ctrl->tm_sec);
					double pingfen_sum_open=open_zhicheng_pingfen_IF+open_paoya_pingfen_IF+open_zhuli_pingfen_IF;
					double pingfen_sum_now=zhichengpingfen+paoyapingfen+zhulipingfen;
					//40分钟后，评分没有有利变化，平
					if(new_minuteIndexPrice.size()-open_newminuteindex_size>=40&&pingfen_sum_now<pingfen_sum_open&&hasChicangIF==1&&fabs(kaicangleixing)!=50&&true)
					{
						this_pingMode=5;
						pingcang_record(this_pingMode);
					}
					//下导向平
					if(
						(daoxiang_10s_IF==-1&&hasChicangIF==1&&fabs(kaicangleixing)==30&&false)
						||
						(false&&daoxiang_10s_IF==-1&&hasChicangIF==1&&(kaicangleixing!=30&&kaicangleixing!=-30&&kaicangleixing!=22&&kaicangleixing!=-22&&kaicangleixing!=21&&kaicangleixing!=-21)&&market_direction<0)
						)
					{
						this_pingMode=10;
						pingcang_record(this_pingMode);
					}
					//动力线走平平仓
					if(false&&DLX_S2_S1_GT6_10s==true&&donglixian_max_i_10s>fenge_num2_10s&&kaicangleixing!=30&&hasChicangIF==1)
					{
						this_pingMode=14;
						pingcang_record(this_pingMode);
					}
					//爆发平
					if(baofa_ping_10s==1&&hasChicangIF==1&&
						(pre_Heyueprice-open_price_IF>dingdicha_standard_IF/4||new_minuteIndexPrice.size()-open_newminuteindex_size>10))
					{
						this_pingMode=6;
						pingcang_record(this_pingMode);
					}
					//数浪平仓，当前是震荡市极大值增加一个平，当前是单边市极大值增加两个平
					if
						(
						((fabs(kaicangleixing)==30||true)&&hasChicangIF==1&&DLX_S2_S1_GT6_10s&&true&&
						(
						(pingfen_sum_now<=0.5&&pingfen_sum_now>=pingfen_sum_open&&xunfeng_dlx_zouping_use_ding_10s.size()-open_feng_count_IF>=2&&pre_Heyueprice-open_price_IF>(max_heyueprice-min_heyueprice)/4)
						||(pingfen_sum_now>0.5&&pingfen_sum_now<=1&&pingfen_sum_now>=pingfen_sum_open&&xunfeng_dlx_zouping_use_ding_10s.size()-open_feng_count_IF>=2&&pre_Heyueprice-open_price_IF>(max_heyueprice-min_heyueprice)/3)
						||(pingfen_sum_now>1&&pingfen_sum_now>=pingfen_sum_open&&xunfeng_dlx_zouping_use_ding_10s.size()-open_feng_count_IF>=2&&pre_Heyueprice-open_price_IF>(max_heyueprice-min_heyueprice)/2)
						)
						)
						||
						(fabs(kaicangleixing)!=30&&hasChicangIF==1&&xunfeng_dlx_zouping_use_ding_10s.size()-open_feng_count_IF>=4&&pre_Heyueprice-open_price_IF>(max_heyueprice-min_heyueprice)/2)
						)
					{
						this_pingMode=7;
						pingcang_record(this_pingMode);
					}
					//评分变化平多
					if(false&&pingfen_sum_now<pingfen_sum_open&&hasChicangIF==1)
					{
						this_pingMode=8;
						pingcang_record(this_pingMode);
					}
					//成交峰值平仓
					if(true&&hasChicangIF==1)
					{
						//峰值变化不利,并且市场倾向于空  反弹到峰值和上线之间平仓
						if(false&&this_chengjiaofengzhi<=open_chengjiaofengzhi_xiaxian&&market_direction<0&&pre_Heyueprice>=(this_chengjiaofengzhi+this_chengjiaofengzhi_shangxian)/2&&kaicangleixing!=10&&kaicangleixing!=-10)
						{
							this_pingMode=11;
							pingcang_record(this_pingMode);
						}
						//峰值没有不利变化，但市场不倾向于多，上线平仓
						if(false&&this_chengjiaofengzhi>open_chengjiaofengzhi_xiaxian&&market_direction<=0&&pre_Heyueprice>=this_chengjiaofengzhi_shangxian)
						{
							this_pingMode=12;
							pingcang_record(this_pingMode);
						}
					}
					//背离平多，主力评分不为正，相信顶背离
					if(false&&DingDiBeiLi_Capital.back()==2&&new_minuteZhuLipingfen.back()<=0&&hasChicangIF==1&&(kaicangleixing==30||kaicangleixing==-30||kaicangleixing==90||kaicangleixing==-90||kaicangleixing==91||kaicangleixing==-91))
					{
						this_pingMode=13;
						pingcang_record(this_pingMode);
					}
					//期指抵抗平多
					if(false&&zhangdiebi-open_zhangdiebi<-2&&open_zhangdiebi>0&&hasChicangIF==1)//
					{
						this_pingMode=24;
						pingcang_record(this_pingMode);
					}
					//坚挺平
					if(true&&fabs(kaicangleixing)==22&&pre_Heyueprice<=min_10s_heyueprice&&new_minuteIndexPrice.size()-open_newminuteindex_size<=20&&hasChicangIF==1)//
					{
						this_pingMode=25;
						pingcang_record(this_pingMode);
					}
					//峰值止盈止损
					if(false&&(fabs(kaicangleixing)==50||fabs(kaicangleixing)==51||fabs(kaicangleixing)==52))
					{
						//跌破下线 止损
						if(
							(pre_Heyueprice<open_lishi_chengjiaofengzhi_xiaxian-dingdicha_standard_IF/3&&market_direction==2)
							||
							(pre_Heyueprice<open_lishi_chengjiaofengzhi_xiaxian-dingdicha_standard_IF/4&&market_direction==1)
							||
							(pre_Heyueprice<open_lishi_chengjiaofengzhi_xiaxian-dingdicha_standard_IF/5&&market_direction==0&&false))
						{
							this_pingMode=26;
							pingcang_record(this_pingMode);
						}
						//跌破上线 止盈
						if(has_tupo_shangxian==true&&pre_Heyueprice<open_lishi_chengjiaofengzhi_shangxian-3&&false)
						{
							this_pingMode=27;
							pingcang_record(this_pingMode);
						}
					}
				}
			}
			//平空
			if(hasChicangIF==-1)
			{
				//反向平仓
				if(open_IF.back()>0&&hasChicangIF==-1)
				{
					/*if(new_minuteIndexPrice.size()-open_newminuteindex_size<=3&&fabs(pre_Heyueprice-open_price_IF)<5)
					{
						fangxiangmaodun=true;
						maodunshi_ding_count=xunfeng_dlx_zouping_use_ding_10s.size();
						maodunshi_di_count=xunfeng_dlx_zouping_use_di_10s.size();
					}*/
					//先平
					this_pingMode=-4;
					pingcang_record(this_pingMode);
					if(!(new_minuteIndexPrice.size()-open_newminuteindex_size<=3&&fabs(pre_Heyueprice-open_price_IF)<5))
					{
						fangxiangmaodun=false;
					}
					//再开
					if(fangxiangmaodun==false)
					{
						kaicang_record(1);	
						//if(hasChicangIF==0)
						{
							kaiduo_keep=true;//20200911修改反向平仓的同时开仓不下单问题
						}
					}
				}
				//
				if(open_price_IF-pre_Heyueprice>max_fuying)
					max_fuying=open_price_IF-pre_Heyueprice;//最大浮盈
				if(open_price_IF-pre_Heyueprice<min_fukui)
					min_fukui=open_price_IF-pre_Heyueprice;//最大浮亏  负数

				if(open_price_IF-pre_Heyueprice<=-12)
				//if(min_fukui<=-dingdicha_standard_IF/3&&dingdicha_standard_IF>80)
					now_is_big_fukui_IF=true;
				//
				if(pre_Heyueprice<open_lishi_chengjiaofengzhi_xiaxian-2)
				{
					has_diepo_xiaxian=true;
				}

				//止盈平仓
				if(
					(
					(
					dingdicha_standard_IF>=40&&(
					(max_fuying>=dingdicha_standard_IF/4&&open_price_IF-pre_Heyueprice<0.5*max_fuying)
					//||(max_fuying>=10&&open_price_IF-pre_Heyueprice<0.2*max_fuying)//
					||(max_fuying>=dingdicha_standard_IF/3&&open_price_IF-pre_Heyueprice<0.6*max_fuying)
					||(max_fuying>=dingdicha_standard_IF/2&&open_price_IF-pre_Heyueprice<0.7*max_fuying)
					||(max_fuying>=dingdicha_standard_IF/1&&open_price_IF-pre_Heyueprice<0.8*max_fuying)
					||(max_fuying>=8&&open_price_IF-pre_Heyueprice<0.3*max_fuying&&false))//这一行新加
					)
					||
					(
					dingdicha_standard_IF<40&&(
					(max_fuying>=10&&open_price_IF-pre_Heyueprice<0.6*max_fuying)
					||(max_fuying>=20&&open_price_IF-pre_Heyueprice<0.7*max_fuying)
					||(max_fuying>=30&&open_price_IF-pre_Heyueprice<0.8*max_fuying)
					||(max_fuying>=40&&open_price_IF-pre_Heyueprice<0.9*max_fuying))
					)
					||
					(max_fuying>=dingdicha_standard_IF/5&&max_fuying>=20&&open_price_IF-pre_Heyueprice<max_fuying-2&&vec_IndexPrice_zhangfu.back()<-0.004)
					)
					&&
					hasChicangIF==-1
					)
				{
					this_pingMode=-1;
					pingcang_record(this_pingMode);
				}
				//止损平仓
				if(
					(
					(open_price_IF-max_fuying-pre_Heyueprice<=-20&&open_price_IF-max_fuying-pre_Heyueprice>-40&&max_fuying>=0)//open_price_IF-max_fuying作为开仓价格
					||
					(open_price_IF-pre_Heyueprice<=-20&&open_price_IF-max_fuying-pre_Heyueprice>-40&&max_fuying<=0)
					)
					&&hasChicangIF==-1)//
				{
					this_pingMode=-2;
					pingcang_record(this_pingMode);
				}
				//时间平仓
				if(
					(
					(pt_ctrl->tm_hour+8==14&&pt_ctrl->tm_min>=30&&market_direction!=-2&&fabs(kaicangleixing)!=70)
					||
					(pt_ctrl->tm_hour+8==14&&pt_ctrl->tm_min>=50)
					)
					&&hasChicangIF==-1
					)
				{
					this_pingMode=-3;
					pingcang_record(this_pingMode);
				}
				//反弹平仓
				if(false&&now_is_big_fukui_IF&&pre_Heyueprice<=min_10s_heyueprice+(max_10s_heyueprice-min_10s_heyueprice)*1/2&&hasChicangIF==-1)
				{
					this_pingMode=-20;
					pingcang_record(this_pingMode);
				}
				//新增平仓：震荡市20分钟平，指数上四分位平，爆发平（峰或谷个数加一），评分变化平
				int now_hour=int(pt_ctrl->tm_hour+8);
				int now_minute=int(pt_ctrl->tm_min);
				int now_second=int(pt_ctrl->tm_sec);
				double pingfen_sum_open=open_zhicheng_pingfen_IF+open_paoya_pingfen_IF+open_zhuli_pingfen_IF;
				double pingfen_sum_now=zhichengpingfen+paoyapingfen+zhulipingfen;
				//40分钟后，评分没有有利变化，平
				if(new_minuteIndexPrice.size()-open_newminuteindex_size>=40&&pingfen_sum_now>pingfen_sum_open&&hasChicangIF==-1&&fabs(kaicangleixing)!=50&&true)
					//if(new_minuteIndexPrice.size()-open_newminuteindex_size>=40&&open_price_IF-pre_Heyueprice<-(max_10s_heyueprice-min_10s_heyueprice)/3&&max_10s_heyueprice-min_10s_heyueprice>dingdicha_standard_IF/4)//
				{
					this_pingMode=-5;
					pingcang_record(this_pingMode);
				}
				//上导向平
				if(
					(daoxiang_10s_IF==1&&hasChicangIF==-1&&market_direction!=-2&&true)
					||
					(false&&daoxiang_10s_IF==1&&hasChicangIF==-1&&(kaicangleixing!=30&&kaicangleixing!=-30&&kaicangleixing!=22&&kaicangleixing!=-22&&kaicangleixing!=91&&kaicangleixing!=-91)&&market_direction>0)
					)
				{
					this_pingMode=-10;
					pingcang_record(this_pingMode);
				}
				//动力线走平平仓
				if(false&&DLX_S1_S2_GT6_10s==true&&donglixian_min_i_10s>fenge_num2_10s&&kaicangleixing!=-30&&hasChicangIF==-1)
				{
					this_pingMode=-14;
					pingcang_record(this_pingMode);
				}
				//爆发平						
				if(baofa_ping_10s==-1&&hasChicangIF==-1
					&&(open_price_IF-pre_Heyueprice>dingdicha_standard_IF/4||new_minuteIndexPrice.size()-open_newminuteindex_size>10))
				{
					this_pingMode=-6;
					pingcang_record(this_pingMode);
				}
				//数浪平仓，当前是震荡市极大值增加一个平，当前是单边市极大值增加两个平					
				if(
					(
					hasChicangIF==-1&&(fabs(kaicangleixing)==30||true)&&DLX_S1_S2_GT6_10s&&true&&
					(
					(pingfen_sum_now>=-0.5&&pingfen_sum_now<=pingfen_sum_open&&xunfeng_dlx_zouping_use_di_10s.size()-open_gu_count_IF>=2&&open_price_IF-pre_Heyueprice>(max_heyueprice-min_heyueprice)/4)
					||(pingfen_sum_now>=-1&&pingfen_sum_now<-0.5&&pingfen_sum_now<=pingfen_sum_open&&xunfeng_dlx_zouping_use_di_10s.size()-open_gu_count_IF>=2&&open_price_IF-pre_Heyueprice>(max_heyueprice-min_heyueprice)/3)
					||(pingfen_sum_now<-1&&pingfen_sum_now<=pingfen_sum_open&&xunfeng_dlx_zouping_use_di_10s.size()-open_gu_count_IF>=2&&open_price_IF-pre_Heyueprice>(max_heyueprice-min_heyueprice)/2)
					))
					||
					(true&&hasChicangIF==-1&&(fabs(kaicangleixing)!=30)&&xunfeng_dlx_zouping_use_di_10s.size()-open_gu_count_IF>=4&&open_price_IF-pre_Heyueprice>(max_heyueprice-min_heyueprice)/2)
					)
				{
					this_pingMode=-7;
					pingcang_record(this_pingMode);
				}
				//评分变化平空
				if(false&&pingfen_sum_now>pingfen_sum_open&&hasChicangIF==-1)
				{
					this_pingMode=-8;
					pingcang_record(this_pingMode);
				}
				//成交峰值平空
				if(true&&hasChicangIF==-1)
				{
					//峰值变化不利，并且市场偏多，反弹到峰值和下线之间平
					if(false&&this_chengjiaofengzhi>=open_chengjiaofengzhi_shangxian&&market_direction>0&&pre_Heyueprice<=(this_chengjiaofengzhi+this_chengjiaofengzhi_xiaxian)/2&&kaicangleixing!=10&&kaicangleixing!=-10)
					{
						this_pingMode=-11;
						pingcang_record(this_pingMode);
					}
					//峰值没有不利变化，但市场不倾向于空，下线平仓
					if(false&&this_chengjiaofengzhi<open_chengjiaofengzhi_shangxian&&market_direction>=0&&pre_Heyueprice<=this_chengjiaofengzhi_xiaxian)
					{
						this_pingMode=-12;
						pingcang_record(this_pingMode);
					}
				}
				//背离平空    主力评分不为负，相信底背离
				if(false&&DingDiBeiLi_Capital.back()==-2&&new_minuteZhuLipingfen.back()>=0&&hasChicangIF==-1)
				{
					this_pingMode=-13;
					pingcang_record(this_pingMode);
				}
				//期指抵抗平空  
				if(false&&zhangdiebi-open_zhangdiebi>2&&hasChicangIF==-1)//
				{
					this_pingMode=-24;
					pingcang_record(this_pingMode);
				}
				//坚挺平
				if(true&&fabs(kaicangleixing)==22&&pre_Heyueprice>=max_10s_heyueprice&&new_minuteIndexPrice.size()-open_newminuteindex_size<=20&&hasChicangIF==-1)//
				{
					//先平空
					this_pingMode=-25;
					pingcang_record(this_pingMode);
					is_jiantingpingkong=true;
				}
				//峰值止盈止损
				if(false&&(fabs(kaicangleixing)==50||fabs(kaicangleixing)==51||fabs(kaicangleixing)==52))
				{
					//突破上线 止损
					if(
						(pre_Heyueprice>open_lishi_chengjiaofengzhi_shangxian+dingdicha_standard_IF/3&&market_direction==-2)
						||
						(pre_Heyueprice>open_lishi_chengjiaofengzhi_shangxian+dingdicha_standard_IF/4&&market_direction==-1)
						||
						(pre_Heyueprice>open_lishi_chengjiaofengzhi_shangxian+dingdicha_standard_IF/5&&market_direction==0&&false)
						)
					{
						this_pingMode=-26;
						pingcang_record(this_pingMode);
					}
					//跌破下线 止盈
					if(has_diepo_xiaxian==true&&pre_Heyueprice>open_lishi_chengjiaofengzhi_xiaxian+3&&false)
					{
						this_pingMode=-27;
						pingcang_record(this_pingMode);
					}
				}
			}
			//连到实盘执行
			if(runMode==1)
			{
				if((isJiaogeri==false)||(isJiaogeri==true&&geye_duo_count+geye_kong_count>0))//实盘true  //实盘检查
				{
					if(this_pingMode>0)
					{
						pingduo_keep=true;
					}
					if(this_pingMode<0)
					{
						pingkong_keep=true;
					}
				}

				if(false)//测试盘  //实盘检查
				{
					sun1=sun1+1;
					cout<<"---------------------------sun1: "<<sun1<<endl;
					kaiduo_keep=false;
					kaikong_keep=false;
					pingduo_keep=false;
					pingkong_keep=false;
					
					if (true)
					{
						if( sun1%1000==100)
						{
							kaiduo_keep=true;
						}
						if( sun1%1000==300)
						{
							kaikong_keep=true;
						}
						if( sun1%1000==500)
						{
							pingduo_keep=true;
						}
						if(sun1%1000==700)
						{
							pingkong_keep=true;
						}
					}

					if(duanxianchonglian==true)//CTP断线重连测试
					{
						duanxianchonglian=false;

						kaiduo_keep=true;
						kaikong_keep=true;
						pingduo_keep=true;
						pingkong_keep=true;
					}
				}

				if(true)//实盘true  //实盘检查
				{
					//所有需要下的单，全部保存起来，一个一个下   因为 //可能同时出现多个下单信号  //可能不是同时，但之前的单子还没下完，又来新信号
					if(pingduo_keep==true)//pingduo_keep只存在一次
					{
						pingduo_n=pingduo_n+1;
						my_mutex.lock();
						orders_waiting.push_back(10000+pingduo_n);//1开头  平多
						my_mutex.unlock();
					}
					if(pingkong_keep==true)
					{
						pingkong_n=pingkong_n+1;
						my_mutex.lock();
						orders_waiting.push_back(20000+pingkong_n);//2开头  平空
						my_mutex.unlock();
					}
					if(kaiduo_keep==true)
					{
						kaiduo_n=kaiduo_n+1;
						my_mutex.lock();
						orders_waiting.push_back(30000+kaiduo_n);//3开头  开多                      口头上叫的   pingduo_xiadan_ing这个是真实下单叫的
						my_mutex.unlock();
					}
					if(kaikong_keep==true)
					{
						kaikong_n=kaikong_n+1;
						my_mutex.lock();
						orders_waiting.push_back(40000+kaikong_n);//4开头  开空
						my_mutex.unlock();
					}
					if(pingduo_xiadan_ing==false && pingkong_xiadan_ing==false && kaiduo_xiadan_ing==false && kaikong_xiadan_ing==false)//防止正在下单
					{
						//按顺序 找一个信号 下单进入回调函数内  剩余的单子由回调函数完成
						if(pingduo_keep==true)
						{
							os_chengjiao_check<<"main_id:"<<syscall(__NR_gettid)<<endl;
							chuli_ing=10000+pingduo_n;
							if(geye_duo_count>0 && pingduo_xiadan_ing==false)//有隔夜多，平多
							{
								pingduo_xiadan_ing=true;
								os_chengjiao_check<<sun1<<"    main平多"<<"  ";
								os_chengjiao_check<<"有隔夜多，平多"<<endl;
								SellClose(pUserApi);//卖平  验证ok						
							}
							if(geye_duo_count==0 && kaikong_xiadan_ing ==false && jin_kong_count<5*xiadan_shoushu)//没有隔夜多，开空
							{
								kaikong_xiadan_ing=true;
								os_chengjiao_check<<sun1<<"    main平多"<<"  ";
								os_chengjiao_check<<"没有隔夜多，开空"<<endl;
								SellOpen(pUserApi);//卖开  验证ok						
							}					
						}
						else if(pingkong_keep==true)
						{
							os_chengjiao_check<<"main_id:"<<syscall(__NR_gettid)<<endl;
							chuli_ing=20000+pingkong_n;
							if(geye_kong_count>0 && pingkong_xiadan_ing == false)//有隔夜空，平空
							{
								pingkong_xiadan_ing=true;
								os_chengjiao_check<<sun1<<"    main平空"<<"  ";
								os_chengjiao_check<<"有隔夜空，平空"<<endl;
								BuyClose(pUserApi);//买平  验证ok						
							}
							if(geye_kong_count==0 && kaiduo_xiadan_ing==false && jin_duo_count<5*xiadan_shoushu)//没有隔夜空，开多
							{
								kaiduo_xiadan_ing=true;
								os_chengjiao_check<<sun1<<"    main平空"<<"  ";
								os_chengjiao_check<<"没有隔夜空，开多"<<endl;
								BuyOpen(pUserApi);//买开  验证ok						
							}					
						}
						else if(kaiduo_keep==true)
						{
							os_chengjiao_check<<"main_id:"<<syscall(__NR_gettid)<<endl;
							chuli_ing=30000+kaiduo_n;
							if(geye_kong_count==0 && kaiduo_xiadan_ing == false && jin_duo_count<5*xiadan_shoushu)//没有隔夜空，开多
							{
								kaiduo_xiadan_ing=true;
								os_chengjiao_check<<sun1<<"    main开多"<<"  ";
								os_chengjiao_check<<"没有隔夜空，开多"<<endl;
								BuyOpen(pUserApi);//买开  验证ok												
							}
							if(geye_kong_count>0 && pingkong_xiadan_ing ==false)//有隔夜空，平空
							{
								pingkong_xiadan_ing=true;
								os_chengjiao_check<<sun1<<"    main开多"<<"  ";
								os_chengjiao_check<<"有隔夜空，平空"<<endl;
								BuyClose(pUserApi);//买平  验证ok						
							}					
						}					
						else if(kaikong_keep==true)
						{
							os_chengjiao_check<<"main_id:"<<syscall(__NR_gettid)<<endl;
							chuli_ing=40000+kaikong_n;
							if(geye_duo_count==0 && kaikong_xiadan_ing==false && jin_kong_count<5*xiadan_shoushu)//没有隔夜多，开空
							{
								kaikong_xiadan_ing=true;
								os_chengjiao_check<<sun1<<"    main开空"<<"  ";
								os_chengjiao_check<<"没有隔夜多，开空"<<endl;
								SellOpen(pUserApi);//卖开  验证ok						
							}
							if(geye_duo_count>0 && pingduo_xiadan_ing==false)//有隔夜多，平多
							{
								pingduo_xiadan_ing=true;
								os_chengjiao_check<<sun1<<"    main开空"<<"  ";
								os_chengjiao_check<<"有隔夜多，平多"<<endl;
								SellClose(pUserApi);//卖平  验证ok						
							}					
						}
					}
				}
			}
		}
	}
	if(runMode==1)
	{
		if(pt_ctrl->tm_hour+8>=14&&pt_ctrl->tm_min>=58)//实盘不会出现15:00
		{
			if(real_end==0)
			{
				conclude_onday(-1);
			}
			real_end=1;		
		}
	}

#pragma endregion kaiping_panduan	

	cout<<h<<endl;//0-14400
}
int dataPreProcess(int today,int day_fu1,int day_fu2,int day_fu3,int day_fu4,int day_fu5,int kk,string idxCode,string HeyueTag)
{
	int fetchTime = time2Seconds(today, 0);
	int fetchTime_fu1= time2Seconds(day_fu1, 0);
	int fetchTime_fu2= time2Seconds(day_fu2, 0);
	int fetchTime_fu3= time2Seconds(day_fu3, 0);
	int fetchTime_fu4= time2Seconds(day_fu4, 0);
	int fetchTime_fu5= time2Seconds(day_fu5, 0);
	ave_capital_last5=0.0;

	const char *indexcode=idxCode.c_str();

	//20190430新增  委比等级
	if(runMode==2)
	{
		vector<MutiTypeDataOneDay> VMT1= SyncHistoryData("SH",indexcode,38,fetchTime,fetchTime);//委托额  秒数据
		vWBDJ38=zhuanhuan(VMT1);
		cout<<"weimai38_Fetch ok!"<<endl;
	}
	vector<MutiTypeDataOneDay> VMT1= SyncHistoryData("SH",indexcode,10073,fetchTime,fetchTime);
	vWBDJ10073=zhuanhuan(VMT1);
	cout<<"10073_Fetch ok!"<<endl;

	if(runMode==2)
	{
		//当天指数价格
		cout<<"Start to fetch the data of this day!"<<endl;			
		vector<MutiTypeDataOneDay> VMT= SyncHistoryData("SH",indexcode,45,fetchTime,fetchTime);
		vPrice=zhuanhuan(VMT);
		cout<<"price_Fetch ok!"<<endl;
		//os_synget_check<<"price_Fetch ok!-----------vPrice.size():"<<vPrice.size()<<endl;
	}
	//新增，取前一天指数价格
	vector<MutiTypeDataOneDay> VMT= SyncHistoryData("SH",indexcode,2,fetchTime_fu1,fetchTime_fu1);
	vec_pre_IndexPrice=zhuanhuan(VMT);
	cout<<"pre_process 1 ok!"<<endl;
	//os_synget_check<<"pre_process 1 ok!-----------vec_pre_IndexPrice.size():"<<vec_pre_IndexPrice.size()<<endl;
	if(vec_pre_IndexPrice.size()>0)
	{
		yesterday_shoupanjia_indexPrice=vec_pre_IndexPrice.back().m_fields[0];//昨日指数收盘价
	}
	//新增，取前五天的指数价格,获得最大最小值
	VMT= SyncHistoryData("SH",indexcode,2,fetchTime_fu2,fetchTime_fu2);
	vector<StructDataValue> vIndexPrice_fu2=zhuanhuan(VMT);
	cout<<"pre_process 2 ok!"<<endl;
	//os_synget_check<<"pre_process 2 ok!-----------vIndexPrice_fu2.size():"<<vIndexPrice_fu2.size()<<endl;
	VMT= SyncHistoryData("SH",indexcode,2,fetchTime_fu3,fetchTime_fu3);
	vector<StructDataValue> vIndexPrice_fu3=zhuanhuan(VMT);
	cout<<"pre_process 3 ok!"<<endl;
	//os_synget_check<<"pre_process 3 ok!-----------vIndexPrice_fu3.size():"<<vIndexPrice_fu3.size()<<endl;
	VMT= SyncHistoryData("SH",indexcode,2,fetchTime_fu4,fetchTime_fu4);
	vector<StructDataValue> vIndexPrice_fu4=zhuanhuan(VMT);
	cout<<"pre_process 4 ok!"<<endl;
	//os_synget_check<<"pre_process 4 ok!-----------vIndexPrice_fu4.size():"<<vIndexPrice_fu4.size()<<endl;
	VMT= SyncHistoryData("SH",indexcode,2,fetchTime_fu5,fetchTime_fu5);
	vector<StructDataValue> vIndexPrice_fu5=zhuanhuan(VMT);
	cout<<"pre_process 5 ok!"<<endl;
	//os_synget_check<<"pre_process 5 ok!-----------vIndexPrice_fu5.size():"<<vIndexPrice_fu5.size()<<endl;
	if(!vec_pre_IndexPrice.empty()&&!vIndexPrice_fu2.empty()&&!vIndexPrice_fu3.empty()&&!vIndexPrice_fu4.empty()&&!vIndexPrice_fu5.empty())
	{
		for(int i=0;i<vec_pre_IndexPrice.size();i++)
		{
			if(vec_pre_IndexPrice[i].m_fields[0]>maxPrice_fu1)
				maxPrice_fu1=vec_pre_IndexPrice[i].m_fields[0];
			if(vec_pre_IndexPrice[i].m_fields[0]<minPrice_fu1)
				minPrice_fu1=vec_pre_IndexPrice[i].m_fields[0];

			//当天均线
			if(i==0)
			{
				indexprice_ave_fu1.push_back(vec_pre_IndexPrice[i].m_fields[0]);
			}
			else
			{
				indexprice_ave_fu1.push_back(indexprice_ave_fu1.back()*9/10 + vec_pre_IndexPrice[i].m_fields[0]/10);
			}
		}
		for (int i=0;i<vIndexPrice_fu2.size();i++)
		{
			if(vIndexPrice_fu2[i].m_fields[0]>maxPrice_fu2)
				maxPrice_fu2=vIndexPrice_fu2[i].m_fields[0];
			if(vIndexPrice_fu2[i].m_fields[0]<minPrice_fu2)
				minPrice_fu2=vIndexPrice_fu2[i].m_fields[0];

			//当天均线
			if(i==0)
			{
				indexprice_ave_fu2.push_back(vIndexPrice_fu2[i].m_fields[0]);
			}
			else
			{
				indexprice_ave_fu2.push_back(indexprice_ave_fu2.back()*9/10 + vIndexPrice_fu2[i].m_fields[0]/10);
			}
		}
		for(int i=0;i<vIndexPrice_fu3.size();i++)
		{
			if(vIndexPrice_fu3[i].m_fields[0]>maxPrice_fu3)
				maxPrice_fu3=vIndexPrice_fu3[i].m_fields[0];
			if(vIndexPrice_fu3[i].m_fields[0]<minPrice_fu3)
				minPrice_fu3=vIndexPrice_fu3[i].m_fields[0];

			//当天均线
			if(i==0)
			{
				indexprice_ave_fu3.push_back(vIndexPrice_fu3[i].m_fields[0]);
			}
			else
			{
				indexprice_ave_fu3.push_back(indexprice_ave_fu3.back()*9/10 + vIndexPrice_fu3[i].m_fields[0]/10);
			}
		}
		for (int i=0;i<vIndexPrice_fu4.size();i++)
		{
			if(vIndexPrice_fu4[i].m_fields[0]>maxPrice_fu4)
				maxPrice_fu4=vIndexPrice_fu4[i].m_fields[0];
			if(vIndexPrice_fu4[i].m_fields[0]<minPrice_fu4)
				minPrice_fu4=vIndexPrice_fu4[i].m_fields[0];

			//当天均线
			if(i==0)
			{
				indexprice_ave_fu4.push_back(vIndexPrice_fu4[i].m_fields[0]);
			}
			else
			{
				indexprice_ave_fu4.push_back(indexprice_ave_fu4.back()*9/10 + vIndexPrice_fu4[i].m_fields[0]/10);
			}
		}
		for (int i=0;i<vIndexPrice_fu5.size();i++)
		{
			if(vIndexPrice_fu5[i].m_fields[0]>maxPrice_fu5)
				maxPrice_fu5=vIndexPrice_fu5[i].m_fields[0];
			if(vIndexPrice_fu5[i].m_fields[0]<minPrice_fu5)
				minPrice_fu5=vIndexPrice_fu5[i].m_fields[0];

			//当天均线
			if(i==0)
			{
				indexprice_ave_fu5.push_back(vIndexPrice_fu5[i].m_fields[0]);
			}
			else
			{
				indexprice_ave_fu5.push_back(indexprice_ave_fu5.back()*9/10 + vIndexPrice_fu5[i].m_fields[0]/10);
			}
		}
		five_ok=true;

		//寻找指数三日分时图的最高最低点
		if(true)
		{
			double max_price=-1e15;
			double min_price=1e15;
			if(!vec_pre_IndexPrice.empty()&&!vIndexPrice_fu2.empty()&&!vIndexPrice_fu3.empty())
			{
				for (int i=0;i<vec_pre_IndexPrice.size();i++)
				{
					if(vec_pre_IndexPrice[i].m_fields[0]>max_price)
					{
						max_price=vec_pre_IndexPrice[i].m_fields[0];
					}
					if(vec_pre_IndexPrice[i].m_fields[0]<min_price)
					{
						min_price=vec_pre_IndexPrice[i].m_fields[0];
					}
				}
				for (int i=0;i<vIndexPrice_fu2.size();i++)
				{
					if(vIndexPrice_fu2[i].m_fields[0]>max_price)
					{
						max_price=vIndexPrice_fu2[i].m_fields[0];
					}
					if(vIndexPrice_fu2[i].m_fields[0]<min_price)
					{
						min_price=vIndexPrice_fu2[i].m_fields[0];
					}
				}
				for (int i=0;i<vIndexPrice_fu3.size();i++)
				{
					if(vIndexPrice_fu3[i].m_fields[0]>max_price)
					{
						max_price=vIndexPrice_fu3[i].m_fields[0];
					}
					if(vIndexPrice_fu3[i].m_fields[0]<min_price)
					{
						min_price=vIndexPrice_fu3[i].m_fields[0];
					}
				}
				highIndexprice_3days.push_back(max_price);
				lowIndexprice_3days.push_back(min_price);
			}
		}
	}
	//---------------------------
	//盘面资金 分钟数据
	if(runMode==2)
	{
		VMT= SyncHistoryData("SH",indexcode,25,fetchTime,fetchTime);
		vCapital=zhuanhuan(VMT);
		cout<<"pre_process 6 ok!"<<endl;
	}
	//os_synget_check<<"pre_process 6 ok!-----------vCapital.size():"<<vCapital.size()<<endl;
	VMT= SyncHistoryData("SH",indexcode,25,fetchTime_fu1,fetchTime_fu1);
	vCapital_fu1=zhuanhuan(VMT);
	cout<<"pre_process 7 ok!"<<endl;
	//os_synget_check<<"pre_process 7 ok!-----------vCapital_fu1.size():"<<vCapital_fu1.size()<<endl;
	VMT= SyncHistoryData("SH",indexcode,25,fetchTime_fu2,fetchTime_fu2);
	vCapital_fu2=zhuanhuan(VMT);
	cout<<"pre_process 8 ok!"<<endl;
	//os_synget_check<<"pre_process 8 ok!-----------vCapital_fu2.size():"<<vCapital_fu2.size()<<endl;
	VMT= SyncHistoryData("SH",indexcode,25,fetchTime_fu3,fetchTime_fu3);
	vCapital_fu3=zhuanhuan(VMT);
	cout<<"pre_process 9 ok!"<<endl;
	//os_synget_check<<"pre_process 9 ok!-----------vCapital_fu3.size():"<<vCapital_fu3.size()<<endl;
	VMT= SyncHistoryData("SH",indexcode,25,fetchTime_fu4,fetchTime_fu4);
	vCapital_fu4=zhuanhuan(VMT);
	cout<<"pre_process 10 ok!"<<endl;
	//os_synget_check<<"pre_process 10 ok!-----------vCapital_fu4.size():"<<vCapital_fu4.size()<<endl;
	VMT= SyncHistoryData("SH",indexcode,25,fetchTime_fu5,fetchTime_fu5);
	vCapital_fu5=zhuanhuan(VMT);
	cout<<"pre_process 11 ok!"<<endl;
	//os_synget_check<<"pre_process 11 ok!-----------vCapital_fu5.size():"<<vCapital_fu5.size()<<endl;

	//委托额 分钟数据 过去五天
	VMT= SyncHistoryData("SH",indexcode,44,fetchTime_fu1,fetchTime_fu1);
	vweimaiweimai_fu1=zhuanhuan(VMT);
	cout<<"pre_process 7-1 ok!"<<endl;
	VMT= SyncHistoryData("SH",indexcode,44,fetchTime_fu2,fetchTime_fu2);
	vweimaiweimai_fu2=zhuanhuan(VMT);
	cout<<"pre_process 8-1 ok!"<<endl;
	VMT= SyncHistoryData("SH",indexcode,44,fetchTime_fu3,fetchTime_fu3);
	vweimaiweimai_fu3=zhuanhuan(VMT);
	cout<<"pre_process 9-1 ok!"<<endl;
	VMT= SyncHistoryData("SH",indexcode,44,fetchTime_fu4,fetchTime_fu4);
	vweimaiweimai_fu4=zhuanhuan(VMT);
	cout<<"pre_process 10-1 ok!"<<endl;
	VMT= SyncHistoryData("SH",indexcode,44,fetchTime_fu5,fetchTime_fu5);
	vweimaiweimai_fu5=zhuanhuan(VMT);
	cout<<"pre_process 11-1 ok!"<<endl;
	
	if(runMode==2)
	{
		//当天现货成交额
		VMT= SyncHistoryData("SH",indexcode,96,fetchTime,fetchTime);//2实际上是96的每分钟末尾数据，2是分钟数据，96是秒数据
		vIndexAmount=zhuanhuan(VMT);
		cout<<"pre_process 12 ok!"<<endl;
		//os_synget_check<<"pre_process 12 ok!-----------vIndexAmount.size():"<<vIndexAmount.size()<<endl;
		//当天指数评分-2.5~2.5//主力评分-1.5~1.5//支撑评分-0.5~0.5//抛压评分-0.5~0.5
		VMT= SyncHistoryData("SH",indexcode,231,fetchTime,fetchTime);
		pingfen=zhuanhuan(VMT);
		cout<<"pre_process 13 ok!"<<endl;
		//os_synget_check<<"pre_process 13 ok!-----------pingfen.size():"<<pingfen.size()<<endl;
		VMT= SyncHistoryData("SH","000001",231,fetchTime,fetchTime);
		vpingfen_SH000001=zhuanhuan(VMT);
		cout<<"pre_process 14 ok!"<<endl;
		//os_synget_check<<"pre_process 14 ok!-----------vpingfen_SH000001.size():"<<vpingfen_SH000001.size()<<endl;
		//当天委卖委买额///////////////////////////////////////////////////////////
		VMT= SyncHistoryData("SH",indexcode,44,fetchTime,fetchTime);//分钟数据
		weimaiweimai=zhuanhuan(VMT);
		cout<<"Has got the delegate e!"<<endl;
		//os_synget_check<<"pre_process 14-1 ok!-----------weimaiweimai.size():"<<weimaiweimai.size()<<endl;
		//当天主力等级，需要fetch三个原始数据//////
		//当天指数成交额
		VMT= SyncHistoryData("SH",indexcode,2,fetchTime,fetchTime);//[2]IndexAmount  分钟数据
		Indexchengjiaoe=zhuanhuan(VMT);
		cout<<"pre_process 15 ok!"<<endl;
		//os_synget_check<<"pre_process 15 ok!-----------Indexchengjiaoe.size():"<<Indexchengjiaoe.size()<<endl;
		//当天大内外盘 内盘，先有委买，卖家进攻，以买价成交，反映出手的急切程度；外盘，先有委卖，买家进攻，以卖价成交，反映入手的急切程度
		VMT= SyncHistoryData("SH",indexcode,17,fetchTime,fetchTime);//[5]DaNeiPanAmount [7]DaWaiPanAmount  分钟数据
		DaneipanDawaipan=zhuanhuan(VMT);
		cout<<"pre_process 16 ok!"<<endl;
		//os_synget_check<<"pre_process 16 ok!-----------DaneipanDawaipan.size():"<<DaneipanDawaipan.size()<<endl;
	}
	//移动，不管设定日期是多少，都取到最新的
	VMT= SyncHistoryData("SH",indexcode,10077,fetchTime_fu1,fetchTime_fu1);//日数据，取昨天的[3]MoveAverage [4]MoveStandard
	vMovedata=zhuanhuan(VMT);
	cout<<"pre_process 17 ok!"<<endl;
	//os_synget_check<<"pre_process 17 ok!-----------vMovedata.size():"<<vMovedata.size()<<endl;


	if(runMode==2)
	{
		//前一天成交量最大的合约，作为今天的合约，并使用本合约的价格
		string contractCode=getContract(day_fu1,HeyueTag);
		cout<<"pre_process 18 ok!"<<endl;
		//os_synget_check<<"pre_process 18 ok!"<<endl;
		if(contractCode=="0")
		{
			cout<<"There is no contractCode!"<<endl;
			return -1;
		}
		if(HeyueTag=="IF")
			zhuliheyue_IF.push_back(contractCode);
		//当天合约价格与合约成交量/////////////////////////////////////////////////////////////
		VMT= SyncHistoryData(HeyueTag.c_str(),contractCode.c_str(),20,fetchTime,fetchTime);
		Heyue_Info=zhuanhuan(VMT);
		cout<<"pre_process 19 ok!"<<endl;
		//os_synget_check<<"pre_process 19 ok!-----------Heyue_Info.size():"<<Heyue_Info.size()<<endl;
		cout<<"Has got the contractName of the previous day!"<<kk<<endl;	
		VMT= SyncHistoryData(HeyueTag.c_str(),contractCode.c_str(),18,fetchTime,fetchTime);//前一天的结算价
		vector<StructDataValue> vv1=zhuanhuan(VMT);
		if(!vv1.empty())
		{
			jiesuanjia_IF_fu1=vv1.back().m_fields[0];
			cout<<"pre_process 19-1 ok!"<<endl;
		}
		os_jiesuan_IF_check<<today<<"  "<<contractCode<<"  "<<jiesuanjia_IF_fu1<<endl;
		//指数动力线
		VMT=SyncHistoryData("SH",indexcode,88,fetchTime,fetchTime);  //指数动力线
		vec_donglixian=zhuanhuan(VMT);
		cout<<"pre_process 20 ok!"<<endl;
		//os_synget_check<<"pre_process 20 ok!-----------vec_donglixian.size():"<<vec_donglixian.size()<<endl;
		cout<<"donglixian_Fetch ok!"<<endl;
	}
	//并列界面合约动力等级：(10000*(%1%)/(%2%))/(0.5*(%3%))" fields="0,0,0,1,0,3"
	if(HeyueTag=="IF")
	{
		if(runMode==2)
		{
			VMT=SyncHistoryData("BK","SI0001",232,fetchTime,fetchTime);//[0] SecForceXD 秒数据//看上去像逐秒，实际不是
			vecSecForceXD=zhuanhuan(VMT);
			cout<<"pre_process 21 ok!"<<endl;
		}
		//os_synget_check<<"pre_process 21 ok!-----------vecSecForceXD.size():"<<vecSecForceXD.size()<<endl;
		VMT=SyncHistoryData("BK","SI0001",10087,fetchTime,fetchTime);//[0]  EMACQuantity 日数据   //917个数
		vecEMACQuantity=zhuanhuan(VMT);
		cout<<"pre_process 22 ok!"<<endl;
		//os_synget_check<<"pre_process 22 ok!-----------vecEMACQuantity.size():"<<vecEMACQuantity.size()<<endl;
		VMT=SyncHistoryData("SH","FR0001",10088,fetchTime,fetchTime);//[3] CommonRating 日数据 //917个数
		vecCommonRating=zhuanhuan(VMT);
		cout<<"pre_process 23 ok!"<<endl;
		//os_synget_check<<"pre_process 23 ok!-----------vecCommonRating.size():"<<vecCommonRating.size()<<endl;
	}
	if(HeyueTag=="IC")
	{
		if(runMode==2)
		{
			VMT=SyncHistoryData("BK","SI0003",232,fetchTime,fetchTime);//[0] SecForceXD 秒数据//看上去像逐秒，实际不是
			vecSecForceXD=zhuanhuan(VMT);
		}
		VMT=SyncHistoryData("BK","SI0003",10087,fetchTime,fetchTime);//[0]  EMACQuantity 日数据   //917个数
		vecEMACQuantity=zhuanhuan(VMT);
		VMT=SyncHistoryData("SH","FR0003",10088,fetchTime,fetchTime);//[3] CommonRating 日数据 //917个数
		vecCommonRating=zhuanhuan(VMT);
	}
	if(HeyueTag=="IH")
	{
		if(runMode==2)
		{
			VMT=SyncHistoryData("BK","SI0005",232,fetchTime,fetchTime);//[0] SecForceXD 秒数据//看上去像逐秒，实际不是
			vecSecForceXD=zhuanhuan(VMT);
		}
		VMT=SyncHistoryData("BK","SI0005",10087,fetchTime,fetchTime);//[0]  EMACQuantity 日数据   //917个数
		vecEMACQuantity=zhuanhuan(VMT);
		VMT=SyncHistoryData("SH","FR0005",10088,fetchTime,fetchTime);//[3] CommonRating 日数据 //917个数
		vecCommonRating=zhuanhuan(VMT);
	}
	//计算资金等级所需数据
	VMT= SyncHistoryData("SH",indexcode,10072,fetchTime,fetchTime);//[2][3]日数据
	vPreviousCotDataByDay=zhuanhuan(VMT);
	cout<<"pre_process 24 ok!"<<endl;
	//os_synget_check<<"pre_process 24 ok!-----------vPreviousCotDataByDay.size():"<<vPreviousCotDataByDay.size()<<endl;
	cout<<"all_Fetch ok!"<<endl;

	//将读取到的数据处理成14400数据流--------------------------------------------------------------------------------

	time_t t=0,pre_t=0;
	struct tm *pt;

#pragma region Index_price
	if(!vPrice.empty()&&runMode==2)
	{
		int maxRows=vPrice.size();
		int time=0;
		double price=0.0;
		int interval=0;
		int hour=0; 
		int minute=0; 
		int second=0;
		int pre_hour=0;
		int pre_minute=100;//保证能接收到第一个数
		int pre_second=0;

		for (int r = 0; r < maxRows; r++)
		{
			pre_hour=hour;
			pre_minute=minute;
			pre_second=second;

			//时间列

			t=int(vPrice[r].m_timeTag);
			pt=gmtime(&t);

			hour=int(pt->tm_hour+8);                    //得到小时
			minute=int(pt->tm_min);       //得到分
			second=int(pt->tm_sec);  //得到秒

			price=vPrice[r].m_fields[0];

			//保存原始的时间和指标值///////
			hour_new_original_secondIndexPrice.push_back(hour);
			minute_new_original_secondIndexPrice.push_back(minute);
			second_new_original_secondIndexPrice.push_back(second);	
			new_original_secondIndexPrice.push_back(price);
			if(days==1)
			{
				if(minute==pre_minute)
					os_new_original_secondIndexPrice<<hour<<":"<<minute<<":"<<second<<"  "<<price<<endl;
				else
					os_new_original_secondIndexPrice<<hour<<":"<<minute<<":"<<second<<"  "<<price<<"    Y"<<endl;
			}
			///////////////////////////////

			//中间插0做成14402个标准个数的逐秒值/////////
			interval=hour*3600+minute*60+second-(pre_hour*3600+pre_minute*60+pre_second);			
			for (int i = 1; i <= interval; i++)
			{
				if(i!=interval)
				{
					//上午9:30-11:30
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//比如上次9:33来值，当前9:37又来值。此处9:34~9:36插值

						new_14400_indexpriceTimeflag.push_back(t);
						hour_new_14400_secondIndexPrice.push_back(hour);
						minute_new_14400_secondIndexPrice.push_back(minute);
						second_new_14400_secondIndexPrice.push_back(second);
						new_14400_secondIndexPrice.push_back(0);
					}
					//下午13:00-15:00
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//比如上次13:33来值，当前13:37又来值。此处13:34~13:36插值;

						new_14400_indexpriceTimeflag.push_back(t);
						hour_new_14400_secondIndexPrice.push_back(hour);
						minute_new_14400_secondIndexPrice.push_back(minute);
						second_new_14400_secondIndexPrice.push_back(second);
						new_14400_secondIndexPrice.push_back(0);
					}
				}
				else
				{
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//此处9:37的实际值

						new_14400_indexpriceTimeflag.push_back(t);
						hour_new_14400_secondIndexPrice.push_back(hour);
						minute_new_14400_secondIndexPrice.push_back(minute);
						second_new_14400_secondIndexPrice.push_back(second);
						new_14400_secondIndexPrice.push_back(price);
					}
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//此处13:37的实际值

						new_14400_indexpriceTimeflag.push_back(t);
						hour_new_14400_secondIndexPrice.push_back(hour);
						minute_new_14400_secondIndexPrice.push_back(minute);
						second_new_14400_secondIndexPrice.push_back(second);
						new_14400_secondIndexPrice.push_back(price);
					}
				}
			}
			//以上，14402个值/////////////////////////
		}
		//处理结尾数据不全
		int lost=0;
		int last_second=new_14400_indexpriceTimeflag.back();
		double last_price=new_14400_secondIndexPrice.back();
		if(new_14400_secondIndexPrice.size()<14400)
		{
			lost=14400-new_14400_secondIndexPrice.size();
			for (int j=1;j<=lost;j++)
			{
				new_14400_indexpriceTimeflag.push_back(last_second);
				new_14400_secondIndexPrice.push_back(last_price);
				hour_new_14400_secondIndexPrice.push_back(hour);
				minute_new_14400_secondIndexPrice.push_back(minute);
				second_new_14400_secondIndexPrice.push_back(second);
			}
		}
		if(days==1)
		{
			for(int m=0;m<new_14400_secondIndexPrice.size();m++)
			{
				os_new_14400_secondIndexPrice<<new_14400_indexpriceTimeflag[m]<<"  "
					<<hour_new_14400_secondIndexPrice[m]<<":"
					<<minute_new_14400_secondIndexPrice[m]<<":"
					<<second_new_14400_secondIndexPrice[m]<<"  "
					<<new_14400_secondIndexPrice[m]<<endl;
			}
		}
	}
	cout<<"--------------1"<<endl;
#pragma endregion Index_price	

#pragma region Heyue_price_amount
	if(!Heyue_Info.empty()&&runMode==2)
	{
		int maxRows=Heyue_Info.size();
		int time=0;
		double price=0.0;
		int ifamount=0;
		int interval=0;
		int hour=0; 
		int minute=0; 
		int second=0;
		int pre_ifamount=0;
		int pre_hour=0;
		int pre_minute=0;
		int pre_second=0;

		for (int r = 0; r < maxRows; r++)
		{
			pre_hour=hour;
			pre_minute=minute;
			pre_second=second;
			//时间列
			t=int(Heyue_Info[r].m_timeTag);
			pt=gmtime(&t);

			//原始时间和指标数值//////////////
			price=Heyue_Info[r].m_fields[0];
			ifamount=Heyue_Info[r].m_fields[1];
			hour=int(pt->tm_hour+8);  //得到小时
			minute=int(pt->tm_min);       //得到分
			second=int(pt->tm_sec);  //得到秒

			hour_new_original_secondHeyuePrice.push_back(hour);
			minute_new_original_secondHeyuePrice.push_back(minute);
			second_new_original_secondHeyuePrice.push_back(second);
			new_original_secondHeyuePrice.push_back(price);
			new_original_secondHeyueAmount.push_back(ifamount);
			if(days==1)
			{
				os_new_original_secondHeyuePrice<<hour<<":"<<minute<<":"<<second<<"  "<<price<<"  "<<ifamount<<endl;
			}
			//////////////////////////////////

			//中间插0做成14402个标准个数的逐秒值/////////
			interval=hour*3600+minute*60+second-(pre_hour*3600+pre_minute*60+pre_second);
			for (int i = 1; i <= interval; i++)
			{
				if(i!=interval)
				{
					//上午9:30-11:30
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//比如上次9:33来值，当前9:37又来值。此处9:34~9:36插值
						new_14400_heyuepriceTimeflag.push_back(t);
						hour_new_14400_secondHeyuePrice.push_back(hour);
						minute_new_14400_secondHeyuePrice.push_back(minute);
						second_new_14400_secondHeyuePrice.push_back(second);
						new_14400_secondHeyuePrice.push_back(0);
						new_14400_secondHeyueAmount.push_back(0);

					}
					//下午13:00-15:00
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//比如上次13:33来值，当前13:37又来值。此处13:34~13:36插值
						new_14400_heyuepriceTimeflag.push_back(t);
						hour_new_14400_secondHeyuePrice.push_back(hour);
						minute_new_14400_secondHeyuePrice.push_back(minute);
						second_new_14400_secondHeyuePrice.push_back(second);
						new_14400_secondHeyuePrice.push_back(0);
						new_14400_secondHeyueAmount.push_back(0);
					}
				}
				else
				{

					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//此处9:37的实际值
						new_14400_heyuepriceTimeflag.push_back(t);
						hour_new_14400_secondHeyuePrice.push_back(hour);
						minute_new_14400_secondHeyuePrice.push_back(minute);
						second_new_14400_secondHeyuePrice.push_back(second);
						new_14400_secondHeyuePrice.push_back(price);
						new_14400_secondHeyueAmount.push_back(ifamount);
					}
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//此处13:37的实际值
						new_14400_heyuepriceTimeflag.push_back(t);
						hour_new_14400_secondHeyuePrice.push_back(hour);
						minute_new_14400_secondHeyuePrice.push_back(minute);
						second_new_14400_secondHeyuePrice.push_back(second);
						new_14400_secondHeyuePrice.push_back(price);
						new_14400_secondHeyueAmount.push_back(ifamount);
					}
				}
			}
		}
		//处理结尾数据不全
		int lost=0;
		int last_second=new_14400_heyuepriceTimeflag.back();
		double last_price=new_14400_secondHeyuePrice.back();;
		if(new_14400_secondHeyuePrice.size()<14400)
		{
			lost=14400-new_14400_secondHeyuePrice.size();
			for (int j=1;j<=lost;j++)
			{
				new_14400_heyuepriceTimeflag.push_back(last_second);
				hour_new_14400_secondHeyuePrice.push_back(hour);
				minute_new_14400_secondHeyuePrice.push_back(minute);
				second_new_14400_secondHeyuePrice.push_back(second);
				new_14400_secondHeyuePrice.push_back(price);
				new_14400_secondHeyueAmount.push_back(ifamount);
			}
		}
	}
	cout<<"--------------2"<<endl;
#pragma endregion Heyue_price_amount
	
#pragma region Index_pingfen
	if(!pingfen.empty()&&runMode==2)
	{
		int maxRows=pingfen.size();
		int time=0;
		double fenshu1=0.0;
		double fenshu2=0.0;
		double fenshu3=0.0;
		int interval=0;
		int hour=0; 
		int minute=0; 
		int second=0;
		double pre_fenshu1=0.0;
		double pre_fenshu2=0.0;
		double pre_fenshu3=0.0;
		int pre_hour=0;
		int pre_minute=0;
		int pre_second=0;

		for (int r = 0; r < maxRows; r++)
		{
			pre_fenshu1=fenshu1;
			pre_fenshu2=fenshu2;
			pre_fenshu3=fenshu3;
			pre_hour=hour;
			pre_minute=minute;
			pre_second=second;

			//时间列
			t=int(pingfen[r].m_timeTag);
			pt=gmtime(&t);

			//原始时间和指标数值//////////////
			fenshu1=pingfen[r].m_fields[2];
			fenshu2=pingfen[r].m_fields[1];
			fenshu3=pingfen[r].m_fields[0];
			hour=int(pt->tm_hour+8);  //得到小时
			minute=int(pt->tm_min);       //得到分
			second=int(pt->tm_sec);  //得到秒

			hour_new_original_secondPingfen.push_back(hour);
			minute_new_original_secondPingfen.push_back(minute);
			second_new_original_secondPingfen.push_back(second);
			new_original_secondPingfen1.push_back(fenshu1);
			new_original_secondPingfen2.push_back(fenshu2);
			new_original_secondPingfen3.push_back(fenshu3);
			if(days==1)
			{
				os_new_original_secondPingfen<<hour<<":"<<minute<<":"<<second<<"  "<<fenshu1<<"  "<<fenshu2<<"  "<<fenshu3<<endl;
			}
			///////////////////////////////

			//中间插0做成14402个标准个数的逐秒值/////////
			interval=hour*3600+minute*60+second-(pre_hour*3600+pre_minute*60+pre_second);			
			for (int i = 1; i <= interval; i++)
			{
				if(i!=interval)
				{
					//上午9:30-11:30
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//比如上次9:33来值，当前9:37又来值。此处9:34~9:36插值

						new_14400_pinfenTimeflag.push_back(t);
						hour_new_14400_secondPingfen.push_back(hour);
						minute_new_14400_secondPingfen.push_back(minute);
						second_new_14400_secondPingfen.push_back(second);
						new_14400_secondZhuLipingfen.push_back(-5);
						new_14400_secondZhiChengpingfen.push_back(-5);
						new_14400_secondPaoYapingfen.push_back(-5);
					}
					//下午13:00-15:00
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//比如上次13:33来值，当前13:37又来值。此处13:34~13:36插值;

						new_14400_pinfenTimeflag.push_back(t);
						hour_new_14400_secondPingfen.push_back(hour);
						minute_new_14400_secondPingfen.push_back(minute);
						second_new_14400_secondPingfen.push_back(second);
						new_14400_secondZhuLipingfen.push_back(-5);
						new_14400_secondZhiChengpingfen.push_back(-5);
						new_14400_secondPaoYapingfen.push_back(-5);
					}
				}
				else
				{
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//此处9:37的实际值

						new_14400_pinfenTimeflag.push_back(t);
						hour_new_14400_secondPingfen.push_back(hour);
						minute_new_14400_secondPingfen.push_back(minute);
						second_new_14400_secondPingfen.push_back(second);
						new_14400_secondZhuLipingfen.push_back(fenshu1);
						new_14400_secondZhiChengpingfen.push_back(fenshu2);
						new_14400_secondPaoYapingfen.push_back(fenshu3);
					}
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//此处13:37的实际值

						new_14400_pinfenTimeflag.push_back(t);
						hour_new_14400_secondPingfen.push_back(hour);
						minute_new_14400_secondPingfen.push_back(minute);
						second_new_14400_secondPingfen.push_back(second);
						new_14400_secondZhuLipingfen.push_back(fenshu1);
						new_14400_secondZhiChengpingfen.push_back(fenshu2);
						new_14400_secondPaoYapingfen.push_back(fenshu3);
					}
				}
			}
			//以上，14402个值/////////////////////////
		}
		//处理结尾数据不全
		int lost=0;
		int last_second=new_14400_pinfenTimeflag.back();
		double last_zhulifen=new_14400_secondZhuLipingfen.back();
		double last_zhichengfen=new_14400_secondZhiChengpingfen.back();
		double last_paoyafen=new_14400_secondPaoYapingfen.back();
		if(new_14400_secondZhuLipingfen.size()<14400)
		{
			lost=14400-new_14400_secondZhuLipingfen.size();
			for (int j=1;j<=lost;j++)
			{
				new_14400_pinfenTimeflag.push_back(last_second);
				hour_new_14400_secondPingfen.push_back(hour);
				minute_new_14400_secondPingfen.push_back(minute);
				second_new_14400_secondPingfen.push_back(second);
				new_14400_secondZhuLipingfen.push_back(last_zhulifen);
				new_14400_secondZhiChengpingfen.push_back(last_zhichengfen);
				new_14400_secondPaoYapingfen.push_back(last_paoyafen);
			}
		}
	}
	//
#pragma endregion Index_pingfen
	
#pragma region Index_pingfen_SH000001
	if(!vpingfen_SH000001.empty()&&runMode==2)
	{
		int maxRows=vpingfen_SH000001.size();
		int time=0;
		double fenshu1=0.0;
		double fenshu2=0.0;
		double fenshu3=0.0;
		int interval=0;
		int hour=0; 
		int minute=0; 
		int second=0;
		double pre_fenshu1=0.0;
		double pre_fenshu2=0.0;
		double pre_fenshu3=0.0;
		int pre_hour=0;
		int pre_minute=0;
		int pre_second=0;

		for (int r = 0; r < maxRows; r++)
		{
			pre_fenshu1=fenshu1;
			pre_fenshu2=fenshu2;
			pre_fenshu3=fenshu3;
			pre_hour=hour;
			pre_minute=minute;
			pre_second=second;

			//时间列
			t=int(vpingfen_SH000001[r].m_timeTag);
			pt=gmtime(&t);

			//原始时间和指标数值//////////////
			fenshu1=vpingfen_SH000001[r].m_fields[2];
			fenshu2=vpingfen_SH000001[r].m_fields[1];
			fenshu3=vpingfen_SH000001[r].m_fields[0];
			hour=int(pt->tm_hour+8);  //得到小时
			minute=int(pt->tm_min);       //得到分
			second=int(pt->tm_sec);  //得到秒

			hour_new_original_secondPingfen_SH000001.push_back(hour);
			minute_new_original_secondPingfen_SH000001.push_back(minute);
			second_new_original_secondPingfen_SH000001.push_back(second);
			new_original_secondPingfen1_SH000001.push_back(fenshu1);
			new_original_secondPingfen2_SH000001.push_back(fenshu2);
			new_original_secondPingfen3_SH000001.push_back(fenshu3);
			if(days==1)
			{
				os_new_original_secondPingfen_SH000001<<hour<<":"<<minute<<":"<<second<<"  "<<fenshu1<<"  "<<fenshu2<<"  "<<fenshu3<<endl;
			}
			///////////////////////////////

			//中间插0做成14402个标准个数的逐秒值/////////
			interval=hour*3600+minute*60+second-(pre_hour*3600+pre_minute*60+pre_second);			
			for (int i = 1; i <= interval; i++)
			{
				if(i!=interval)
				{
					//上午9:30-11:30
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//比如上次9:33来值，当前9:37又来值。此处9:34~9:36插值

						new_14400_pinfenTimeflag_SH000001.push_back(t);
						hour_new_14400_secondPingfen_SH000001.push_back(hour);
						minute_new_14400_secondPingfen_SH000001.push_back(minute);
						second_new_14400_secondPingfen_SH000001.push_back(second);
						new_14400_secondZhuLipingfen_SH000001.push_back(-5);
						new_14400_secondZhiChengpingfen_SH000001.push_back(-5);
						new_14400_secondPaoYapingfen_SH000001.push_back(-5);
					}
					//下午13:00-15:00
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//比如上次13:33来值，当前13:37又来值。此处13:34~13:36插值;

						new_14400_pinfenTimeflag_SH000001.push_back(t);
						hour_new_14400_secondPingfen_SH000001.push_back(hour);
						minute_new_14400_secondPingfen_SH000001.push_back(minute);
						second_new_14400_secondPingfen_SH000001.push_back(second);
						new_14400_secondZhuLipingfen_SH000001.push_back(-5);
						new_14400_secondZhiChengpingfen_SH000001.push_back(-5);
						new_14400_secondPaoYapingfen_SH000001.push_back(-5);
					}
				}
				else
				{
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//此处9:37的实际值

						new_14400_pinfenTimeflag_SH000001.push_back(t);
						hour_new_14400_secondPingfen_SH000001.push_back(hour);
						minute_new_14400_secondPingfen_SH000001.push_back(minute);
						second_new_14400_secondPingfen_SH000001.push_back(second);
						new_14400_secondZhuLipingfen_SH000001.push_back(fenshu1);
						new_14400_secondZhiChengpingfen_SH000001.push_back(fenshu2);
						new_14400_secondPaoYapingfen_SH000001.push_back(fenshu3);
					}
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//此处13:37的实际值

						new_14400_pinfenTimeflag_SH000001.push_back(t);
						hour_new_14400_secondPingfen_SH000001.push_back(hour);
						minute_new_14400_secondPingfen_SH000001.push_back(minute);
						second_new_14400_secondPingfen_SH000001.push_back(second);
						new_14400_secondZhuLipingfen_SH000001.push_back(fenshu1);
						new_14400_secondZhiChengpingfen_SH000001.push_back(fenshu2);
						new_14400_secondPaoYapingfen_SH000001.push_back(fenshu3);
					}
				}
			}
			//以上，14402个值/////////////////////////
		}
		//处理结尾数据不全
		int lost=0;
		int last_second=new_14400_pinfenTimeflag_SH000001.back();
		double last_zhulifen=new_14400_secondZhuLipingfen_SH000001.back();
		double last_zhichengfen=new_14400_secondZhiChengpingfen_SH000001.back();
		double last_paoyafen=new_14400_secondPaoYapingfen_SH000001.back();
		if(new_14400_secondZhuLipingfen_SH000001.size()<14400)
		{
			lost=14400-new_14400_secondZhuLipingfen_SH000001.size();
			for (int j=1;j<=lost;j++)
			{
				new_14400_pinfenTimeflag_SH000001.push_back(last_second);
				hour_new_14400_secondPingfen_SH000001.push_back(hour);
				minute_new_14400_secondPingfen_SH000001.push_back(minute);
				second_new_14400_secondPingfen_SH000001.push_back(second);
				new_14400_secondZhuLipingfen_SH000001.push_back(last_zhulifen);
				new_14400_secondZhiChengpingfen_SH000001.push_back(last_zhichengfen);
				new_14400_secondPaoYapingfen_SH000001.push_back(last_paoyafen);
			}
		}
	}
	//
#pragma endregion Index_pingfen_SH000001

#pragma region Index_weimaiweimai
	if(!weimaiweimai.empty()&&runMode==2)
	{
		int maxRows=weimaiweimai.size();
		int time=0;
		double mairu=0.0;
		double maichu=0.0;
		int interval=0;
		int hour=0; 
		int minute=0; 
		int second=0;
		double pre_mairu=0.0;
		double pre_maichu=0.0;
		int pre_hour=0;
		int pre_minute=0;
		int pre_second=0;

		for (int r = 0; r < maxRows; r++)
		{
			pre_mairu=mairu;
			pre_maichu=maichu;
			pre_hour=hour;
			pre_minute=minute;
			pre_second=second;

			//时间列
			t=int(weimaiweimai[r].m_timeTag);
			pt=gmtime(&t);

			//原始时间和指标数值//////////////
			mairu=weimaiweimai[r].m_fields[0];
			maichu=weimaiweimai[r].m_fields[1];
			hour=int(pt->tm_hour+8);  //得到小时
			minute=int(pt->tm_min);       //得到分
			second=int(pt->tm_sec);  //得到秒

			hour_new_original_secondWeimaiWeimai.push_back(hour);
			minute_new_original_secondWeimaiWeimai.push_back(minute);
			second_new_original_secondWeimaiWeimai.push_back(second);
			new_original_secondWeimairu.push_back(mairu);
			new_original_secondWeimaichu.push_back(maichu);
			if(days==1)
			{
				os_new_original_secondWeimaiWeimai<<hour<<":"<<minute<<":"<<second<<"  "<<mairu<<"  "<<maichu<<endl;
			}
			///////////////////////////////////

			//中间插0做成14402个标准个数的逐秒值/////////
			interval=hour*3600+minute*60+second-(pre_hour*3600+pre_minute*60+pre_second);
			for (int i = 1; i <= interval; i++)
			{
				if(i!=interval)
				{
					//上午9:30-11:30
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//比如上次9:33来值，当前9:37又来值。此处9:34~9:36插值

						new_14400_weimaiweimaiTimeflag.push_back(t);
						hour_new_14400_secondWeimaiWeimai.push_back(hour);
						minute_new_14400_secondWeimaiWeimai.push_back(minute);
						second_new_14400_secondWeimaiWeimai.push_back(second);
						new_14400_secondweimairu.push_back(0);
						new_14400_secondweimaichu.push_back(0);
					}
					//下午13:00-15:00
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//比如上次13:33来值，当前13:37又来值。此处13:34~13:36插值
						new_14400_weimaiweimaiTimeflag.push_back(t);
						hour_new_14400_secondWeimaiWeimai.push_back(hour);
						minute_new_14400_secondWeimaiWeimai.push_back(minute);
						second_new_14400_secondWeimaiWeimai.push_back(second);
						new_14400_secondweimairu.push_back(0);
						new_14400_secondweimaichu.push_back(0);
					}
				}
				else
				{

					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//此处9:37的实际值
						new_14400_weimaiweimaiTimeflag.push_back(t);
						hour_new_14400_secondWeimaiWeimai.push_back(hour);
						minute_new_14400_secondWeimaiWeimai.push_back(minute);
						second_new_14400_secondWeimaiWeimai.push_back(second);
						new_14400_secondweimairu.push_back(mairu);
						new_14400_secondweimaichu.push_back(maichu);
					}
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//此处13:37的实际值
						new_14400_weimaiweimaiTimeflag.push_back(t);
						hour_new_14400_secondWeimaiWeimai.push_back(hour);
						minute_new_14400_secondWeimaiWeimai.push_back(minute);
						second_new_14400_secondWeimaiWeimai.push_back(second);
						new_14400_secondweimairu.push_back(mairu);
						new_14400_secondweimaichu.push_back(maichu);
					}
				}
			}
		}
		//处理结尾数据不全
		int lost=0;
		int last_second=new_14400_weimaiweimaiTimeflag.back();
		double last_mairu=new_14400_secondweimairu.back();
		double last_maichu=new_14400_secondweimaichu.back();

		if(new_14400_weimaiweimaiTimeflag.size()<14400)
		{
			lost=14400-new_14400_weimaiweimaiTimeflag.size();
			for (int j=1;j<=lost;j++)
			{
				new_14400_weimaiweimaiTimeflag.push_back(last_second);
				hour_new_14400_secondWeimaiWeimai.push_back(hour);
				minute_new_14400_secondWeimaiWeimai.push_back(minute);
				second_new_14400_secondWeimaiWeimai.push_back(second);
				new_14400_secondweimairu.push_back(last_mairu);
				new_14400_secondweimaichu.push_back(last_maichu);
			}
		}
	}
	//
#pragma endregion Index_weimaiweimai
	
#pragma region Index_eliang
	if(!vIndexAmount.empty()&&runMode==2)
	{
		int maxRows=vIndexAmount.size();
		int time=0;
		double amount=0.0;
		int interval=0;
		int hour=0; 
		int minute=0; 
		int second=0;
		double pre_amount=0.0;
		int pre_hour=0;
		int pre_minute=0;
		int pre_second=0;
		double chengjiaoliang=0.0;
		double pre_chengjiaoliang=0.0;

		for (int r = 0; r < maxRows; r++)
		{
			pre_amount=amount;
			pre_chengjiaoliang=chengjiaoliang;
			pre_hour=hour;
			pre_minute=minute;
			pre_second=second;

			//时间列

			t=int(vIndexAmount[r].m_timeTag);
			pt=gmtime(&t);

			//原始时间和指标数值///////////////
			hour=int(pt->tm_hour+8); //得到小时
			minute=int(pt->tm_min);  //得到分
			second=int(pt->tm_sec);  //得到秒
			amount=vIndexAmount[r].m_fields[1];
			chengjiaoliang=vIndexAmount[r].m_fields[0];

			hour_new_original_secondELiang.push_back(hour);
			minute_new_original_secondELiang.push_back(minute);
			second_new_original_secondELiang.push_back(second);
			new_original_secondE.push_back(amount);
			new_original_secondLiang.push_back(chengjiaoliang);
			if(days==1)
			{
				os_new_original_secondELiang<<hour<<":"<<minute<<":"<<second<<"  "<<amount<<"  "<<chengjiaoliang<<endl;
			}
			///////////////////////////////////

			//中间插0做成14402个标准个数的逐秒值/////////
			interval=hour*3600+minute*60+second-(pre_hour*3600+pre_minute*60+pre_second);
			for (int i = 1; i <= interval; i++)
			{
				if(i!=interval)
				{
					//上午9:30-11:30
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//比如上次9:33来值，当前9:37又来值。此处9:34~9:36插值

						new_14400_ELiangTimeflag.push_back(t);
						hour_new_14400_secondELiang.push_back(hour);
						minute_new_14400_secondELiang.push_back(minute);
						second_new_14400_secondELiang.push_back(second);
						new_14400_secondE.push_back(0);
						new_14400_secondLiang.push_back(0);
					}
					//下午13:00-15:00
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//比如上次13:33来值，当前13:37又来值。此处13:34~13:36插值
						new_14400_ELiangTimeflag.push_back(t);
						hour_new_14400_secondELiang.push_back(hour);
						minute_new_14400_secondELiang.push_back(minute);
						second_new_14400_secondELiang.push_back(second);
						new_14400_secondE.push_back(0);
						new_14400_secondLiang.push_back(0);
					}
				}
				else
				{

					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//此处9:37的实际值
						new_14400_ELiangTimeflag.push_back(t);
						hour_new_14400_secondELiang.push_back(hour);
						minute_new_14400_secondELiang.push_back(minute);
						second_new_14400_secondELiang.push_back(second);
						new_14400_secondE.push_back(amount);
						new_14400_secondLiang.push_back(chengjiaoliang);
					}
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//此处13:37的实际值
						new_14400_ELiangTimeflag.push_back(t);
						hour_new_14400_secondELiang.push_back(hour);
						minute_new_14400_secondELiang.push_back(minute);
						second_new_14400_secondELiang.push_back(second);
						new_14400_secondE.push_back(amount);
						new_14400_secondLiang.push_back(chengjiaoliang);
					}
				}
			}
		}

		//处理结尾数据不全
		int lost=0;
		int last_second=new_14400_ELiangTimeflag.back();
		double last_amount=new_14400_secondE.back();
		double last_chengjiaoliang=new_14400_secondLiang.back();

		if(new_14400_ELiangTimeflag.size()<14400)
		{
			lost=14400-new_14400_ELiangTimeflag.size();
			for (int j=1;j<=lost;j++)
			{
				new_14400_ELiangTimeflag.push_back(last_second);
				hour_new_14400_secondELiang.push_back(hour);
				minute_new_14400_secondELiang.push_back(minute);
				second_new_14400_secondELiang.push_back(second);
				new_14400_secondE.push_back(last_amount);
				new_14400_secondLiang.push_back(last_chengjiaoliang);
			}
		}
		if(days==1)
		{
			for(int m=0;m<new_14400_ELiangTimeflag.size();m++)
			{
				os_new_14400_secondELiang<<new_14400_ELiangTimeflag[m]<<"  "
					<<hour_new_14400_secondELiang[m]<<":"
					<<minute_new_14400_secondELiang[m]<<":"
					<<second_new_14400_secondELiang[m]<<"  "
					<<new_14400_secondE[m]<<"  "
					<<new_14400_secondLiang[m]<<endl;
			}
		}
	}
	cout<<"--------------3"<<endl;
#pragma endregion Index_eliang
	
	//---------------------------------------------------------------------
#pragma region Index_chengjiaoe
	if(!Indexchengjiaoe.empty()&&runMode==2)  //现货成交额，用于计算主力等级
	{
		int maxRows=Indexchengjiaoe.size();
		int time=0;
		double indexE=0.0;
		int interval=0;
		int hour=0; 
		int minute=0; 
		int second=0;
		double pre_indexE=0.0;
		int pre_hour=0;
		int pre_minute=100;//保证能接收到第一个数
		int pre_second=0;

		for (int r = 0; r < maxRows; r++)
		{
			pre_indexE=indexE;
			pre_hour=hour;
			pre_minute=minute;
			pre_second=second;

			//时间列

			t=int(Indexchengjiaoe[r].m_timeTag);
			pt=gmtime(&t);

			//指数价格列
			//price=vPrice[r].m_fields[0];

			hour=int(pt->tm_hour+8);                    //得到小时
			minute=int(pt->tm_min);       //得到分
			second=int(pt->tm_sec);  //得到秒

			indexE=Indexchengjiaoe[r].m_fields[2];

			//保存原始的时间和指标值///////
			hour_new_original_secondZLDJe.push_back(hour);
			minute_new_original_secondZLDJe.push_back(minute);
			second_new_original_secondZLDJe.push_back(second);	
			new_original_secondZLDJe.push_back(indexE);
			if(days==1)
			{
				if(minute==pre_minute)
					os_new_original_secondZLDJe<<hour<<":"<<minute<<":"<<second<<"  "<<indexE<<endl;
				else
					os_new_original_secondZLDJe<<hour<<":"<<minute<<":"<<second<<"  "<<indexE<<"    Y"<<endl;
			}
			///////////////////////////////

			//中间插0做成14402个标准个数的逐秒值/////////
			interval=hour*3600+minute*60+second-(pre_hour*3600+pre_minute*60+pre_second);			
			for (int i = 1; i <= interval; i++)
			{
				if(i!=interval)
				{
					//上午9:30-11:30
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//比如上次9:33来值，当前9:37又来值。此处9:34~9:36插值

						new_14400_ZLDJeTimeFlag.push_back(t);
						hour_new_14400_secondZLDJe.push_back(hour);
						minute_new_14400_secondZLDJe.push_back(minute);
						second_new_14400_secondZLDJe.push_back(second);
						new_14400_secondZLDJe.push_back(0);
					}
					//下午13:00-15:00
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//比如上次13:33来值，当前13:37又来值。此处13:34~13:36插值;

						new_14400_ZLDJeTimeFlag.push_back(t);
						hour_new_14400_secondZLDJe.push_back(hour);
						minute_new_14400_secondZLDJe.push_back(minute);
						second_new_14400_secondZLDJe.push_back(second);
						new_14400_secondZLDJe.push_back(0);
					}
				}
				else
				{
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//此处9:37的实际值

						new_14400_ZLDJeTimeFlag.push_back(t);
						hour_new_14400_secondZLDJe.push_back(hour);
						minute_new_14400_secondZLDJe.push_back(minute);
						second_new_14400_secondZLDJe.push_back(second);
						new_14400_secondZLDJe.push_back(indexE);
					}
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//此处13:37的实际值

						new_14400_ZLDJeTimeFlag.push_back(t);
						hour_new_14400_secondZLDJe.push_back(hour);
						minute_new_14400_secondZLDJe.push_back(minute);
						second_new_14400_secondZLDJe.push_back(second);
						new_14400_secondZLDJe.push_back(indexE);
					}
				}
			}
			//以上，14402个值/////////////////////////
		}
		//处理结尾数据不全
		int lost=0;
		int last_second=new_14400_ZLDJeTimeFlag.back();
		double last_ZLDJe=new_14400_secondZLDJe.back();
		if(new_14400_secondZLDJe.size()<14400)
		{
			lost=14400-new_14400_secondZLDJe.size();
			for (int j=1;j<=lost;j++)
			{
				new_14400_ZLDJeTimeFlag.push_back(last_second);
				new_14400_secondZLDJe.push_back(last_ZLDJe);
				hour_new_14400_secondZLDJe.push_back(hour);
				minute_new_14400_secondZLDJe.push_back(minute);
				second_new_14400_secondZLDJe.push_back(second);
			}
		}
		if(days==1)
		{
			for(int m=0;m<new_14400_secondZLDJe.size();m++)
			{
				os_new_14400_secondZLDJe<<new_14400_ZLDJeTimeFlag[m]<<"  "
					<<hour_new_14400_secondZLDJe[m]<<":"
					<<minute_new_14400_secondZLDJe[m]<<":"
					<<second_new_14400_secondZLDJe[m]<<"  "
					<<new_14400_secondZLDJe[m]<<endl;
			}
		}
	}
	cout<<"--------------4"<<endl;
#pragma endregion Index_chengjiaoe
	
#pragma region DaNeiWaiwan
	if(!DaneipanDawaipan.empty()&&runMode==2)  //大内外盘额，用于计算主力等级
	{
		int maxRows=DaneipanDawaipan.size();
		int time=0;
		double daneiE=0.0;
		int interval=0;
		int hour=0; 
		int minute=0; 
		int second=0;
		double pre_daneiE=0.0;
		int pre_hour=0;
		int pre_minute=0;
		int pre_second=0;
		//新增
		double dawaiE=0.0;
		double pre_dawaiE=0.0;

		for (int r = 0; r < maxRows; r++)
		{
			pre_dawaiE=dawaiE;
			pre_daneiE=daneiE;
			pre_hour=hour;
			pre_minute=minute;
			pre_second=second;

			//时间列

			t=int(DaneipanDawaipan[r].m_timeTag);
			pt=gmtime(&t);

			//原始时间和指标数值///////////////
			hour=int(pt->tm_hour+8); //得到小时
			minute=int(pt->tm_min);  //得到分
			second=int(pt->tm_sec);  //得到秒
			daneiE=DaneipanDawaipan[r].m_fields[5];
			dawaiE=DaneipanDawaipan[r].m_fields[7];

			hour_new_original_secondDaNeiWaie.push_back(hour);
			minute_new_original_secondDaNeiWaie.push_back(minute);
			second_new_original_secondDaNeiWaie.push_back(second);
			new_original_secondDaNeie.push_back(daneiE);
			new_original_secondDaWaie.push_back(dawaiE);
			if(days==1)
			{
				os_new_original_secondDaNeiWaie<<hour<<":"<<minute<<":"<<second<<"  "<<daneiE<<"  "<<dawaiE<<endl;
			}
			///////////////////////////////////

			//中间插0做成14402个标准个数的逐秒值/////////
			interval=hour*3600+minute*60+second-(pre_hour*3600+pre_minute*60+pre_second);
			for (int i = 1; i <= interval; i++)
			{
				if(i!=interval)
				{
					//上午9:30-11:30
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//比如上次9:33来值，当前9:37又来值。此处9:34~9:36插值

						new_14400_DaNeiWaieTimeflag.push_back(t);
						hour_new_14400_secondDaNeiWaie.push_back(hour);
						minute_new_14400_secondDaNeiWaie.push_back(minute);
						second_new_14400_secondDaNeiWaie.push_back(second);
						new_14400_secondDaNeie.push_back(0);
						new_14400_secondDaWaie.push_back(0);
					}
					//下午13:00-15:00
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//比如上次13:33来值，当前13:37又来值。此处13:34~13:36插值
						new_14400_DaNeiWaieTimeflag.push_back(t);
						hour_new_14400_secondDaNeiWaie.push_back(hour);
						minute_new_14400_secondDaNeiWaie.push_back(minute);
						second_new_14400_secondDaNeiWaie.push_back(second);
						new_14400_secondDaNeie.push_back(0);
						new_14400_secondDaWaie.push_back(0);
					}
				}
				else
				{

					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//此处9:37的实际值
						new_14400_DaNeiWaieTimeflag.push_back(t);
						hour_new_14400_secondDaNeiWaie.push_back(hour);
						minute_new_14400_secondDaNeiWaie.push_back(minute);
						second_new_14400_secondDaNeiWaie.push_back(second);
						new_14400_secondDaNeie.push_back(daneiE);
						new_14400_secondDaWaie.push_back(dawaiE);
					}
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//此处13:37的实际值
						new_14400_DaNeiWaieTimeflag.push_back(t);
						hour_new_14400_secondDaNeiWaie.push_back(hour);
						minute_new_14400_secondDaNeiWaie.push_back(minute);
						second_new_14400_secondDaNeiWaie.push_back(second);
						new_14400_secondDaNeie.push_back(daneiE);
						new_14400_secondDaWaie.push_back(dawaiE);
					}
				}
			}
		}

		//处理结尾数据不全
		int lost=0;
		int last_second=new_14400_DaNeiWaieTimeflag.back();
		double last_daneiE=new_14400_secondDaNeie.back();
		double last_dawaiE=new_14400_secondDaWaie.back();

		if(new_14400_DaNeiWaieTimeflag.size()<14400)
		{
			lost=14400-new_14400_DaNeiWaieTimeflag.size();
			for (int j=1;j<=lost;j++)
			{
				new_14400_DaNeiWaieTimeflag.push_back(last_second);
				hour_new_14400_secondDaNeiWaie.push_back(hour);
				minute_new_14400_secondDaNeiWaie.push_back(minute);
				second_new_14400_secondDaNeiWaie.push_back(second);
				new_14400_secondDaNeie.push_back(last_daneiE);
				new_14400_secondDaWaie.push_back(last_dawaiE);
			}
		}
		if(days==1)
		{
			for(int m=0;m<new_14400_DaNeiWaieTimeflag.size();m++)
			{
				os_new_14400_secondDaNeiWaie<<new_14400_DaNeiWaieTimeflag[m]<<"  "
					<<hour_new_14400_secondDaNeiWaie[m]<<":"
					<<minute_new_14400_secondDaNeiWaie[m]<<":"
					<<second_new_14400_secondDaNeiWaie[m]<<"  "
					<<new_14400_secondDaNeie[m]<<"  "
					<<new_14400_secondDaWaie[m]<<endl;
			}
		}
	}
	cout<<"--------------5"<<endl;
#pragma endregion DaNeiWaiwan
	
#pragma region move_data
	if(!vMovedata.empty())
	{
		int year=0; 
		int month=0; 
		int day=0;

		for(int i=0;i<vMovedata.size();i++)
		{
			//本来20170926的值对应的时间是2017-09-25 16:00:00。加上30000秒，让日期变成当日日期2017-09-26 00:20:00，便于寻找
			//此处和小时加不加8没有关系，所以小时不加8
			t=int(vMovedata[i].m_timeTag+30000);
			pt=gmtime(&t);

			//cout<<pt_move->tm_year+1900<<"-"<<pt_move->tm_mon+1<<"-"<<pt_move->tm_mday<<" "
			//	<<pt_move->tm_hour<<":"<<pt_move->tm_min<<":"<<pt_move->tm_sec<<"    "<<vMovedata[i].m_fields[3]<<endl;

			year=pt->tm_year+1900; 
			month=pt->tm_mon+1; 
			day=pt->tm_mday;

			if(day_fu1==year*10000+month*100+day)
			{
				movedata=vMovedata[i].m_fields[3];
			}
		}
	}
	cout<<"--------------6"<<endl;
#pragma endregion move_data
	//---------------------------------------------------------------------
	
#pragma region Index_capital
	if(!vCapital.empty()&&runMode==2)
	{
		int maxRows=vCapital.size();
		int time=0;
		double capital=0.0;
		int interval=0;
		int hour=0; 
		int minute=0; 
		int second=0;
		double pre_capital=0.0;
		int pre_hour=0;
		int pre_minute=100;//保证能接收到第一个数
		int pre_second=0;

		for (int r = 0; r < maxRows; r++)
		{
			pre_capital=capital;
			pre_hour=hour;
			pre_minute=minute;
			pre_second=second;

			//时间列

			t=int(vCapital[r].m_timeTag);
			pt=gmtime(&t);

			//指数价格列
			//price=vPrice[r].m_fields[0];

			hour=int(pt->tm_hour+8);                    //得到小时
			minute=int(pt->tm_min);       //得到分
			second=int(pt->tm_sec);  //得到秒

			capital=vCapital[r].m_fields[0];

			//保存原始的时间和指标值///////
			hour_new_original_secondCapital.push_back(hour);
			minute_new_original_secondCapital.push_back(minute);
			second_new_original_secondCapital.push_back(second);	
			new_original_secondCapital.push_back(capital);
			if(days==1)
			{
				if(minute==pre_minute)
					os_new_original_secondCapital<<hour<<":"<<minute<<":"<<second<<"  "<<capital<<endl;
				else
					os_new_original_secondCapital<<hour<<":"<<minute<<":"<<second<<"  "<<capital<<"    Y"<<endl;
			}
			///////////////////////////////

			//中间插0做成14400个标准个数的逐秒值/////////
			interval=hour*3600+minute*60+second-(pre_hour*3600+pre_minute*60+pre_second);			
			for (int i = 1; i <= interval; i++)
			{
				if(i!=interval)
				{
					//上午9:30-11:30
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//比如上次9:33来值，当前9:37又来值。此处9:34~9:36插值

						new_14400_capitalTimeflag.push_back(t);
						hour_new_14400_secondCapital.push_back(hour);
						minute_new_14400_secondCapital.push_back(minute);
						second_new_14400_secondCapital.push_back(second);
						new_14400_secondCapital.push_back(0);
					}
					//下午13:00-15:00
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//比如上次13:33来值，当前13:37又来值。此处13:34~13:36插值;

						new_14400_capitalTimeflag.push_back(t);
						hour_new_14400_secondCapital.push_back(hour);
						minute_new_14400_secondCapital.push_back(minute);
						second_new_14400_secondCapital.push_back(second);
						new_14400_secondCapital.push_back(0);
					}
				}
				else
				{
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//此处9:37的实际值

						new_14400_capitalTimeflag.push_back(t);
						hour_new_14400_secondCapital.push_back(hour);
						minute_new_14400_secondCapital.push_back(minute);
						second_new_14400_secondCapital.push_back(second);
						new_14400_secondCapital.push_back(capital);
					}
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//此处13:37的实际值

						new_14400_capitalTimeflag.push_back(t);
						hour_new_14400_secondCapital.push_back(hour);
						minute_new_14400_secondCapital.push_back(minute);
						second_new_14400_secondCapital.push_back(second);
						new_14400_secondCapital.push_back(capital);
					}
				}
			}
			//以上，14402个值/////////////////////////
		}
		//处理结尾数据不全
		int lost=0;
		int last_second=new_14400_capitalTimeflag.back();
		double last_capital=new_14400_secondCapital.back();
		if(new_14400_secondCapital.size()<14400)
		{
			lost=14400-new_14400_secondCapital.size();
			for (int j=1;j<=lost;j++)
			{
				new_14400_capitalTimeflag.push_back(last_second);
				new_14400_secondCapital.push_back(last_capital);
				hour_new_14400_secondCapital.push_back(hour);
				minute_new_14400_secondCapital.push_back(minute);
				second_new_14400_secondCapital.push_back(second);
			}
		}
		if(days==1)
		{
			for(int m=0;m<new_14400_secondCapital.size();m++)
			{
				os_new_14400_secondCapital<<new_14400_capitalTimeflag[m]<<"  "
					<<hour_new_14400_secondCapital[m]<<":"
					<<minute_new_14400_secondCapital[m]<<":"
					<<second_new_14400_secondCapital[m]<<"  "
					<<new_14400_secondCapital[m]<<endl;
			}
		}
	}
	cout<<"--------------7"<<endl;
#pragma endregion Index_capital
	
	//---------------------------------------------------------------------
#pragma region ForceXD
	if(!vecSecForceXD.empty()&&runMode==2)
	{
		int maxRows=vecSecForceXD.size();
		double forceXD=0.0;
		int interval=0;
		int hour=0; 
		int minute=0; 
		int second=0;
		double pre_forceXD=0.0;
		int pre_hour=0;
		int pre_minute=100;//保证能接收到第一个数
		int pre_second=0;

		for (int r = 0; r < maxRows; r++)
		{
			pre_forceXD=forceXD;
			pre_hour=hour;
			pre_minute=minute;
			pre_second=second;

			//时间列

			t=int(vecSecForceXD[r].m_timeTag);
			pt=gmtime(&t);

			hour=int(pt->tm_hour+8);                    //得到小时
			minute=int(pt->tm_min);       //得到分
			second=int(pt->tm_sec);  //得到秒

			forceXD=vecSecForceXD[r].m_fields[0];

			//保存原始的时间和指标值///////
			hour_new_original_secondForceXD.push_back(hour);
			minute_new_original_secondForceXD.push_back(minute);
			second_new_original_secondForceXD.push_back(second);	
			new_original_secondForceXD.push_back(forceXD);
			if(days==1)
			{
				if(minute==pre_minute)
					os_new_original_secondForceXD<<hour<<":"<<minute<<":"<<second<<"  "<<forceXD<<endl;
				else
					os_new_original_secondForceXD<<hour<<":"<<minute<<":"<<second<<"  "<<forceXD<<"    Y"<<endl;
			}
			///////////////////////////////

			//中间插0做成14402个标准个数的逐秒值/////////
			interval=hour*3600+minute*60+second-(pre_hour*3600+pre_minute*60+pre_second);			
			for (int i = 1; i <= interval; i++)
			{
				if(i!=interval)
				{
					//上午9:30-11:30
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//比如上次9:33来值，当前9:37又来值。此处9:34~9:36插值

						new_14400_forceXDTimeflag.push_back(t);
						hour_new_14400_secondForceXD.push_back(hour);
						minute_new_14400_secondForceXD.push_back(minute);
						second_new_14400_secondForceXD.push_back(second);
						new_14400_secondForceXD.push_back(0);
					}
					//下午13:00-15:00
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//比如上次13:33来值，当前13:37又来值。此处13:34~13:36插值;

						new_14400_forceXDTimeflag.push_back(t);
						hour_new_14400_secondForceXD.push_back(hour);
						minute_new_14400_secondForceXD.push_back(minute);
						second_new_14400_secondForceXD.push_back(second);
						new_14400_secondForceXD.push_back(0);
					}
				}
				else
				{
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//此处9:37的实际值

						new_14400_forceXDTimeflag.push_back(t);
						hour_new_14400_secondForceXD.push_back(hour);
						minute_new_14400_secondForceXD.push_back(minute);
						second_new_14400_secondForceXD.push_back(second);
						new_14400_secondForceXD.push_back(forceXD);
					}
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//此处13:37的实际值

						new_14400_forceXDTimeflag.push_back(t);
						hour_new_14400_secondForceXD.push_back(hour);
						minute_new_14400_secondForceXD.push_back(minute);
						second_new_14400_secondForceXD.push_back(second);
						new_14400_secondForceXD.push_back(forceXD);
					}
				}
			}
			//以上，14400个值/////////////////////////
		}
		//处理结尾数据不全
		int lost=0;
		int last_second=new_14400_forceXDTimeflag.back();
		double last_forceXD=new_14400_secondForceXD.back();
		if(new_14400_secondForceXD.size()<14400)
		{
			lost=14400-new_14400_secondForceXD.size();
			for (int j=1;j<=lost;j++)
			{
				new_14400_forceXDTimeflag.push_back(last_second);
				new_14400_secondForceXD.push_back(last_forceXD);
				hour_new_14400_secondForceXD.push_back(hour);
				minute_new_14400_secondForceXD.push_back(minute);
				second_new_14400_secondForceXD.push_back(second);
			}
		}
		if(days==1)
		{
			for(int m=0;m<new_14400_secondForceXD.size();m++)
			{
				os_new_14400_secondForceXD<<new_14400_forceXDTimeflag[m]<<"  "
					<<hour_new_14400_secondForceXD[m]<<":"
					<<minute_new_14400_secondForceXD[m]<<":"
					<<second_new_14400_secondForceXD[m]<<"  "
					<<new_14400_secondForceXD[m]<<endl;
			}
		}
	}
#pragma endregion ForceXD
	
#pragma region eMACQ
	if(!vecEMACQuantity.empty())
	{
		int year=0; 
		int month=0; 
		int day=0;

		for(int i=0;i<vecEMACQuantity.size();i++)
		{
			//本来20170926的值对应的时间是2017-09-25 16:00:00。加上30000秒，让日期变成当日日期2017-09-26 00:20:00，便于寻找
			//此处和小时加不加8没有关系，所以小时不加8
			t=int(vecEMACQuantity[i].m_timeTag+30000);
			pt=gmtime(&t);

			//cout<<pt_EMACQ->tm_year+1900<<"-"<<pt_EMACQ->tm_mon+1<<"-"<<pt_EMACQ->tm_mday<<" "
			//	<<pt_EMACQ->tm_hour<<":"<<pt_EMACQ->tm_min<<":"<<pt_EMACQ->tm_sec<<"    "<<vecEMACQuantity[i].m_fields[0]<<endl;

			year=pt->tm_year+1900; 
			month=pt->tm_mon+1; 
			day=pt->tm_mday;

			if(day_fu1==year*10000+month*100+day)
			{
				emacq=vecEMACQuantity[i].m_fields[0];
				//break;
			}
		}
	}
#pragma endregion eMACQ
	
#pragma region common_Rating
	if(!vecCommonRating.empty())
	{
		int year=0; 
		int month=0; 
		int day=0;

		for(int i=0;i<vecCommonRating.size();i++)
		{
			//本来20170926的值对应的时间是2017-09-25 16:00:00。加上30000秒，让日期变成当日日期2017-09-26 00:20:00，便于寻找
			//此处和小时加不加8没有关系，所以小时不加8
			t=int(vecCommonRating[i].m_timeTag+30000);
			pt=gmtime(&t);

			//cout<<t_cr<<"  "<<pt_cr->tm_year+1900<<"-"<<pt_cr->tm_mon+1<<"-"<<pt_cr->tm_mday<<" "
			//	<<pt_cr->tm_hour<<":"<<pt_cr->tm_min<<":"<<pt_cr->tm_sec<<"    "<<vecCommonRating[i].m_fields[3]<<endl;

			year=pt->tm_year+1900; 
			month=pt->tm_mon+1; 
			day=pt->tm_mday;

			if(day_fu1==year*10000+month*100+day)
			{
				commonRating=vecCommonRating[i].m_fields[3];
				//break;
			}
		}
	}
#pragma endregion common_Rating
	//---------------------------------------------------------------------
#pragma region Index_DLX
	if(!vec_donglixian.empty()&&runMode==2)
	{
		int maxRows=vec_donglixian.size();
		int time=0;
		double donglixian=0.0;
		int interval=0;
		int hour=0; 
		int minute=0; 
		int second=0;
		double pre_donglixian=0.0;
		int pre_hour=0;
		int pre_minute=0;
		int pre_second=0;

		for (int r = 0; r < maxRows; r++)
		{
			pre_donglixian=donglixian;
			pre_hour=hour;
			pre_minute=minute;
			pre_second=second;

			t=int(vec_donglixian[r].m_timeTag);
			pt=gmtime(&t);

			donglixian=vec_donglixian[r].m_fields[0];

			hour=int(pt->tm_hour+8);                    //得到小时
			minute=int(pt->tm_min);       //得到分
			second=int(pt->tm_sec);  //得到秒

			//原始时间和指标数值////////////////
			hour_new_original_secondIndexDonglixian.push_back(hour);
			minute_new_original_secondIndexDonglixian.push_back(minute);
			second_new_original_secondIndexDonglixian.push_back(second);	
			new_original_secondIndexDonglixian.push_back(donglixian);
			if(days==1)
			{
				if(minute==pre_minute)
					os_new_original_secondIndexDonglixian<<hour<<":"<<minute<<":"<<second<<"  "<<donglixian<<endl;
				else
					os_new_original_secondIndexDonglixian<<hour<<":"<<minute<<":"<<second<<"  "<<donglixian<<"   Y"<<endl;
				os_new_original_secondIndexDonglixian_huatu<<donglixian<<endl;
			}
			////////////////////////////////////

			//中间插0做成14402个标准个数的逐秒值/////////
			interval=hour*3600+minute*60+second-(pre_hour*3600+pre_minute*60+pre_second);
			for (int i = 1; i <= interval; i++)
			{
				if(i!=interval)
				{
					//上午9:30-11:30
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//比如上次9:33来值，当前9:37又来值。此处9:34~9:36插值

						new_14400_indexdonglixianTimeflag.push_back(t);
						hour_new_14400_secondIndexDonglixian.push_back(hour);
						minute_new_14400_secondIndexDonglixian.push_back(minute);
						second_new_14400_secondIndexDonglixian.push_back(second);
						new_14400_secondIndexDonglixian.push_back(0);
					}
					//下午13:00-15:00
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//比如上次13:33来值，当前13:37又来值。此处13:34~13:36插值

						new_14400_indexdonglixianTimeflag.push_back(t);
						hour_new_14400_secondIndexDonglixian.push_back(hour);
						minute_new_14400_secondIndexDonglixian.push_back(minute);
						second_new_14400_secondIndexDonglixian.push_back(second);
						new_14400_secondIndexDonglixian.push_back(0);
					}
				}
				else
				{
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//此处9:37的实际值

						new_14400_indexdonglixianTimeflag.push_back(t);
						hour_new_14400_secondIndexDonglixian.push_back(hour);
						minute_new_14400_secondIndexDonglixian.push_back(minute);
						second_new_14400_secondIndexDonglixian.push_back(second);
						new_14400_secondIndexDonglixian.push_back(donglixian);
					}
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//此处13:37的实际值

						new_14400_indexdonglixianTimeflag.push_back(t);
						hour_new_14400_secondIndexDonglixian.push_back(hour);
						minute_new_14400_secondIndexDonglixian.push_back(minute);
						second_new_14400_secondIndexDonglixian.push_back(second);
						new_14400_secondIndexDonglixian.push_back(donglixian);
					}
				}
			}
		}
		//处理结尾数据不全
		int lost=0;
		int last_second=new_14400_indexdonglixianTimeflag.back();
		double last_donglixian=new_14400_secondIndexDonglixian.back();
		if(new_14400_secondIndexDonglixian.size()<14400)
		{
			lost=14400-new_14400_secondIndexDonglixian.size();
			for (int j=1;j<=lost;j++)
			{
				new_14400_indexdonglixianTimeflag.push_back(t);
				hour_new_14400_secondIndexDonglixian.push_back(hour);
				minute_new_14400_secondIndexDonglixian.push_back(minute);
				second_new_14400_secondIndexDonglixian.push_back(second);
				new_14400_secondIndexDonglixian.push_back(donglixian);
			}
		}
		for(int m=0;m<new_14400_secondIndexDonglixian.size();m++)
		{
			if(days==1)
			{
				os_new_14400_secondIndexDonglixian<<new_14400_indexdonglixianTimeflag[m]<<"  "
					<<hour_new_14400_secondIndexDonglixian[m]<<":"
					<<minute_new_14400_secondIndexDonglixian[m]<<":"
					<<second_new_14400_secondIndexDonglixian[m]<<"  "
					<<new_14400_secondIndexDonglixian[m]<<endl;
			}
		}
	}
#pragma endregion Index_DLX
	//---------------------------------------------------------------------

#pragma region Previous_CotDataByDay
	if(!vPreviousCotDataByDay.empty())
	{
		int year=0; 
		int month=0; 
		int day=0;

		for(int i=0;i<vPreviousCotDataByDay.size();i++)
		{
			//本来20170926的值对应的时间是2017-09-25 16:00:00。加上30000秒，让日期变成当日日期2017-09-26 00:20:00，便于寻找
			//此处和小时加不加8没有关系，所以小时不加8
			t=int(vPreviousCotDataByDay[i].m_timeTag+30000);
			pt=gmtime(&t);

			/*cout<<t<<"  "<<pt->tm_year+1900<<"-"<<pt->tm_mon+1<<"-"<<pt->tm_mday<<" "
				<<pt->tm_hour<<":"<<pt->tm_min<<":"<<pt->tm_sec<<"    "
				<<vPreviousCotDataByDay[i].m_fields[2]<<"    "<<vPreviousCotDataByDay[i].m_fields[3]<<endl;*/

			year=pt->tm_year+1900; 
			month=pt->tm_mon+1; 
			day=pt->tm_mday;

			vCotMoveAverage.push_back(vPreviousCotDataByDay[i].m_fields[2]);
			vCotMoveStandard.push_back(vPreviousCotDataByDay[i].m_fields[3]);

			if(day_fu1==year*10000+month*100+day)//计算资金等级，当天使用的均值和方差
			{
				aCotMoveAverage_forToday=vPreviousCotDataByDay[i].m_fields[2];
				aCotMoveStandard_forToday=vPreviousCotDataByDay[i].m_fields[3];
			}
			if(day_fu2==year*10000+month*100+day)//-1天使用的均值和方差
			{
				aCotMoveAverage_forFu1=vPreviousCotDataByDay[i].m_fields[2];
				aCotMoveStandard_forFu1=vPreviousCotDataByDay[i].m_fields[3];
			}
			if(day_fu3==year*10000+month*100+day)//-2天使用的均值和方差
			{
				aCotMoveAverage_forFu2=vPreviousCotDataByDay[i].m_fields[2];
				aCotMoveStandard_forFu2=vPreviousCotDataByDay[i].m_fields[3];
			}
			if(day_fu4==year*10000+month*100+day)//-3天使用的均值和方差
			{
				aCotMoveAverage_forFu3=vPreviousCotDataByDay[i].m_fields[2];
				aCotMoveStandard_forFu3=vPreviousCotDataByDay[i].m_fields[3];
			}
			if(day_fu5==year*10000+month*100+day)//-4天使用的均值和方差
			{
				aCotMoveAverage_forFu4=vPreviousCotDataByDay[i].m_fields[2];
				aCotMoveStandard_forFu4=vPreviousCotDataByDay[i].m_fields[3];
			}
			if(day_fu6==year*10000+month*100+day)//-5天使用的均值和方差
			{
				aCotMoveAverage_forFu5=vPreviousCotDataByDay[i].m_fields[2];
				aCotMoveStandard_forFu5=vPreviousCotDataByDay[i].m_fields[3];
			}
		}
	}
#pragma endregion Previous_CotDataByDay

#pragma region weibidengji_38
	if(!vWBDJ38.empty()&&runMode==2)
	{
		int maxRows=vWBDJ38.size();
		double weimairu=0.0;
		double weimaichu=0.0;
		int interval=0;
		int hour=0; 
		int minute=0; 
		int second=0;
		double pre_weimairu=0.0;
		double pre_weimaichu=0.0;
		int pre_hour=0;
		int pre_minute=100;//保证能接收到第一个数
		int pre_second=0;

		for (int r = 0; r < maxRows; r++)
		{
			pre_weimairu=weimairu;
			pre_weimaichu=weimaichu;
			pre_hour=hour;
			pre_minute=minute;
			pre_second=second;

			//时间列

			t=int(vWBDJ38[r].m_timeTag);
			pt=gmtime(&t);

			hour=int(pt->tm_hour+8);                    //得到小时
			minute=int(pt->tm_min);       //得到分
			second=int(pt->tm_sec);  //得到秒

			weimairu=vWBDJ38[r].m_fields[0];
			weimaichu=vWBDJ38[r].m_fields[1];

			//保存原始的时间和指标值///////
			hour_new_original_secondOrderRatio.push_back(hour);
			minute_new_original_secondOrderRatio.push_back(minute);
			second_new_original_secondOrderRatio.push_back(second);	
			new_original_secondOrderRatio1.push_back(weimairu);
			new_original_secondOrderRatio2.push_back(weimaichu);
			if(days==1)
			{
				if(minute==pre_minute)
					os_new_original_secondOrderRatio<<hour<<":"<<minute<<":"<<second<<"  "<<weimairu<<"  "<<weimaichu<<endl;
				else
					os_new_original_secondOrderRatio<<hour<<":"<<minute<<":"<<second<<"  "<<weimairu<<"  "<<weimaichu<<"    Y"<<endl;
			}
			///////////////////////////////

			//中间插0做成14402个标准个数的逐秒值/////////
			interval=hour*3600+minute*60+second-(pre_hour*3600+pre_minute*60+pre_second);			
			for (int i = 1; i <= interval; i++)
			{
				if(i!=interval)
				{
					//上午9:30-11:30
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//比如上次9:33来值，当前9:37又来值。此处9:34~9:36插值

						new_14400_OrderRatioTimeflag.push_back(t);
						hour_new_14400_secondOrderRatio.push_back(hour);
						minute_new_14400_secondOrderRatio.push_back(minute);
						second_new_14400_secondOrderRatio.push_back(second);
						new_14400_secondOrderRatio1.push_back(0);
						new_14400_secondOrderRatio2.push_back(0);
					}
					//下午13:00-15:00
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//比如上次13:33来值，当前13:37又来值。此处13:34~13:36插值;

						new_14400_OrderRatioTimeflag.push_back(t);
						hour_new_14400_secondOrderRatio.push_back(hour);
						minute_new_14400_secondOrderRatio.push_back(minute);
						second_new_14400_secondOrderRatio.push_back(second);
						new_14400_secondOrderRatio1.push_back(0);
						new_14400_secondOrderRatio2.push_back(0);
					}
				}
				else
				{
					if((pre_hour*3600+pre_minute*60+pre_second+i>=9*3600+30*60)&&(pre_hour*3600+pre_minute*60+pre_second+i<11*3600+30*60))
					{
						//此处9:37的实际值

						new_14400_OrderRatioTimeflag.push_back(t);
						hour_new_14400_secondOrderRatio.push_back(hour);
						minute_new_14400_secondOrderRatio.push_back(minute);
						second_new_14400_secondOrderRatio.push_back(second);
						new_14400_secondOrderRatio1.push_back(weimairu);
						new_14400_secondOrderRatio2.push_back(weimaichu);
					}
					if((pre_hour*3600+pre_minute*60+pre_second+i>=13*3600)&&(pre_hour*3600+pre_minute*60+pre_second+i<15*3600))
					{
						//此处13:37的实际值

						new_14400_OrderRatioTimeflag.push_back(t);
						hour_new_14400_secondOrderRatio.push_back(hour);
						minute_new_14400_secondOrderRatio.push_back(minute);
						second_new_14400_secondOrderRatio.push_back(second);
						new_14400_secondOrderRatio1.push_back(weimairu);
						new_14400_secondOrderRatio2.push_back(weimaichu);
					}
				}
			}
			//以上，14400个值/////////////////////////
		}
		//处理结尾数据不全
		int lost=0;
		int last_second=new_14400_OrderRatioTimeflag.back();
		double last_weimairu=new_14400_secondOrderRatio1.back();
		double last_weimaichu=new_14400_secondOrderRatio2.back();
		if(new_14400_secondOrderRatio1.size()<14400)
		{
			lost=14400-new_14400_secondOrderRatio1.size();
			for (int j=1;j<=lost;j++)
			{
				new_14400_forceXDTimeflag.push_back(last_second);
				new_14400_secondOrderRatio1.push_back(last_weimairu);
				new_14400_secondOrderRatio2.push_back(last_weimaichu);
				hour_new_14400_secondOrderRatio.push_back(hour);
				minute_new_14400_secondOrderRatio.push_back(minute);
				second_new_14400_secondOrderRatio.push_back(second);
			}
		}
		if(days==1)
		{
			for(int m=0;m<new_14400_secondOrderRatio1.size();m++)
			{
				os_new_14400_secondOrderRatio<<new_14400_OrderRatioTimeflag[m]<<"  "
					<<hour_new_14400_secondOrderRatio[m]<<":"
					<<minute_new_14400_secondOrderRatio[m]<<":"
					<<second_new_14400_secondOrderRatio[m]<<"  "
					<<new_14400_secondOrderRatio1[m]<<"  "
					<<new_14400_secondOrderRatio2[m]<<endl;
			}
		}
	}
#pragma endregion weibidengji_38

#pragma region weibidengji_10073
	if(!vWBDJ10073.empty())
	{
		int year=0; 
		int month=0; 
		int day=0;

		for(int i=0;i<vWBDJ10073.size();i++)
		{
			//本来20170926的值对应的时间是2017-09-25 16:00:00。加上30000秒，让日期变成当日日期2017-09-26 00:20:00，便于寻找
			//此处和小时加不加8没有关系，所以小时不加8
			t=int(vWBDJ10073[i].m_timeTag+30000);
			pt=gmtime(&t);

			//cout<<pt_EMACQ->tm_year+1900<<"-"<<pt_EMACQ->tm_mon+1<<"-"<<pt_EMACQ->tm_mday<<" "
			//	<<pt_EMACQ->tm_hour<<":"<<pt_EMACQ->tm_min<<":"<<pt_EMACQ->tm_sec<<"    "<<vecEMACQuantity[i].m_fields[0]<<endl;

			year=pt->tm_year+1900; 
			month=pt->tm_mon+1; 
			day=pt->tm_mday;

			if(day_fu1==year*10000+month*100+day)
			{
				orderRatio1=vWBDJ10073[i].m_fields[2];
				orderRatio2=vWBDJ10073[i].m_fields[3];
				break;
			}
		}
	}
#pragma endregion weibidengji_10073
	
	getAveCapitalLast5();//处理前5天的资金，各种资金衍生，因为要用到取出的均值和方差，所以调用放在最后边了
	getAveWeimaiWeimaiLast5();//处理前5天的委卖
	return 0;
}
void prepareDataOfLast5(double indexprice)
{
	//确定资金的参照天数
	if(five_ok)
	{
		double kaipanjia=0.0;
		//上证指数的参考天数
		need_days=3;

		kaipanjia=indexprice;

		//之前是向前找到有参照意义的就够，改成所有有参照意义的都要参照
		if(kaipanjia>=minPrice_fu2&&kaipanjia<=maxPrice_fu2)
			need_days=3;
		if(kaipanjia>=minPrice_fu1&&kaipanjia<=maxPrice_fu1)
			need_days=3;
		if(kaipanjia>=minPrice_fu3&&kaipanjia<=maxPrice_fu3)
			need_days=3;
		if(kaipanjia>=minPrice_fu4&&kaipanjia<=maxPrice_fu4)
			need_days=4;
		if(kaipanjia>=minPrice_fu5&&kaipanjia<=maxPrice_fu5)
			need_days=5;
	}
	else
	{
		need_days=3;
	}
	//保存前5天的盘面资金
	for(int i=0;i<239;i++)
	{
		double this_mean,this_std,this_mean1,this_std1,this_mean2,this_std2;
		double xm1,xm2,xm3,xm4,xm5;
		double xm11,xm12,xm13,xm14,xm15;
		double xm21,xm22,xm23,xm24,xm25;
		double max_xm1=-1e15,min_xm1=1e15;
		double max_xm2=-1e15,min_xm2=1e15;
		double max_xm3=-1e15,min_xm3=1e15;
		double this_middle,this_middle1,this_middle2;
		double p=0.37,q=0.37;
		//-----------------------------------------------------------------------------------------------------

		//上证指数
		//资金5天
		if(true)
		{
			//前五天逐分钟资金均值的均值和标准差
			xm1=AveCapital_240_dayfu1[i];
			xm2=AveCapital_240_dayfu2[i];
			xm3=AveCapital_240_dayfu3[i];
			xm4=AveCapital_240_dayfu4[i];
			xm5=AveCapital_240_dayfu5[i];
			if(xm1>max_xm1){max_xm1=xm1;}
			if(xm2>max_xm1){max_xm1=xm2;}
			if(need_days>=3){if(xm3>max_xm1){max_xm1=xm3;}}
			if(need_days>=4){if(xm4>max_xm1){max_xm1=xm4;}}
			if(need_days>=5){if(xm5>max_xm1){max_xm1=xm5;}}
			if(xm1<min_xm1){min_xm1=xm1;}
			if(xm2<min_xm1){min_xm1=xm2;}
			if(need_days>=3){if(xm3<min_xm1){min_xm1=xm3;}}
			if(need_days>=4){if(xm4<min_xm1){min_xm1=xm4;}}
			if(need_days>=5){if(xm5<min_xm1){min_xm1=xm5;}}
			this_middle=(max_xm1+min_xm1)/2;//最大最小值的中间值
			if(need_days==2){this_mean=(xm1+xm2)/2;}//均值
			if(need_days==3){this_mean=(xm1+xm2+xm3)/3;}//均值
			if(need_days==4){this_mean=(xm1+xm2+xm3+xm4)/4;}//均值
			if(need_days==5){this_mean=(xm1+xm2+xm3+xm4+xm5)/5;}//均值
			if(need_days==2){this_std=sqrt((pow(xm1-this_mean,2)+pow(xm2-this_mean,2))/2);}
			if(need_days==3){this_std=sqrt((pow(xm1-this_mean,2)+pow(xm2-this_mean,2)+pow(xm3-this_mean,2))/3);}
			if(need_days==4){this_std=sqrt((pow(xm1-this_mean,2)+pow(xm2-this_mean,2)+pow(xm3-this_mean,2)+pow(xm4-this_mean,2))/4);}
			if(need_days==5){this_std=sqrt((pow(xm1-this_mean,2)+pow(xm2-this_mean,2)+pow(xm3-this_mean,2)+pow(xm4-this_mean,2)+pow(xm5-this_mean,2))/5);}
			mean_5fuAveCot.push_back(this_mean);
			std_5fuAveCot.push_back(this_std);
			cot_huanchongdai1.push_back(this_middle+(1+q)*p*this_std);
			cot_huanchongdai2.push_back(this_middle+(1-q)*p*this_std);
			cot_huanchongdai3.push_back(this_middle-(1-q)*p*this_std);
			cot_huanchongdai4.push_back(this_middle-(1+q)*p*this_std);
			//前五天资金截面的均值和标准差
			xm11=Capital_240_dayfu1[i];
			xm12=Capital_240_dayfu2[i];
			xm13=Capital_240_dayfu3[i];
			xm14=Capital_240_dayfu4[i];
			xm15=Capital_240_dayfu5[i];
			if(xm11>max_xm2){max_xm2=xm11;}
			if(xm12>max_xm2){max_xm2=xm12;}
			if(xm13>max_xm2){max_xm2=xm13;}
			if(xm14>max_xm2){max_xm2=xm14;}
			if(xm15>max_xm2){max_xm2=xm15;}
			if(xm11<min_xm2){min_xm2=xm11;}
			if(xm12<min_xm2){min_xm2=xm12;}
			if(xm13<min_xm2){min_xm2=xm13;}
			if(xm14<min_xm2){min_xm2=xm14;}
			if(xm15<min_xm2){min_xm2=xm15;}
			this_middle1=(max_xm2+min_xm2)/2;
			this_mean1=(xm11+xm12+xm13+xm14+xm15)/5;
			this_std1=sqrt((pow(xm11-this_mean1,2)+pow(xm12-this_mean1,2)+pow(xm13-this_mean1,2)+pow(xm14-this_mean1,2)+pow(xm15-this_mean1,2))/5);
			//前五天资金等级的均值和标准差
			xm21=CapitalDengJi_fu1[i];
			xm22=CapitalDengJi_fu2[i];
			xm23=CapitalDengJi_fu3[i];
			xm24=CapitalDengJi_fu4[i];
			xm25=CapitalDengJi_fu5[i];
			if(xm21>max_xm3){max_xm3=xm21;}
			if(xm22>max_xm3){max_xm3=xm22;}
			if(xm23>max_xm3){max_xm3=xm23;}
			if(xm24>max_xm3){max_xm3=xm24;}
			if(xm25>max_xm3){max_xm3=xm25;}
			if(xm21<min_xm3){min_xm3=xm21;}
			if(xm22<min_xm3){min_xm3=xm22;}
			if(xm23<min_xm3){min_xm3=xm23;}
			if(xm24<min_xm3){min_xm3=xm24;}
			if(xm25<min_xm3){min_xm3=xm25;}
			this_middle2=(max_xm3+min_xm3)/2;
			this_mean2=(xm21+xm22+xm23+xm24+xm25)/5;
			this_std2=sqrt((pow(xm21-this_mean2,2)+pow(xm22-this_mean2,2)+pow(xm23-this_mean2,2)+pow(xm24-this_mean2,2)+pow(xm25-this_mean2,2))/5);
			//记录
			if(days==1)
			{
				os_AveCapital_fu<<AveCapital_240_dayfu1[i]<<endl;//均线
				os_AveCapital_fu<<AveCapital_240_dayfu2[i]<<endl;
				os_AveCapital_fu<<AveCapital_240_dayfu3[i]<<endl;
				os_AveCapital_fu<<AveCapital_240_dayfu4[i]<<endl;
				os_AveCapital_fu<<AveCapital_240_dayfu5[i]<<endl;
				os_AveCapital_fu<<this_mean<<endl;
				os_AveCapital_fu<<this_std<<endl;
				os_AveCapital_fu<<cot_huanchongdai1.back()<<endl;//缓冲带的4根线
				os_AveCapital_fu<<cot_huanchongdai2.back()<<endl;
				os_AveCapital_fu<<cot_huanchongdai3.back()<<endl;
				os_AveCapital_fu<<cot_huanchongdai4.back()<<endl;
				os_AveCapital_fu<<Capital_240_dayfu1[i]<<endl;//资金本身
				os_AveCapital_fu<<Capital_240_dayfu2[i]<<endl;
				os_AveCapital_fu<<Capital_240_dayfu3[i]<<endl;
				os_AveCapital_fu<<Capital_240_dayfu4[i]<<endl;
				os_AveCapital_fu<<Capital_240_dayfu5[i]<<endl;
				os_AveCapital_fu<<CapitalDengJi_fu1[i]<<endl;//资金等级
				os_AveCapital_fu<<CapitalDengJi_fu2[i]<<endl;
				os_AveCapital_fu<<CapitalDengJi_fu3[i]<<endl;
				os_AveCapital_fu<<CapitalDengJi_fu4[i]<<endl;
				os_AveCapital_fu<<CapitalDengJi_fu5[i]<<endl;
				os_AveCapital_fu<<(this_middle1+(1+q)*p*this_std1)<<endl;//资金本身缓冲带
				os_AveCapital_fu<<(this_middle1+(1-q)*p*this_std1)<<endl;
				os_AveCapital_fu<<(this_middle1-(1-q)*p*this_std1)<<endl;
				os_AveCapital_fu<<(this_middle1-(1+q)*p*this_std1)<<endl;
				os_AveCapital_fu<<(this_middle2+(1+q)*p*this_std2)<<endl;//资金等级缓冲带
				os_AveCapital_fu<<(this_middle2+(1-q)*p*this_std2)<<endl;
				os_AveCapital_fu<<(this_middle2-(1-q)*p*this_std2)<<endl;
				os_AveCapital_fu<<(this_middle2-(1+q)*p*this_std2)<<endl;
			}
		}
		//委卖5天
		max_xm1=-1e15,min_xm1=1e15;
		if(true)
		{
			//前五天逐分钟委卖均值的均值和标准差
			xm1=AveWeimaichu_240_dayfu1[i];
			xm2=AveWeimaichu_240_dayfu2[i];
			xm3=AveWeimaichu_240_dayfu3[i];
			xm4=AveWeimaichu_240_dayfu4[i];
			xm5=AveWeimaichu_240_dayfu5[i];
			if(xm1>max_xm1){max_xm1=xm1;}
			if(xm2>max_xm1){max_xm1=xm2;}
			if(need_days>=3){if(xm3>max_xm1){max_xm1=xm3;}}
			if(need_days>=4){if(xm4>max_xm1){max_xm1=xm4;}}
			if(need_days>=5){if(xm5>max_xm1){max_xm1=xm5;}}
			if(xm1<min_xm1){min_xm1=xm1;}
			if(xm2<min_xm1){min_xm1=xm2;}
			if(need_days>=3){if(xm3<min_xm1){min_xm1=xm3;}}
			if(need_days>=4){if(xm4<min_xm1){min_xm1=xm4;}}
			if(need_days>=5){if(xm5<min_xm1){min_xm1=xm5;}}
			this_middle=(max_xm1+min_xm1)/2;//最大最小值的中间值
			if(need_days==2){this_mean=(xm1+xm2)/2;}//均值
			if(need_days==3){this_mean=(xm1+xm2+xm3)/3;}//均值
			if(need_days==4){this_mean=(xm1+xm2+xm3+xm4)/4;}//均值
			if(need_days==5){this_mean=(xm1+xm2+xm3+xm4+xm5)/5;}//均值
			if(need_days==2){this_std=sqrt((pow(xm1-this_mean,2)+pow(xm2-this_mean,2))/2);}
			if(need_days==3){this_std=sqrt((pow(xm1-this_mean,2)+pow(xm2-this_mean,2)+pow(xm3-this_mean,2))/3);}
			if(need_days==4){this_std=sqrt((pow(xm1-this_mean,2)+pow(xm2-this_mean,2)+pow(xm3-this_mean,2)+pow(xm4-this_mean,2))/4);}
			if(need_days==5){this_std=sqrt((pow(xm1-this_mean,2)+pow(xm2-this_mean,2)+pow(xm3-this_mean,2)+pow(xm4-this_mean,2)+pow(xm5-this_mean,2))/5);}
			mean_5fuAveWeimaichu.push_back(this_mean);
			std_5fuAveWeimaichu.push_back(this_std);
			weimaichu_huanchongdai1.push_back(this_middle+(1+q)*p*this_std);
			weimaichu_huanchongdai2.push_back(this_middle+(1-q)*p*this_std);
			weimaichu_huanchongdai3.push_back(this_middle-(1-q)*p*this_std);
			weimaichu_huanchongdai4.push_back(this_middle-(1+q)*p*this_std);
			//记录
			if(days==1)
			{
				os_AveWeimaichu_fu<<AveWeimaichu_240_dayfu1[i]<<endl;//均线
				os_AveWeimaichu_fu<<AveWeimaichu_240_dayfu2[i]<<endl;
				os_AveWeimaichu_fu<<AveWeimaichu_240_dayfu3[i]<<endl;
				os_AveWeimaichu_fu<<AveWeimaichu_240_dayfu4[i]<<endl;
				os_AveWeimaichu_fu<<AveWeimaichu_240_dayfu5[i]<<endl;
				os_AveWeimaichu_fu<<this_mean<<endl;
				os_AveWeimaichu_fu<<this_std<<endl;
				os_AveWeimaichu_fu<<weimaichu_huanchongdai1.back()<<endl;//缓冲带的4根线
				os_AveWeimaichu_fu<<weimaichu_huanchongdai2.back()<<endl;
				os_AveWeimaichu_fu<<weimaichu_huanchongdai3.back()<<endl;
				os_AveWeimaichu_fu<<weimaichu_huanchongdai4.back()<<endl;
				
			}
		}
	}
}
void getHuanshoulv(int today,string idxCode)
{
	int fetchTime = time2Seconds(today, 0);

	const char *indexcode=idxCode.c_str();
	//历时每天换手率
	if(true)
	{
		vector<MutiTypeDataOneDay> VMT1= SyncHistoryData("SH",indexcode,10002,fetchTime,fetchTime);//含成家量[4]和成交额[5]
		vector<StructDataValue> vHuanshoulv1=zhuanhuan(VMT1);
		for (int i=0;i<vHuanshoulv1.size();i++)
		{			
			index_chengjiaoliang86400.push_back(vHuanshoulv1[i].m_fields[4]);
			index_chengjiaoe86400.push_back(vHuanshoulv1[i].m_fields[5]);
		}
		cout<<"ELiang_fetch_ok"<<endl;

		time_t t1=0;
		struct tm *p1;
		vector<MutiTypeDataOneDay> VMT2= SyncHistoryData("SH",indexcode,10014,fetchTime,fetchTime);//含换手率m_fields[5]
		vector<StructDataValue> vHuanshoulv2=zhuanhuan(VMT2);
		for (int i=0;i<vHuanshoulv2.size();i++)
		{
			index_huanshoulv86400.push_back(vHuanshoulv2[i].m_fields[5]);
			//时间处理
			t1=vHuanshoulv2[i].m_timeTag+30000;//86400数据
			p1=gmtime(&t1);

			int this_date=(p1->tm_year+1900)*10000+(p1->tm_mon+1)*100+p1->tm_mday;

			date_huanshoulv.push_back(this_date);
		}
		for (int i=0;i<date_huanshoulv.size();i++)//竟然不是按日期顺序的
		{
			for (int j=i+1;j<date_huanshoulv.size();j++)
			{
				if(date_huanshoulv[i]>date_huanshoulv[j])
				{
					int    tmp_date=0;
					double tmp_huanshoulv=0;

					tmp_date = date_huanshoulv[i];
					date_huanshoulv[i] = date_huanshoulv[j];
					date_huanshoulv[j] =tmp_date;

					tmp_huanshoulv = index_huanshoulv86400[i];
					index_huanshoulv86400[i] = index_huanshoulv86400[j];
					index_huanshoulv86400[j] =tmp_huanshoulv;
				}
			}

		}
		for(int i=0;i<date_huanshoulv.size();i++)
		{
			os_huanshoulv<<date_huanshoulv[i]<<"  "<<index_huanshoulv86400[i]<<endl;
		}
		cout<<"huanshoulv_fetch_ok"<<endl;
	}
}
void getAveCapitalLast5()
{
	double sum_cot=0.0;

	time_t t=0,pre_t=0;
	struct tm *pt;
	int maxRows=0;
	double capital=0.0;
	int hour=0; 
	int minute=0; 
	int second=0;
	int sum_count=0;

	if(!vCapital_fu1.empty()&&!vCapital_fu2.empty()&&!vCapital_fu3.empty()&&!vCapital_fu4.empty()&&!vCapital_fu5.empty())
	{
		maxRows=vCapital_fu1.size();
		for (int r = 0; r < maxRows; r++)
		{
			t=int(vCapital_fu1[r].m_timeTag);
			pt=gmtime(&t);

			hour=int(pt->tm_hour+8); //得到小时
			minute=int(pt->tm_min);  //得到分
			second=int(pt->tm_sec);  //得到秒
			capital=vCapital_fu1[r].m_fields[0];

			//上午9:30-11:30
			if((hour*3600+minute*60+second>=9*3600+30*60)&&(hour*3600+minute*60+second<11*3600+30*60))
			{
				Capital_240_dayfu1.push_back(capital);//资金
				CapitalDengJi_fu1.push_back((capital-aCotMoveAverage_forFu1)/(0.5*aCotMoveStandard_forFu1));//资金等级
				if(AveCapital_240_dayfu1.size()==0)//资金均线
					AveCapital_240_dayfu1.push_back(capital);
				else
					AveCapital_240_dayfu1.push_back((AveCapital_240_dayfu1.back()*AveCapital_240_dayfu1.size()+capital)/(AveCapital_240_dayfu1.size()+1));
				sum_cot=sum_cot+capital;
				sum_count=sum_count+1;
			}
			//下午13:00-15:00
			if((hour*3600+minute*60+second>=13*3600)&&(hour*3600+minute*60+second<15*3600))
			{
				Capital_240_dayfu1.push_back(capital);
				CapitalDengJi_fu1.push_back((capital-aCotMoveAverage_forFu1)/(0.5*aCotMoveStandard_forFu1));//资金等级
				if(AveCapital_240_dayfu1.size()==0)
					AveCapital_240_dayfu1.push_back(capital);
				else
					AveCapital_240_dayfu1.push_back((AveCapital_240_dayfu1.back()*AveCapital_240_dayfu1.size()+capital)/(AveCapital_240_dayfu1.size()+1));
				sum_cot=sum_cot+capital;
				sum_count=sum_count+1;
			}			
		}

		maxRows=vCapital_fu2.size();
		for (int r = 0; r < maxRows; r++)
		{
			t=int(vCapital_fu2[r].m_timeTag);
			pt=gmtime(&t);

			hour=int(pt->tm_hour+8); //得到小时
			minute=int(pt->tm_min);  //得到分
			second=int(pt->tm_sec);  //得到秒
			capital=vCapital_fu2[r].m_fields[0];

			//上午9:30-11:30
			if((hour*3600+minute*60+second>=9*3600+30*60)&&(hour*3600+minute*60+second<11*3600+30*60))
			{
				Capital_240_dayfu2.push_back(capital);
				CapitalDengJi_fu2.push_back((capital-aCotMoveAverage_forFu2)/(0.5*aCotMoveStandard_forFu2));//资金等级
				if(AveCapital_240_dayfu2.size()==0)
					AveCapital_240_dayfu2.push_back(capital);
				else
					AveCapital_240_dayfu2.push_back((AveCapital_240_dayfu2.back()*AveCapital_240_dayfu2.size()+capital)/(AveCapital_240_dayfu2.size()+1));
				sum_cot=sum_cot+capital;
				sum_count=sum_count+1;
			}
			//下午13:00-15:00
			if((hour*3600+minute*60+second>=13*3600)&&(hour*3600+minute*60+second<15*3600))
			{
				Capital_240_dayfu2.push_back(capital);
				CapitalDengJi_fu2.push_back((capital-aCotMoveAverage_forFu2)/(0.5*aCotMoveStandard_forFu2));//资金等级
				if(AveCapital_240_dayfu2.size()==0)
					AveCapital_240_dayfu2.push_back(capital);
				else
					AveCapital_240_dayfu2.push_back((AveCapital_240_dayfu2.back()*AveCapital_240_dayfu2.size()+capital)/(AveCapital_240_dayfu2.size()+1));
				sum_cot=sum_cot+capital;
				sum_count=sum_count+1;
			}
		}

		maxRows=vCapital_fu3.size();
		for (int r = 0; r < maxRows; r++)
		{			
			t=int(vCapital_fu3[r].m_timeTag);
			pt=gmtime(&t);

			hour=int(pt->tm_hour+8); //得到小时
			minute=int(pt->tm_min);  //得到分
			second=int(pt->tm_sec);  //得到秒
			capital=vCapital_fu3[r].m_fields[0];

			//上午9:30-11:30
			if((hour*3600+minute*60+second>=9*3600+30*60)&&(hour*3600+minute*60+second<11*3600+30*60))
			{
				Capital_240_dayfu3.push_back(capital);
				CapitalDengJi_fu3.push_back((capital-aCotMoveAverage_forFu3)/(0.5*aCotMoveStandard_forFu3));//资金等级
				if(AveCapital_240_dayfu3.size()==0)
					AveCapital_240_dayfu3.push_back(capital);
				else
					AveCapital_240_dayfu3.push_back((AveCapital_240_dayfu3.back()*AveCapital_240_dayfu3.size()+capital)/(AveCapital_240_dayfu3.size()+1));
				sum_cot=sum_cot+capital;
				sum_count=sum_count+1;
			}
			//下午13:00-15:00
			if((hour*3600+minute*60+second>=13*3600)&&(hour*3600+minute*60+second<15*3600))
			{
				Capital_240_dayfu3.push_back(capital);
				CapitalDengJi_fu3.push_back((capital-aCotMoveAverage_forFu3)/(0.5*aCotMoveStandard_forFu3));//资金等级
				if(AveCapital_240_dayfu3.size()==0)
					AveCapital_240_dayfu3.push_back(capital);
				else
					AveCapital_240_dayfu3.push_back((AveCapital_240_dayfu3.back()*AveCapital_240_dayfu3.size()+capital)/(AveCapital_240_dayfu3.size()+1));
				sum_cot=sum_cot+capital;
				sum_count=sum_count+1;
			}
		}

		maxRows=vCapital_fu4.size();
		for (int r = 0; r < maxRows; r++)
		{
			t=int(vCapital_fu4[r].m_timeTag);
			pt=gmtime(&t);

			hour=int(pt->tm_hour+8); //得到小时
			minute=int(pt->tm_min);  //得到分
			second=int(pt->tm_sec);  //得到秒
			capital=vCapital_fu4[r].m_fields[0];

			//上午9:30-11:30
			if((hour*3600+minute*60+second>=9*3600+30*60)&&(hour*3600+minute*60+second<11*3600+30*60))
			{
				Capital_240_dayfu4.push_back(capital);
				CapitalDengJi_fu4.push_back((capital-aCotMoveAverage_forFu4)/(0.5*aCotMoveStandard_forFu4));//资金等级
				if(AveCapital_240_dayfu4.size()==0)
					AveCapital_240_dayfu4.push_back(capital);
				else
					AveCapital_240_dayfu4.push_back((AveCapital_240_dayfu4.back()*AveCapital_240_dayfu4.size()+capital)/(AveCapital_240_dayfu4.size()+1));
				sum_cot=sum_cot+capital;
				sum_count=sum_count+1;
			}
			//下午13:00-15:00
			if((hour*3600+minute*60+second>=13*3600)&&(hour*3600+minute*60+second<15*3600))
			{
				Capital_240_dayfu4.push_back(capital);
				CapitalDengJi_fu4.push_back((capital-aCotMoveAverage_forFu4)/(0.5*aCotMoveStandard_forFu4));//资金等级
				if(AveCapital_240_dayfu4.size()==0)
					AveCapital_240_dayfu4.push_back(capital);
				else
					AveCapital_240_dayfu4.push_back((AveCapital_240_dayfu4.back()*AveCapital_240_dayfu4.size()+capital)/(AveCapital_240_dayfu4.size()+1));
				sum_cot=sum_cot+capital;
				sum_count=sum_count+1;
			}
		}

		maxRows=vCapital_fu5.size();
		for (int r = 0; r < maxRows; r++)
		{
			t=int(vCapital_fu5[r].m_timeTag);
			pt=gmtime(&t);

			hour=int(pt->tm_hour+8); //得到小时
			minute=int(pt->tm_min);  //得到分
			second=int(pt->tm_sec);  //得到秒
			capital=vCapital_fu5[r].m_fields[0];

			//上午9:30-11:30
			if((hour*3600+minute*60+second>=9*3600+30*60)&&(hour*3600+minute*60+second<11*3600+30*60))
			{
				Capital_240_dayfu5.push_back(capital);
				CapitalDengJi_fu5.push_back((capital-aCotMoveAverage_forFu5)/(0.5*aCotMoveStandard_forFu5));//资金等级
				if(AveCapital_240_dayfu5.size()==0)
					AveCapital_240_dayfu5.push_back(capital);
				else
					AveCapital_240_dayfu5.push_back((AveCapital_240_dayfu5.back()*AveCapital_240_dayfu5.size()+capital)/(AveCapital_240_dayfu5.size()+1));
				sum_cot=sum_cot+capital;
				sum_count=sum_count+1;
			}
			//下午13:00-15:00
			if((hour*3600+minute*60+second>=13*3600)&&(hour*3600+minute*60+second<15*3600))
			{
				Capital_240_dayfu5.push_back(capital);
				CapitalDengJi_fu5.push_back((capital-aCotMoveAverage_forFu5)/(0.5*aCotMoveStandard_forFu5));//资金等级
				if(AveCapital_240_dayfu5.size()==0)
					AveCapital_240_dayfu5.push_back(capital);
				else
					AveCapital_240_dayfu5.push_back((AveCapital_240_dayfu5.back()*AveCapital_240_dayfu5.size()+capital)/(AveCapital_240_dayfu5.size()+1));
				sum_cot=sum_cot+capital;
				sum_count=sum_count+1;
			}
		}
		ave_capital_last5=sum_cot/sum_count;

		//过去5天的盘面资金全部处理成239个数的列
		int len=0;
		double last_cot=0.0;
		len=AveCapital_240_dayfu1.size();
		last_cot=AveCapital_240_dayfu1.back();
		for(int i=0;i<239-len;i++)
		{
			AveCapital_240_dayfu1.push_back(last_cot);
		}
		len=AveCapital_240_dayfu2.size();
		last_cot=AveCapital_240_dayfu2.back();
		for(int i=0;i<239-len;i++)
		{
			AveCapital_240_dayfu2.push_back(last_cot);
		}
		len=AveCapital_240_dayfu3.size();
		last_cot=AveCapital_240_dayfu3.back();
		for(int i=0;i<239-len;i++)
		{
			AveCapital_240_dayfu3.push_back(last_cot);
		}
		len=AveCapital_240_dayfu4.size();
		last_cot=AveCapital_240_dayfu4.back();
		for(int i=0;i<239-len;i++)
		{
			AveCapital_240_dayfu4.push_back(last_cot);
		}
		len=AveCapital_240_dayfu5.size();
		last_cot=AveCapital_240_dayfu5.back();
		for(int i=0;i<239-len;i++)
		{
			AveCapital_240_dayfu5.push_back(last_cot);
		}
		//资金和资金等级没保证有239个数，暂时不影响
	}
}
void getAveWeimaiWeimaiLast5()
{
	double sum_weimairu=0.0;
	double sum_weimaichu=0.0;

	time_t t=0,pre_t=0;
	struct tm *pt;
	int maxRows=0;
	double weimairu=0.0;
	double weimaichu=0.0;
	int hour=0; 
	int minute=0; 
	int second=0;
	int sum_count=0;

	if(!vweimaiweimai_fu1.empty()&&!vweimaiweimai_fu2.empty()&&!vweimaiweimai_fu3.empty()&&!vweimaiweimai_fu4.empty()&&!vweimaiweimai_fu5.empty())
	{
		maxRows=vweimaiweimai_fu1.size();
		for (int r = 0; r < maxRows; r++)
		{
			t=int(vweimaiweimai_fu1[r].m_timeTag);
			pt=gmtime(&t);

			hour=int(pt->tm_hour+8); //得到小时
			minute=int(pt->tm_min);  //得到分
			second=int(pt->tm_sec);  //得到秒
			weimaichu=vweimaiweimai_fu1[r].m_fields[1];

			//上午9:30-11:30
			if((hour*3600+minute*60+second>=9*3600+30*60)&&(hour*3600+minute*60+second<11*3600+30*60))
			{
				Weimaichu_240_dayfu1.push_back(weimaichu);//资金
				if(AveWeimaichu_240_dayfu1.size()==0)//资金均线
					AveWeimaichu_240_dayfu1.push_back(weimaichu);
				else
					AveWeimaichu_240_dayfu1.push_back((AveWeimaichu_240_dayfu1.back()*AveWeimaichu_240_dayfu1.size()+weimaichu)/(AveWeimaichu_240_dayfu1.size()+1));
				sum_weimaichu=sum_weimaichu+weimaichu;
				sum_count=sum_count+1;
			}
			//下午13:00-15:00
			if((hour*3600+minute*60+second>=13*3600)&&(hour*3600+minute*60+second<15*3600))
			{
				Weimaichu_240_dayfu1.push_back(weimaichu);
				if(AveWeimaichu_240_dayfu1.size()==0)
					AveWeimaichu_240_dayfu1.push_back(weimaichu);
				else
					AveWeimaichu_240_dayfu1.push_back((AveWeimaichu_240_dayfu1.back()*AveWeimaichu_240_dayfu1.size()+weimaichu)/(AveWeimaichu_240_dayfu1.size()+1));
				sum_weimaichu=sum_weimaichu+weimaichu;
				sum_count=sum_count+1;
			}			
		}

		maxRows=vweimaiweimai_fu2.size();
		for (int r = 0; r < maxRows; r++)
		{
			t=int(vweimaiweimai_fu2[r].m_timeTag);
			pt=gmtime(&t);

			hour=int(pt->tm_hour+8); //得到小时
			minute=int(pt->tm_min);  //得到分
			second=int(pt->tm_sec);  //得到秒
			weimaichu=vweimaiweimai_fu2[r].m_fields[1];

			//上午9:30-11:30
			if((hour*3600+minute*60+second>=9*3600+30*60)&&(hour*3600+minute*60+second<11*3600+30*60))
			{
				Weimaichu_240_dayfu2.push_back(weimaichu);//资金
				if(AveWeimaichu_240_dayfu2.size()==0)//资金均线
					AveWeimaichu_240_dayfu2.push_back(weimaichu);
				else
					AveWeimaichu_240_dayfu2.push_back((AveWeimaichu_240_dayfu2.back()*AveWeimaichu_240_dayfu2.size()+weimaichu)/(AveWeimaichu_240_dayfu2.size()+1));
				sum_weimaichu=sum_weimaichu+weimaichu;
				sum_count=sum_count+1;
			}
			//下午13:00-15:00
			if((hour*3600+minute*60+second>=13*3600)&&(hour*3600+minute*60+second<15*3600))
			{
				Weimaichu_240_dayfu2.push_back(weimaichu);
				if(AveWeimaichu_240_dayfu2.size()==0)
					AveWeimaichu_240_dayfu2.push_back(weimaichu);
				else
					AveWeimaichu_240_dayfu2.push_back((AveWeimaichu_240_dayfu2.back()*AveWeimaichu_240_dayfu2.size()+weimaichu)/(AveWeimaichu_240_dayfu2.size()+1));
				sum_weimaichu=sum_weimaichu+weimaichu;
				sum_count=sum_count+1;
			}			
		}

		maxRows=vweimaiweimai_fu3.size();
		for (int r = 0; r < maxRows; r++)
		{
			t=int(vweimaiweimai_fu3[r].m_timeTag);
			pt=gmtime(&t);

			hour=int(pt->tm_hour+8); //得到小时
			minute=int(pt->tm_min);  //得到分
			second=int(pt->tm_sec);  //得到秒
			weimaichu=vweimaiweimai_fu3[r].m_fields[1];

			//上午9:30-11:30
			if((hour*3600+minute*60+second>=9*3600+30*60)&&(hour*3600+minute*60+second<11*3600+30*60))
			{
				Weimaichu_240_dayfu3.push_back(weimaichu);//资金
				if(AveWeimaichu_240_dayfu3.size()==0)//资金均线
					AveWeimaichu_240_dayfu3.push_back(weimaichu);
				else
					AveWeimaichu_240_dayfu3.push_back((AveWeimaichu_240_dayfu3.back()*AveWeimaichu_240_dayfu3.size()+weimaichu)/(AveWeimaichu_240_dayfu3.size()+1));
				sum_weimaichu=sum_weimaichu+weimaichu;
				sum_count=sum_count+1;
			}
			//下午13:00-15:00
			if((hour*3600+minute*60+second>=13*3600)&&(hour*3600+minute*60+second<15*3600))
			{
				Weimaichu_240_dayfu3.push_back(weimaichu);
				if(AveWeimaichu_240_dayfu3.size()==0)
					AveWeimaichu_240_dayfu3.push_back(weimaichu);
				else
					AveWeimaichu_240_dayfu3.push_back((AveWeimaichu_240_dayfu3.back()*AveWeimaichu_240_dayfu3.size()+weimaichu)/(AveWeimaichu_240_dayfu3.size()+1));
				sum_weimaichu=sum_weimaichu+weimaichu;
				sum_count=sum_count+1;
			}			
		}

		maxRows=vweimaiweimai_fu4.size();
		for (int r = 0; r < maxRows; r++)
		{
			t=int(vweimaiweimai_fu4[r].m_timeTag);
			pt=gmtime(&t);

			hour=int(pt->tm_hour+8); //得到小时
			minute=int(pt->tm_min);  //得到分
			second=int(pt->tm_sec);  //得到秒
			weimaichu=vweimaiweimai_fu4[r].m_fields[1];

			//上午9:30-11:30
			if((hour*3600+minute*60+second>=9*3600+30*60)&&(hour*3600+minute*60+second<11*3600+30*60))
			{
				Weimaichu_240_dayfu4.push_back(weimaichu);//资金
				if(AveWeimaichu_240_dayfu4.size()==0)//资金均线
					AveWeimaichu_240_dayfu4.push_back(weimaichu);
				else
					AveWeimaichu_240_dayfu4.push_back((AveWeimaichu_240_dayfu4.back()*AveWeimaichu_240_dayfu4.size()+weimaichu)/(AveWeimaichu_240_dayfu4.size()+1));
				sum_weimaichu=sum_weimaichu+weimaichu;
				sum_count=sum_count+1;
			}
			//下午13:00-15:00
			if((hour*3600+minute*60+second>=13*3600)&&(hour*3600+minute*60+second<15*3600))
			{
				Weimaichu_240_dayfu4.push_back(weimaichu);
				if(AveWeimaichu_240_dayfu4.size()==0)
					AveWeimaichu_240_dayfu4.push_back(weimaichu);
				else
					AveWeimaichu_240_dayfu4.push_back((AveWeimaichu_240_dayfu4.back()*AveWeimaichu_240_dayfu4.size()+weimaichu)/(AveWeimaichu_240_dayfu4.size()+1));
				sum_weimaichu=sum_weimaichu+weimaichu;
				sum_count=sum_count+1;
			}			
		}

		maxRows=vweimaiweimai_fu5.size();
		for (int r = 0; r < maxRows; r++)
		{
			t=int(vweimaiweimai_fu5[r].m_timeTag);
			pt=gmtime(&t);

			hour=int(pt->tm_hour+8); //得到小时
			minute=int(pt->tm_min);  //得到分
			second=int(pt->tm_sec);  //得到秒
			weimaichu=vweimaiweimai_fu5[r].m_fields[1];

			//上午9:30-11:30
			if((hour*3600+minute*60+second>=9*3600+30*60)&&(hour*3600+minute*60+second<11*3600+30*60))
			{
				Weimaichu_240_dayfu5.push_back(weimaichu);//资金
				if(AveWeimaichu_240_dayfu5.size()==0)//资金均线
					AveWeimaichu_240_dayfu5.push_back(weimaichu);
				else
					AveWeimaichu_240_dayfu5.push_back((AveWeimaichu_240_dayfu5.back()*AveWeimaichu_240_dayfu5.size()+weimaichu)/(AveWeimaichu_240_dayfu5.size()+1));
				sum_weimaichu=sum_weimaichu+weimaichu;
				sum_count=sum_count+1;
			}
			//下午13:00-15:00
			if((hour*3600+minute*60+second>=13*3600)&&(hour*3600+minute*60+second<15*3600))
			{
				Weimaichu_240_dayfu5.push_back(weimaichu);
				if(AveWeimaichu_240_dayfu5.size()==0)
					AveWeimaichu_240_dayfu5.push_back(weimaichu);
				else
					AveWeimaichu_240_dayfu5.push_back((AveWeimaichu_240_dayfu5.back()*AveWeimaichu_240_dayfu5.size()+weimaichu)/(AveWeimaichu_240_dayfu5.size()+1));
				sum_weimaichu=sum_weimaichu+weimaichu;
				sum_count=sum_count+1;
			}			
		}
		//ave_capital_last5=sum_cot/sum_count;

		//过去5天的盘面资金全部处理成239个数的列
		int len=0;
		double last_cot=0.0;
		len=AveWeimaichu_240_dayfu1.size();
		last_cot=AveWeimaichu_240_dayfu1.back();
		for(int i=0;i<239-len;i++)
		{
			AveWeimaichu_240_dayfu1.push_back(last_cot);
		}
		len=AveWeimaichu_240_dayfu2.size();
		last_cot=AveWeimaichu_240_dayfu2.back();
		for(int i=0;i<239-len;i++)
		{
			AveWeimaichu_240_dayfu2.push_back(last_cot);
		}
		len=AveWeimaichu_240_dayfu3.size();
		last_cot=AveWeimaichu_240_dayfu3.back();
		for(int i=0;i<239-len;i++)
		{
			AveWeimaichu_240_dayfu3.push_back(last_cot);
		}
		len=AveWeimaichu_240_dayfu4.size();
		last_cot=AveWeimaichu_240_dayfu4.back();
		for(int i=0;i<239-len;i++)
		{
			AveWeimaichu_240_dayfu4.push_back(last_cot);
		}
		len=AveWeimaichu_240_dayfu5.size();
		last_cot=AveWeimaichu_240_dayfu5.back();
		for(int i=0;i<239-len;i++)
		{
			AveWeimaichu_240_dayfu5.push_back(last_cot);
		}
		//资金和资金等级没保证有239个数，暂时不影响
	}
}
void date_process(int start_date,int end_date)
{	
	date_all.clear();
	date_valid.clear();
	//取日期date_valid
	int fetchTime=time2Seconds(20190226,0);
	vector<MutiTypeDataOneDay> VMT= SyncHistoryData("SH","000001",10002,fetchTime,fetchTime);
	vector<StructDataValue> vdata=zhuanhuan(VMT);
	if(vdata.size()>0)
	{			
		for (int i=0;i<vdata.size();i++)//历史有全天的行数
		{
			//时间处理
			t_real=vdata[i].m_timeTag+30000;//86400数据
			p_real=gmtime(&t_real);

			date_all.push_back((p_real->tm_year+1900)*10000+(p_real->tm_mon+1)*100+p_real->tm_mday);
		}

		for (int i=0;i<date_all.size();i++)
		{
			if (date_all[i] >= start_date && date_all[i] <= end_date)
			{
				date_valid.push_back(date_all[i]);
			}
		}
		cout<<"Date_process_ok!"<<endl;
	}
}
string getContract(int year_month_day,string HeyueTag)
{
	int fetchTime = time2Seconds(year_month_day, 0);


	vector<StructDataValue> p1;
	vector<StructDataValue> p2;

	int year=(year_month_day/10000)%100;
	int month=(year_month_day%10000)/100;

	string s1,s2;

	if(true)
	{
		stringstream ss1;
		string str_year1;
		ss1<<year;
		ss1>>str_year1;

		stringstream ss2;
		string str_year2;
		ss2<<year+1;
		ss2>>str_year2;

		stringstream ss3;
		string str_month1;
		ss3<<month;
		ss3>>str_month1;

		stringstream ss4;
		string str_month2;
		ss4<<month+1;
		ss4>>str_month2;

		if(month<=8)
		{
			s1=HeyueTag+str_year1+"0"+str_month1;
			s2=HeyueTag+str_year1+"0"+str_month2;
		}
		if(month==9)
		{
			s1=HeyueTag+str_year1+"0"+str_month1;
			s2=HeyueTag+str_year1+str_month2;
		}
		if(month==10||month==11)
		{
			s1=HeyueTag+str_year1+str_month1;
			s2=HeyueTag+str_year1+str_month2;
		}
		if(month==12)
		{
			s1=HeyueTag+str_year1+"12";
			s2=HeyueTag+str_year2+"01";
		}
	}
	//当天数据
	vector<MutiTypeDataOneDay> VMT= SyncHistoryData(HeyueTag.c_str(),s1.c_str(),20,fetchTime,fetchTime);
	p1=zhuanhuan(VMT);
	cout<<"pre_process 17-1 ok!--p1.size():"<<p1.size()<<"    "<<s1<<endl;
	os_synget_check<<"pre_process 17-1 ok!-----------p1.size():"<<p1.size()<<"    "<<s1<<endl;
	VMT= SyncHistoryData(HeyueTag.c_str(),s2.c_str(),20,fetchTime,fetchTime);
	p2=zhuanhuan(VMT);
	cout<<"pre_process 17-2 ok!--p2.size():"<<p2.size()<<"    "<<s2<<endl;
	os_synget_check<<"pre_process 17-2 ok!-----------p2.size():"<<p2.size()<<"    "<<s2<<endl;

	//[1]成交量[3]持仓量  改用昨天持仓量判断今天的主力合约20190118，不行，还是改为成交量判断，因为季月合约持仓量有时候最大
	
	if(p1.size()!=0&&p2.size()!=0)
	{
		if(p1.back().m_fields[1]>=p2.back().m_fields[1])
		{
			chicangliang_this_IF=p1.back().m_fields[1];
			return s1;
		}
		else
		{
			chicangliang_this_IF=p2.back().m_fields[1];
			return s2;
		}

		chicangliang_IF.push_back(chicangliang_this_IF);
	}
	if(p1.size()==0&&p2.size()!=0)
	{
		chicangliang_this_IF=p2.back().m_fields[1];
		return s2;
	}
	if(p1.size()!=0&&p2.size()==0)
	{
		chicangliang_this_IF=p1.back().m_fields[1];
		return s1;
	}
	if(p1.size()==0&&p2.size()==0)
		return "0";

}
double getAveHeyueDingichaPre20_shipan(int start_day1,int end_day1,string HeyueTag)
{
	ofstream os_real_heyuedingdicha_pre20("TxtData_Lishi_ZLS/os_real_heyuedingdicha_pre20.txt");
	//实盘需要的20天
	date_process(start_day1,end_day1);
	vector<StructDataValue> vHeyue;
	vector<double> dingdichas_pre20;
	double this_sum=0;
	double aveDingdicha=0;
	double this_max_ifprice=-1e15;
	double this_min_ifprice=1e15;
	for (int i=0;i<date_valid.size();i++)
	{
		cout<<date_valid[date_valid.size()-1-i]<<"-----------H1"<<endl;
		//取主力合约，用昨天合约成交量			
		string contractCode=getContract(date_valid[date_valid.size()-1-i-1],HeyueTag);
		//当天合约价格
		int fetchTime = time2Seconds(date_valid[date_valid.size()-1-i], 0);
		//vHeyue= inter1->fetch(HeyueTag,contractCode,20,fetchTime,fetchTime);
		vector<MutiTypeDataOneDay> VMT= SyncHistoryData(HeyueTag.c_str(),contractCode.c_str(),20,fetchTime,fetchTime);
		vHeyue=zhuanhuan(VMT);
		int heyueChengjiaoliang=vHeyue.back().m_fields[1];//成交量
		int heyueChicangliang=vHeyue.back().m_fields[3];  //持仓量
		if(!vHeyue.empty())
		{
			this_max_ifprice=-1e15;
			this_min_ifprice=1e15;
			for (int j=0;j<vHeyue.size();j++)
			{
				if(vHeyue[j].m_fields[0]>this_max_ifprice)
					this_max_ifprice=vHeyue[j].m_fields[0];
				if(vHeyue[j].m_fields[0]<this_min_ifprice)
					this_min_ifprice=vHeyue[j].m_fields[0];
			}
			dingdichas_pre20.push_back(this_max_ifprice-this_min_ifprice);
			this_sum=this_sum+this_max_ifprice-this_min_ifprice;
			os_real_heyuedingdicha_pre20<<date_valid[date_valid.size()-1-i]<<"  "<<this_max_ifprice-this_min_ifprice<<endl;
		}
		cout<<date_valid[date_valid.size()-1-i]<<"-----------H2"<<endl;

		if(i>=19)
		{
			cout<<"pre20-----------ok"<<endl;
			break;
		}
	}
	aveDingdicha=this_sum/dingdichas_pre20.size();
	os_real_heyuedingdicha_pre20<<"均值:  "<<this_sum/dingdichas_pre20.size()<<endl;
	date_valid.clear();
	date_all.clear();
	return aveDingdicha;
}

void conclude_onday(int num)
{
	if (new_minuteIndexPrice.size()>200)
	{
		double max_price_h1=-1e15;
		double min_price_h1=1e15;
		double max_zhangfu_h1=-1e15;
		double min_zhangfu_h1=1e15;
		double max_price_h2=-1e15;
		double min_price_h2=1e15;
		double max_zhangfu_h2=-1e15;
		double min_zhangfu_h2=1e15;
		//寻找前一小时的最大最小指数
		for (int i=0;i<60;i++)
		{
			if(new_minuteIndexPrice[i]>max_price_h1)
				max_price_h1=new_minuteIndexPrice[i];
			if(new_minuteIndexPrice[i]<min_price_h1)
				min_price_h1=new_minuteIndexPrice[i];
		}
		//寻找前一小时的最大最小涨幅
		for (int i=0;i<60;i++)
		{
			if(vec_IndexPrice_zhangfu[i]>max_zhangfu_h1)
				max_zhangfu_h1=vec_IndexPrice_zhangfu[i];
			if(vec_IndexPrice_zhangfu[i]<min_zhangfu_h1)
				min_zhangfu_h1=vec_IndexPrice_zhangfu[i];
		}
		//寻找后一小时的最大最小指数
		for (int i=180;i<new_minuteIndexPrice.size();i++)
		{
			if(new_minuteIndexPrice[i]>max_price_h2)
				max_price_h2=new_minuteIndexPrice[i];
			if(new_minuteIndexPrice[i]<min_price_h2)
				min_price_h2=new_minuteIndexPrice[i];
		}
		//寻找后一小时的最大最小涨幅
		for (int i=180;i<vec_IndexPrice_zhangfu.size();i++)
		{
			if(vec_IndexPrice_zhangfu[i]>max_zhangfu_h2)
				max_zhangfu_h2=vec_IndexPrice_zhangfu[i];
			if(vec_IndexPrice_zhangfu[i]<min_zhangfu_h2)
				min_zhangfu_h2=vec_IndexPrice_zhangfu[i];
		}

		//判断
		int eyeType=0;
		//单边上涨
		if(max_zhangfu_h2-min_zhangfu_h1>0.008
			&&min_price_h1<new_minuteIndexPrice[120]
		&&new_minuteIndexPrice[120]<max_price_h2)
		{
			eyeType=1;
		}
		//单边下跌
		if(min_zhangfu_h2-max_zhangfu_h1<-0.008
			&&max_price_h1>new_minuteIndexPrice[120]
		&&new_minuteIndexPrice[120]>min_price_h2)
		{
			eyeType=-1;
		}

		//期指顶底差----------------------------------------------------------------
		dingdicha_byday_IF.push_back(max_heyueprice-min_heyueprice);
		double sum_dingdicha=0;
		double this_ave_dingdicha=0;
		int n_use=20;
		if(dingdicha_byday_IF.size()<n_use)
		{
			for (int i=0;i<dingdicha_byday_IF.size();i++)
			{
				sum_dingdicha=sum_dingdicha+dingdicha_byday_IF[dingdicha_byday_IF.size()-1-i];
			}
			this_ave_dingdicha=sum_dingdicha/dingdicha_byday_IF.size();
		}
		else
		{
			for (int i=0;i<n_use;i++)
			{
				sum_dingdicha=sum_dingdicha+dingdicha_byday_IF[dingdicha_byday_IF.size()-1-i];
			}
			this_ave_dingdicha=sum_dingdicha/n_use;
		}
		dingdicha_ave_byday_IF.push_back(this_ave_dingdicha);
		//涨幅顶底差------------------------------------------------------------------
		double max_zhangfu=-1e15;
		double min_zhangfu=1e15;
		for (int i=0;i<vec_IndexPrice_zhangfu.size();i++)
		{
			if(vec_IndexPrice_zhangfu[i]>max_zhangfu)
				max_zhangfu=vec_IndexPrice_zhangfu[i];
			if(vec_IndexPrice_zhangfu[i]<min_zhangfu)
				min_zhangfu=vec_IndexPrice_zhangfu[i];
		}
		dingdicha_zhangfu_index.push_back(max_zhangfu-min_zhangfu);
		double sum_zhangfu=0;
		double this_ave_zhangfu=0;
		if(dingdicha_zhangfu_index.size()<20)
		{
			for (int i=0;i<dingdicha_zhangfu_index.size();i++)
			{
				sum_zhangfu=sum_zhangfu+dingdicha_zhangfu_index[dingdicha_zhangfu_index.size()-1-i];
			}
			this_ave_zhangfu=sum_zhangfu/dingdicha_zhangfu_index.size();
		}
		else
		{
			for (int i=0;i<20;i++)
			{
				sum_zhangfu=sum_zhangfu+dingdicha_zhangfu_index[dingdicha_zhangfu_index.size()-1-i];
			}
			this_ave_zhangfu=sum_zhangfu/20;
		}
		dingdicha_zhangfu_ave_index.push_back(this_ave_zhangfu);
	}
	//过去N天的成交峰值
	int ddd=5;
	if(num>=0)//只有历史回测时才会进行
	{
		Jia_Liang_jianzhiduis_fu5=Jia_Liang_jianzhiduis_fu4;
		Jia_Liang_jianzhiduis_fu4=Jia_Liang_jianzhiduis_fu3;
		Jia_Liang_jianzhiduis_fu3=Jia_Liang_jianzhiduis_fu2;
		Jia_Liang_jianzhiduis_fu2=Jia_Liang_jianzhiduis_fu1;
		Jia_Liang_jianzhiduis_fu1=Jia_Liang_jianzhiduis;
		vector<Jia_Liang> jia_liang_lishi;
		jia_liang_lishi=Jia_Liang_jianzhiduis_fu1;//前1天的
		if(ddd>=2)
			jia_liang_lishi.insert(jia_liang_lishi.end(),Jia_Liang_jianzhiduis_fu2.begin(),Jia_Liang_jianzhiduis_fu2.end());//前2天的
		if(ddd>=3)
			jia_liang_lishi.insert(jia_liang_lishi.end(),Jia_Liang_jianzhiduis_fu3.begin(),Jia_Liang_jianzhiduis_fu3.end());//前3天的
		if(ddd>=4)
			jia_liang_lishi.insert(jia_liang_lishi.end(),Jia_Liang_jianzhiduis_fu4.begin(),Jia_Liang_jianzhiduis_fu4.end());//前4天的
		if(ddd>=5)
			jia_liang_lishi.insert(jia_liang_lishi.end(),Jia_Liang_jianzhiduis_fu4.begin(),Jia_Liang_jianzhiduis_fu4.end());//前5天的

		//以下，合约量价分布处理//////////////////////
		vector<Jia_Liang> jia_liang_jianzhiduis_all;
		for (int i=0;i<jia_liang_lishi.size();i++)
		{
			bool already_has_this_Heyueprice=false;

			//合约价格一更新，就创建所有需要的新键值对，其中的量，在成交量更新时再修改
			double this_jianzhidui_price=jia_liang_lishi[i].heyue_price;
			double this_jianzhidui_liang=jia_liang_lishi[i].heyue_liang;
			if(i==0)//第一次来合约价格
			{
				Jia_Liang JL_jianzhidui;
				JL_jianzhidui.heyue_price=this_jianzhidui_price;			
				JL_jianzhidui.heyue_liang=this_jianzhidui_liang;
				jia_liang_jianzhiduis_all.push_back(JL_jianzhidui);
			}
			else
			{
				for (int k=0;k<jia_liang_jianzhiduis_all.size();k++)
				{
					if(this_jianzhidui_price==jia_liang_jianzhiduis_all[k].heyue_price)
					{
						already_has_this_Heyueprice=true;
						jia_liang_jianzhiduis_all[k].heyue_liang=jia_liang_jianzhiduis_all[k].heyue_liang+this_jianzhidui_liang;
						break;
					}
				}
				if(already_has_this_Heyueprice==false)
				{
					Jia_Liang JL_jianzhidui;
					JL_jianzhidui.heyue_price=this_jianzhidui_price;
					JL_jianzhidui.heyue_liang=this_jianzhidui_liang;
					jia_liang_jianzhiduis_all.push_back(JL_jianzhidui);
				}
			}
		}
		//按合约价格排序
		for (int m=0;m<jia_liang_jianzhiduis_all.size();m++)
		{
			for(int n=m+1;n<jia_liang_jianzhiduis_all.size();n++)
			{
				Jia_Liang tmpJianzhidui;
				if(jia_liang_jianzhiduis_all[n].heyue_price<jia_liang_jianzhiduis_all[m].heyue_price)
				{
					tmpJianzhidui=jia_liang_jianzhiduis_all[m];
					jia_liang_jianzhiduis_all[m]=jia_liang_jianzhiduis_all[n];
					jia_liang_jianzhiduis_all[n]=tmpJianzhidui;
				}
			}
		}
		if(days==1)//检查一下效果
		{
			for (int m=0;m<jia_liang_jianzhiduis_all.size();m++)
			{
				os_JiaLiang_IF_lishi<<jia_liang_jianzhiduis_all[m].heyue_price<<endl;
				os_JiaLiang_IF_lishi<<jia_liang_jianzhiduis_all[m].heyue_liang<<endl;
			}
		}
		os_JiaLiang_size_IF_lishi<<today<<"  "
			<<jia_liang_jianzhiduis_all.size()<<"  "
			<<jia_liang_lishi.size()<<"  "
			<<Jia_Liang_jianzhiduis_fu1.size()<<"  "
			<<Jia_Liang_jianzhiduis_fu2.size()<<"  "
			<<Jia_Liang_jianzhiduis_fu3.size()<<"  "
			<<Jia_Liang_jianzhiduis_fu4.size()<<"  "
			<<Jia_Liang_jianzhiduis_fu5.size()<<"  "
			<<endl;
		//找成交峰值
		if(jia_liang_jianzhiduis_all.size()>0)
		{
			vector<double> liang_ave1;
			int pp1=15;
			for (int i=0;i<jia_liang_jianzhiduis_all.size();i++)
			{
				double sumLiang=0;
				double this_ave=0;
				if(i<pp1)
				{
					for (int c=i;c>=0;c--)
					{
						sumLiang=sumLiang+jia_liang_jianzhiduis_all[c].heyue_liang;
					}
					this_ave=sumLiang/(i+1);
				}
				else
				{
					for (int c=i;c>=i-pp1+1;c--)
					{
						sumLiang=sumLiang+jia_liang_jianzhiduis_all[c].heyue_liang;
					}
					this_ave=sumLiang/pp1;
				}
				liang_ave1.push_back(this_ave);
			}

			vector<double> liang_ave2;
			int pp2=30;
			for (int i=0;i<jia_liang_jianzhiduis_all.size();i++)
			{
				double sumLiang=0;
				double this_ave=0;
				if(i<pp2)
				{
					for (int c=i;c>=0;c--)
					{
						sumLiang=sumLiang+jia_liang_jianzhiduis_all[c].heyue_liang;
					}
					this_ave=sumLiang/(i+1);
				}
				else
				{
					for (int c=i;c>=i-pp2+1;c--)
					{
						sumLiang=sumLiang+jia_liang_jianzhiduis_all[c].heyue_liang;
					}
					this_ave=sumLiang/pp2;
				}
				liang_ave2.push_back(this_ave);
			}
			vector<int> tags;
			int this_tag=0;
			int pre_tag=0;
			for (int i=0;i<liang_ave1.size();i++)
			{
				if(i>0)
				{
					if(liang_ave1[i]>liang_ave2[i]&&liang_ave1[i-1]<=liang_ave2[i-1])
					{
						this_tag=pre_tag+1;
						pre_tag=this_tag;
					}
					if(liang_ave1[i]<liang_ave2[i]&&liang_ave1[i-1]>liang_ave2[i-1])
					{
						this_tag=0;
					}
				}
				tags.push_back(this_tag);
			}
			vector<double> v_max_liang;
			vector<double> v_max_jia;
			for (int i=0;i<tags.size();i++)
			{
				if(i>0)
				{
					if(tags[i-1]!=0&&tags[i]==0)
					{
						vector<double> liang_period;
						vector<double> jia_period;
						for (int c=0;c<tags.size();c++)
						{
							if(tags[c]==tags[i-1])
							{
								liang_period.push_back(jia_liang_jianzhiduis_all[c].heyue_liang);
								jia_period.push_back(jia_liang_jianzhiduis_all[c].heyue_price);
							}
						}
						double max_liang=-1e15;
						double jia_affiliated=0;
						for (int c=0;c<liang_period.size();c++)
						{
							if(liang_period[c]>max_liang)
							{
								max_liang=liang_period[c];
								jia_affiliated=jia_period[c];
							}
						}
						v_max_liang.push_back(max_liang);
						v_max_jia.push_back(jia_affiliated);
					}
				}
			}
			//近邻峰值合并
			vector<double> chengjiaofengzhi_ok_lishi;
			if(false)//先不合并
			{
				for (int i=0;i<v_max_liang.size();i++)
				{
					double sum=0;
					double n=0;
					int now_i=0;
					for (int j=i;j<v_max_liang.size();j++)
					{					
						if(v_max_jia[j]-v_max_jia[i]<15)
						{
							sum=sum+v_max_jia[j];//包括自己，最后再求平均
							n=n+1;
							now_i=j;
						}
						else
						{
							break;
						}
					}
					chengjiaofengzhi_ok_lishi.push_back(sum/n);
					cout<<chengjiaofengzhi_ok_lishi.back()<<endl;
					i=now_i;//这里不用加1，for会再自动加1
				}
			}
			//chengjiaofengzhi_ok_lishi=v_max_jia;//先不合并
			//去掉量很小的峰值
			double zuida_liang=-1e15;
			for (int i=0;i<v_max_liang.size();i++)
			{
				if(v_max_liang[i]>zuida_liang)
				{
					zuida_liang=v_max_liang[i];
				}
			}
			vector<double> v_max_liang_GT;
			vector<double> v_max_jia_GT;
			for (int i=0;i<v_max_liang.size();i++)
			{
				if(v_max_liang[i]>zuida_liang/3)
				{
					v_max_liang_GT.push_back(v_max_liang[i]);
					v_max_jia_GT.push_back(v_max_jia[i]);
				}
			}

			v_chengjiaofengzhi_lishi=v_max_jia_GT;
			v_chengjiaofengzhi_liang_lishi=v_max_liang_GT;			

			os_JiaLiang_IF_fengzhi_all_check<<today<<"  ";
			for (int i=0;i<v_chengjiaofengzhi_lishi.size();i++)
			{
				os_JiaLiang_IF_fengzhi_all_check<<v_chengjiaofengzhi_lishi[i]<<"  ";
			}
			os_JiaLiang_IF_fengzhi_all_check<<endl;
			if(days==1)//检查一下效果
			{
				for (int i=0;i<v_chengjiaofengzhi_lishi.size();i++)
				{
					os_JiaLiang_IF_fengzhi<<v_chengjiaofengzhi_lishi[i]<<endl;
					os_JiaLiang_IF_fengzhi<<v_chengjiaofengzhi_liang_lishi[i]<<endl;
				}
			}
		}
	}
	
	if(days==1)
	{
		//IF量价分布
		for (int m=0;m<Jia_Liang_jianzhiduis.size();m++)
		{
			os_JiaLiang_IF<<Jia_Liang_jianzhiduis[m].heyue_price<<endl;
			os_JiaLiang_IF<<Jia_Liang_jianzhiduis[m].heyue_liang<<endl;
			//IF合约，IC合约已验证
		}
		//波动
		//补最后一个点
		double max_bu=-100000;
		double min_bu=100000;
		int i_bu=0;
		if(new_minuteIndexPrice.size()>0)
		{
			if(bodong_min_i.size()>0&&bodong_max_i.size()>0)
			{
				if (bodong_min_i.back()>bodong_max_i.back()) //最后一个是低点  补个高点
				{
					for(int m=bodong_min_i.back();m<new_minuteIndexPrice.size();m++)
					{
						if (new_minuteIndexPrice[m]>max_bu)
						{
							max_bu=new_minuteIndexPrice[m];
							i_bu=m;
						}
					}
					bodong_max_i.push_back(i_bu);
					bodong_max_price.push_back(max_bu);
				}
				else  //最后一个是高点  补个低点
				{
					for (int m=bodong_max_i.back();m<new_minuteIndexPrice.size();m++)
					{
						if (new_minuteIndexPrice[m]<min_bu)
						{
							min_bu=new_minuteIndexPrice[m];
							i_bu=m;
						}
					}
					bodong_min_i.push_back(i_bu);
					bodong_min_price.push_back(min_bu);
				}
				for (int m=0;m<bodong_max_i.size();m++)
				{
					os_bodong_ding<<bodong_max_i[m]<<endl;
					os_bodong_ding<<bodong_max_price[m]<<endl;
				}
				for (int m=0;m<bodong_min_price.size();m++)
				{
					os_bodong_di<<bodong_min_i[m]<<endl;
					os_bodong_di<<bodong_min_price[m]<<endl;
				}
			}
			for (int m=0;m<new_minuteIndexPrice.size();m++)
			{
				os_bodong_minuteindexprice<<new_minuteIndexPrice[m]<<endl;
			}
		}
	}
}
void kaicang_record(int duo_or_kong)
{
	hasChicangIF=duo_or_kong;

	//记录开仓值
	open_price_IF=pre_Heyueprice;	
	open_hour_IF=int(pt_ctrl->tm_hour+8);//IF
	open_minute_IF=int(pt_ctrl->tm_min);
	open_second_IF=int(pt_ctrl->tm_sec);
	open_zhulidengji=this_ZLDJ;
	open_zijindengji=this_ZJDJ;
	open_weibidengji=this_WBDJ;
	open_donglidengji=this_DLDJ;
	open_lishang=(max_heyueprice-pre_Heyueprice)/dingdicha_standard_IF;
	open_lixia=(pre_Heyueprice-min_heyueprice)/dingdicha_standard_IF;
	open_bodong_count=bodong_count;
	open_zhangdiebi=zhangdiebi;
	open_S_shang_chu_xia=S_junxian_shang/S_junxian_xia;
	open_li_junxian=(pre_indexPrice-ave_price.back())/ave_price.back();
	open_zhangfu_index=this_zhangfu_indexPrice;
	//新增20190522
	open_beili_state=now_is_beili;
	open_dingbeili_count=count_dingbeili;
	open_dibeili_count=count_dibeili;
	open_indexprice=new_minuteIndexPrice.back();
	open_ave_indexprice=ave_price.back();
	open_youbaofa=youBaofa_10s;//用于禁止开导向仓的爆发
	open_1_4_IF=if_1_4_10s;
	open_2_4_IF=if_2_4_10s;
	open_3_4_IF=if_3_4_10s;
	open_indexprice_whenbeili=indexPrice_when_beili;
	open_baofakai_allow=baofa_kai_allow;//用于允许开对顶的爆发
	open_kaicangleixing=open_state_JuJi_IF;
	open_dingdicha_standard=dingdicha_standard_IF;
	open_ZLDJ_tag=this_ZLDJ_tag;
	open_ZJDJ_tag=this_ZJDJ_tag;
	open_WBDJ_tag=this_WBDJ_tag;
	open_DLDJ_tag=this_DLDJ_tag;
	open_weituobi=this_weituobi;
	//---------------以上20190522
	//open_feng_count_IF=feng_price.size();
	//open_gu_count_IF=gu_price.size();
	open_feng_count_IF=xunfeng_dlx_zouping_use_ding_10s.size();
	open_gu_count_IF=xunfeng_dlx_zouping_use_di_10s.size();
	open_market_direction_IF=market_direction;
	kaicangleixing=open_state_JuJi_IF;
	kaicangleixing_keep=open_state_JuJi_IF;

	open_zhicheng_pingfen_IF=zhichengpingfen;
	open_paoya_pingfen_IF=paoyapingfen;
	open_zhuli_pingfen_IF=new_minuteZhuLipingfen.back();
	open_weizhi_pingfen_IF=this_weizhipingfen;
	open_newminuteindex_size=new_minuteIndexPrice.size();

	open_chengjiaofengzhi=this_chengjiaofengzhi;
	open_chengjiaofengzhi_shangxian=this_chengjiaofengzhi_shangxian;
	open_chengjiaofengzhi_xiaxian=this_chengjiaofengzhi_xiaxian;

	open_lishi_chengjiaofengzhi_shangxian=lishi_chengjiaofengzhi_shangxian;
	open_lishi_chengjiaofengzhi_xiaxian=lishi_chengjiaofengzhi_xiaxian;
	open_lishi_chengjiaofengzhi_maxliang=lishi_chengjiaofengzhi_liangmax;

	//复位
	max_fuying=-10000;
	min_fukui=10000;

	//-----------

	os_kaipinglog_IF_check<<today<<"  "<<pt_ctrl->tm_hour+8<<":"<<pt_ctrl->tm_min<<":"<<pt_ctrl->tm_sec<<"    ";
	if(duo_or_kong>0)
	{
		os_kaipinglog_IF_check<<"开多"<<open_state_JuJi_IF<<"  ";
	}
	else
	{
		os_kaipinglog_IF_check<<"开空"<<open_state_JuJi_IF<<"  ";
	}
	os_kaipinglog_IF_check<<"市场方向："<<market_direction<<"  "
		<<"波数："<<bodong_count<<"  "
		<<"涨幅："<<this_zhangfu_indexPrice<<"  "
		<<"涨跌比："<<zhangdiebi<<"  "
		<<"S上下比："<<S_junxian_shang/S_junxian_xia<<"  "
		<<"离均线："<<(pre_indexPrice-ave_price.back())/ave_price.back()*100<<"%  "
		<<"循环次数："<<xunhuancishu<<"  "
		<<"主力等级："<<this_ZLDJ<<"  "
		<<"资金等级："<<this_ZJDJ<<"  "
		<<"委比等级："<<this_WBDJ<<"  "
		<<"动力等级："<<this_DLDJ<<"  "
		<<"支撑评分："<<zhichengfen_modified_hebing.back()<<" + "<<zhangfu_pingfen_fu1<<"  "
		<<"抛压评分："<<paoyapingfen<<"  "
		<<"主力评分："<<zhulipingfen<<"  "
		<<"位置评分："<<this_weizhipingfen<<"  "
		<<"成交峰值上线："<<this_chengjiaofengzhi_shangxian<<"  "
		<<"成交峰值："<<this_chengjiaofengzhi<<"  "
		<<"成交峰值下线："<<this_chengjiaofengzhi_xiaxian<<"  "
		<<"合约价格："<<pre_Heyueprice<<"  "
		<<"中间位峰值序号："<<middle_tt<<"  "
		<<"参考期指顶底差："<<dingdicha_standard_IF<<"  "
		<<"参考天数："<<need_days<<"  "<<endl;
	os_kaipinglog_IF_check<<"                                           "
		<<"历史上线："<<open_lishi_chengjiaofengzhi_shangxian<<"  "
		<<"历史下线："<<open_lishi_chengjiaofengzhi_xiaxian<<"  "
		<<"历史峰值："<<open_lishi_chengjiaofengzhi_maxliang<<"  "
		<<"当前价格："<<pre_Heyueprice<<endl;

	//--------------------------------------------------------------------------------------------
}
void pingcang_record(int pingcangfangshi)
{
	hasChicangIF=0;

	//复位
	now_is_big_fukui_IF=false;
	now_is_big_fuying_IF=false;	
	has_tupo_shangxian=false;
	has_diepo_xiaxian=false;

	ping_price_IF=pre_Heyueprice;
	ping_newminuteindex_size=new_minuteIndexPrice.size();

	fangxiangmaodun=true;
	maodunshi_ding_count=xunfeng_dlx_zouping_use_ding_10s.size();
	maodunshi_di_count=xunfeng_dlx_zouping_use_di_10s.size();

	this_earning=0;
	if(pingcangfangshi>0)
	{
		this_earning=pre_Heyueprice-open_price_IF-(pre_Heyueprice+open_price_IF)*0.4/10000;
	}
	else
	{
		this_earning=open_price_IF-pre_Heyueprice-(pre_Heyueprice+open_price_IF)*0.4/10000;
	}
	vEarnings_today.push_back(this_earning);
	sum_earning_today=sum_earning_today+this_earning;//今天的总收益

	string pingcangName="";
	if(fabs(pingcangfangshi)==1)
	{
		pingcangName="止盈平仓";
	}
	if(fabs(pingcangfangshi)==2)
	{
		pingcangName="止损平仓";
	}
	if(fabs(pingcangfangshi)==3)
	{
		pingcangName="时间平仓";
	}
	if(fabs(pingcangfangshi)==4)
	{
		pingcangName="反向平仓";
	}
	if(fabs(pingcangfangshi)==5)
	{
		pingcangName="40分平仓";
	}
	if(fabs(pingcangfangshi)==6)
	{
		pingcangName="爆发平仓";
	}
	if(fabs(pingcangfangshi)==7)
	{
		pingcangName="数浪平仓";
	}
	if(fabs(pingcangfangshi)==8)
	{
		pingcangName="评分平仓";
	}
	if(fabs(pingcangfangshi)==10)
	{
		pingcangName="导向平仓";
	}
	if(fabs(pingcangfangshi)==11)
	{
		pingcangName="峰值不利1平仓";
	}
	if(fabs(pingcangfangshi)==12)
	{
		pingcangName="峰值不利2平仓";
	}
	if(fabs(pingcangfangshi)==13)
	{
		pingcangName="背离平仓";
	}
	if(fabs(pingcangfangshi)==14)
	{
		pingcangName="动力线平仓";
	}
	if(fabs(pingcangfangshi)==20)
	{
		pingcangName="反弹平仓";
	}
	if(fabs(pingcangfangshi)==24)
	{
		pingcangName="抵抗平仓";
	}
	if(fabs(pingcangfangshi)==25)
	{
		pingcangName="坚挺平仓";
	}
	if(fabs(pingcangfangshi)==26)
	{
		pingcangName="峰值止损";
	}
	if(fabs(pingcangfangshi)==27)
	{
		pingcangName="峰值止盈";
	}
	//--------------------------------------------------------------------------------------------------
	os_kaipinglog_IF_check<<today<<"  "<<pt_ctrl->tm_hour+8<<":"<<pt_ctrl->tm_min<<":"<<pt_ctrl->tm_sec<<"    "
		//<<"40分平空"<<"  "
		<<"平仓:"<<pingcangName<<"  "
		<<"市场方向："<<market_direction<<"  "      //局部
		<<"波数："<<bodong_count<<"  "            
		<<"涨幅："<<this_zhangfu_indexPrice<<"  "
		<<"涨跌比："<<zhangdiebi<<"  "
		<<"S上下比："<<S_junxian_shang/S_junxian_xia<<"  "
		<<"离均线："<<(pre_indexPrice-ave_price.back())/ave_price.back()*100<<"%  "
		<<"循环次数："<<xunhuancishu<<"  "
		<<"主力等级："<<this_ZLDJ<<"  "
		<<"资金等级："<<this_ZJDJ<<"  "
		<<"委比等级："<<this_WBDJ<<"  "
		<<"动力等级："<<this_DLDJ<<"  "
		<<"支撑评分："<<zhichengfen_modified_hebing.back()<<" + "<<zhangfu_pingfen_fu1<<"  "
		<<"抛压评分："<<paoyapingfen<<"  "  //局部
		<<"主力评分："<<zhulipingfen<<"  "  //局部
		<<"位置评分："<<this_weizhipingfen<<"  "
		<<"成交峰值上线："<<this_chengjiaofengzhi_shangxian<<"  "   //局部
		<<"成交峰值："<<this_chengjiaofengzhi<<"  "   //局部
		<<"成交峰值下线："<<this_chengjiaofengzhi_xiaxian<<"  "   //局部
		<<"合约价格："<<pre_Heyueprice<<"  "
		<<"中间位峰值序号："<<middle_tt<<"  "   //局部
		<<"参考期指顶底差："<<dingdicha_standard_IF<<"  "
		<<"参考天数："<<need_days<<"  "
		<<"本单收益："<<this_earning<<endl;
	os_kaipinglog_IF_check<<"                                           "
		<<"历史上线："<<open_lishi_chengjiaofengzhi_shangxian<<"  "
		<<"历史下线："<<open_lishi_chengjiaofengzhi_xiaxian<<"  "
		<<"历史峰值："<<open_lishi_chengjiaofengzhi_maxliang<<"  "
		<<"当前价格："<<pre_Heyueprice<<endl;

	//--------------------------------------------------------------------------------------------------

	//-----------------

	os_kaipinglog_IF_huatu<<today<<endl;
	os_kaipinglog_IF_huatu<<this_earning<<endl;
	os_kaipinglog_IF_huatu<<pingcangfangshi<<endl;
	os_kaipinglog_IF_huatu<<open_market_direction_IF<<endl;
	os_kaipinglog_IF_huatu<<new_minuteIndexPrice.size()-open_newminuteindex_size<<endl;//新增
	os_kaipinglog_IF_huatu<<dingdicha_standard_IF<<endl;
	os_kaipinglog_IF_huatu<<dingdicha_zhangfu_standard_index<<endl;
	os_kaipinglog_IF_huatu<<open_price_IF<<endl;
	os_kaipinglog_IF_huatu<<max_fuying<<endl;
	os_kaipinglog_IF_huatu<<min_fukui<<endl;
	os_kaipinglog_IF_huatu<<pre_indexPrice<<endl;
	os_kaipinglog_IF_huatu<<kaicangleixing<<endl;

	//加10个
	os_kaipinglog_IF_huatu<<huanshoulv_fu1<<endl;
	os_kaipinglog_IF_huatu<<open_hour_IF<<endl;
	os_kaipinglog_IF_huatu<<open_minute_IF<<endl;
	os_kaipinglog_IF_huatu<<open_second_IF<<endl;
	os_kaipinglog_IF_huatu<<open_zhulidengji<<endl;
	os_kaipinglog_IF_huatu<<open_zijindengji<<endl;
	os_kaipinglog_IF_huatu<<open_weibidengji<<endl;
	os_kaipinglog_IF_huatu<<open_donglidengji<<endl;
	os_kaipinglog_IF_huatu<<open_lishang<<endl;
	os_kaipinglog_IF_huatu<<open_lixia<<endl;
	//再加10个
	os_kaipinglog_IF_huatu<<open_bodong_count<<endl;
	os_kaipinglog_IF_huatu<<open_zhangdiebi<<endl;
	os_kaipinglog_IF_huatu<<zhangdiebi<<endl;
	os_kaipinglog_IF_huatu<<open_S_shang_chu_xia<<endl;
	os_kaipinglog_IF_huatu<<open_li_junxian<<endl;
	os_kaipinglog_IF_huatu<<open_zhangfu_index<<endl;
	os_kaipinglog_IF_huatu<<open_zhicheng_pingfen_IF<<endl;
	os_kaipinglog_IF_huatu<<open_paoya_pingfen_IF<<endl;
	os_kaipinglog_IF_huatu<<open_zhuli_pingfen_IF<<endl;
	os_kaipinglog_IF_huatu<<open_weizhi_pingfen_IF<<endl;
	//再加40个20190522
	os_kaipinglog_IF_huatu<<open_beili_state<<endl;
	os_kaipinglog_IF_huatu<<open_dingbeili_count<<endl;
	os_kaipinglog_IF_huatu<<open_dibeili_count<<endl;
	os_kaipinglog_IF_huatu<<open_chengjiaofengzhi<<endl;
	os_kaipinglog_IF_huatu<<open_chengjiaofengzhi_xiaxian<<endl;
	os_kaipinglog_IF_huatu<<open_chengjiaofengzhi_shangxian<<endl;
	os_kaipinglog_IF_huatu<<open_indexprice<<endl;
	os_kaipinglog_IF_huatu<<open_ave_indexprice<<endl;
	os_kaipinglog_IF_huatu<<open_youbaofa<<endl;
	os_kaipinglog_IF_huatu<<open_price_IF<<endl;
	os_kaipinglog_IF_huatu<<open_1_4_IF<<endl;
	os_kaipinglog_IF_huatu<<open_2_4_IF<<endl;
	os_kaipinglog_IF_huatu<<open_3_4_IF<<endl;
	os_kaipinglog_IF_huatu<<open_indexprice_whenbeili<<endl;
	os_kaipinglog_IF_huatu<<open_baofakai_allow<<endl;
	os_kaipinglog_IF_huatu<<open_kaicangleixing<<endl;
	os_kaipinglog_IF_huatu<<open_dingdicha_standard<<endl;
	os_kaipinglog_IF_huatu<<open_ZLDJ_tag<<endl;
	os_kaipinglog_IF_huatu<<open_ZJDJ_tag<<endl;
	os_kaipinglog_IF_huatu<<open_WBDJ_tag<<endl;
	os_kaipinglog_IF_huatu<<open_DLDJ_tag<<endl;
	os_kaipinglog_IF_huatu<<open_weituobi<<endl;//新增一个委托比20200331
	os_kaipinglog_IF_huatu<<0<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	os_kaipinglog_IF_huatu<<000<<endl;
	//--------------------------------------------------------------------------------------------------
	//新增
	if(pingcangfangshi>0&&this_earning>10&&this_earning>dingdicha_standard_IF/8)
	{
		open_duo_count = open_duo_count + 1;
	}
	if(pingcangfangshi<0&&this_earning>10&&this_earning>dingdicha_standard_IF/8)
	{
		open_kong_count = open_kong_count + 1;
	}
	kaicangleixing=0;
}
void Init_ByDay()
{
	//上证指数//////////////////////////////////////////////////////////////
	//45指数价格(秒)
	//20合约价格
	vPrice.clear();    //指数价格
	Heyue_Info.clear();  //合约价格
	pingfen.clear();   //指数评分
	vpingfen_SH000001.clear();
	weimaiweimai.clear();//委卖委买
	vIndexAmount.clear();  //成交量和成交额
	//主力等级需要以下
	//exprs="((1.05659*(%1%)-(%2%))/((%3%)) - 0) / (0.7 * (%4%))"
	Indexchengjiaoe.clear();//分钟数据
	DaneipanDawaipan.clear();//分钟数据
	vMovedata.clear();       //日数据
	vCapital.clear();//盘面资金
	vCapital_fu1.clear();//盘面资金
	vCapital_fu2.clear();//盘面资金
	vCapital_fu3.clear();//盘面资金
	vCapital_fu4.clear();//盘面资金
	vCapital_fu5.clear();//盘面资金

	indexprice_ave_today.clear();
	indexprice_ave_fu1.clear();//指数均线
	indexprice_ave_fu2.clear();
	indexprice_ave_fu3.clear();
	indexprice_ave_fu4.clear();
	indexprice_ave_fu5.clear();
	indexprice_compare_pingfen.clear();

	vweimaiweimai_fu1.clear();//委托额
	vweimaiweimai_fu2.clear();//委托额
	vweimaiweimai_fu3.clear();//委托额
	vweimaiweimai_fu4.clear();//委托额
	vweimaiweimai_fu5.clear();//委托额

	//并列界面的期货动力线需要3个
	vecSecForceXD.clear();
	vecEMACQuantity.clear();
	vecCommonRating.clear();
	vecSecForceXD1.clear();
	vecEMACQuantity1.clear();
	vecCommonRating1.clear();
	vecSecForceXD2.clear();
	vecEMACQuantity2.clear();
	vecCommonRating2.clear();

	//计算指数资金等级
	vPreviousCotDataByDay.clear();//日数据
	vCotMoveAverage.clear();
	vCotMoveStandard.clear();
	aCotMoveAverage_forToday=0.0;
	aCotMoveStandard_forToday=0.0;
	CapitalDengJi.clear();
	aCotMoveAverage_forFu1=0.0;
	aCotMoveAverage_forFu2=0.0;
	aCotMoveAverage_forFu3=0.0;
	aCotMoveAverage_forFu4=0.0;
	aCotMoveAverage_forFu5=0.0;
	aCotMoveStandard_forFu1=0.0;
	aCotMoveStandard_forFu2=0.0;
	aCotMoveStandard_forFu3=0.0;
	aCotMoveStandard_forFu4=0.0;
	aCotMoveStandard_forFu5=0.0;
	CapitalDengJi_fu1.clear();
	CapitalDengJi_fu2.clear();
	CapitalDengJi_fu3.clear();
	CapitalDengJi_fu4.clear();
	CapitalDengJi_fu5.clear();

	//昨日指数收盘价
	vec_pre_IndexPrice.clear();
	yesterday_shoupanjia_indexPrice=0.0;

	vWBDJ38.clear();
	vWBDJ10073.clear();

	vecStruct1.clear();
	vecStruct2.clear();
	vecStruct3.clear();
	vecStruct4.clear();
	vecStruct5.clear();
	vecStruct6.clear();
	vecStruct7.clear();
	vecStruct8.clear();

	//date_all;
	//date_valid;
	vvPrice.clear();
	//指数价格
	hour_new_original_secondIndexPrice.clear();
	minute_new_original_secondIndexPrice.clear();
	second_new_original_secondIndexPrice.clear();
	new_original_secondIndexPrice.clear();
	new_14400_indexpriceTimeflag.clear();
	hour_new_14400_secondIndexPrice.clear();
	minute_new_14400_secondIndexPrice.clear();
	second_new_14400_secondIndexPrice.clear();
	new_14400_secondIndexPrice.clear();
	//add
	hour_new_minuteIndexPrice.clear();
	minute_new_minuteIndexPrice.clear();
	second_new_minuteIndexPrice.clear();
	new_minuteIndexPrice.clear();
	//指数盘面资金
	hour_new_original_secondCapital.clear();
	minute_new_original_secondCapital.clear();
	second_new_original_secondCapital.clear();
	new_original_secondCapital.clear();
	new_14400_capitalTimeflag.clear();
	hour_new_14400_secondCapital.clear();
	minute_new_14400_secondCapital.clear();
	second_new_14400_secondCapital.clear();
	new_14400_secondCapital.clear();
	//add
	hour_new_minuteCapital.clear();
	minute_new_minuteCapital.clear();
	second_new_minuteCapital.clear();
	new_minuteCapital.clear();
	//合约价格
	hour_new_original_secondHeyuePrice.clear();
	minute_new_original_secondHeyuePrice.clear();
	second_new_original_secondHeyuePrice.clear();
	new_original_secondHeyuePrice.clear();
	new_original_secondHeyueAmount.clear();
	new_14400_heyuepriceTimeflag.clear();
	hour_new_14400_secondHeyuePrice.clear();
	minute_new_14400_secondHeyuePrice.clear();
	second_new_14400_secondHeyuePrice.clear();
	new_14400_secondHeyuePrice.clear();
	new_14400_secondHeyueAmount.clear();
	//add
	new_14400_ifpriceTimeflag.clear();
	hour_new_14400_secondIFPrice.clear();
	minute_new_14400_secondIFPrice.clear();
	second_new_14400_secondIFPrice.clear();
	new_14400_secondIFPrice.clear();
	new_14400_secondIFAmount.clear();
	hour_new_minuteHeyuePrice.clear();
	minute_new_minuteHeyuePrice.clear();
	second_new_minuteHeyuePrice.clear();
	new_minuteHeyuePrice.clear();
	new_minuteHeyueAmount.clear();
	//指数评分
	hour_new_original_secondPingfen.clear();
	minute_new_original_secondPingfen.clear();
	second_new_original_secondPingfen.clear();
	new_original_secondPingfen1.clear();
	new_original_secondPingfen2.clear();
	new_original_secondPingfen3.clear();
	new_14400_pinfenTimeflag.clear();
	hour_new_14400_secondPingfen.clear();
	minute_new_14400_secondPingfen.clear();
	second_new_14400_secondPingfen.clear();
	new_14400_secondZhuLipingfen.clear();
	new_14400_secondZhiChengpingfen.clear();
	new_14400_secondPaoYapingfen.clear();
	//add
	hour_new_minutePingFen.clear();
	minute_new_minutePingFen.clear();
	second_new_minutePingFen.clear();
	new_minuteZhuLipingfen.clear();
	new_minuteZhiChengpingfen.clear();//已对照
	new_minutePaoYapingfen.clear();
	//上证指数评分
	hour_new_original_secondPingfen_SH000001.clear();
	minute_new_original_secondPingfen_SH000001.clear();
	second_new_original_secondPingfen_SH000001.clear();
	new_original_secondPingfen1_SH000001.clear();
	new_original_secondPingfen2_SH000001.clear();
	new_original_secondPingfen3_SH000001.clear();
	new_14400_pinfenTimeflag_SH000001.clear();
	hour_new_14400_secondPingfen_SH000001.clear();
	minute_new_14400_secondPingfen_SH000001.clear();
	second_new_14400_secondPingfen_SH000001.clear();
	new_14400_secondZhuLipingfen_SH000001.clear();
	new_14400_secondZhiChengpingfen_SH000001.clear();
	new_14400_secondPaoYapingfen_SH000001.clear();
	//add
	hour_new_minutePingFen_SH000001.clear();
	minute_new_minutePingFen_SH000001.clear();
	second_new_minutePingFen_SH000001.clear();
	new_minuteZhuLipingfen_SH000001.clear();
	new_minuteZhiChengpingfen_SH000001.clear();//已对照
	new_minutePaoYapingfen_SH000001.clear();
	//指数委卖委买额
	hour_new_original_secondWeimaiWeimai.clear();
	minute_new_original_secondWeimaiWeimai.clear();
	second_new_original_secondWeimaiWeimai.clear();
	new_original_secondWeimairu.clear();
	new_original_secondWeimaichu.clear();
	new_14400_weimaiweimaiTimeflag.clear();
	hour_new_14400_secondWeimaiWeimai.clear();
	minute_new_14400_secondWeimaiWeimai.clear();
	second_new_14400_secondWeimaiWeimai.clear();
	new_14400_secondweimairu.clear();
	new_14400_secondweimaichu.clear();
	//add
	hour_new_minuteWeimaiWeimai.clear();
	minute_new_minuteWeimaiWeimai.clear();
	second_new_minuteWeimaiWeimai.clear();
	new_minuteWeimairu.clear();
	new_minuteWeimaichu.clear();
	new_minuteWeimaichu_junxian.clear();
	//指数成交额和成交量  原来各处用的成交量秒数据
	hour_new_original_secondELiang.clear();
	minute_new_original_secondELiang.clear();
	second_new_original_secondELiang.clear();
	new_original_secondE.clear();
	new_original_secondLiang.clear();
	new_14400_ELiangTimeflag.clear();
	hour_new_14400_secondELiang.clear();
	minute_new_14400_secondELiang.clear();
	second_new_14400_secondELiang.clear();
	new_14400_secondE.clear();
	new_14400_secondLiang.clear();
	//add
	hour_new_minuteELiang.clear();
	minute_new_minuteELiang.clear();
	second_new_minuteELiang.clear();
	new_minuteE.clear();
	new_minuteLiang.clear();
	//以下指数主力等级////////////////
	//成交额  主力等级用到的成交额分钟数据
	hour_new_original_secondZLDJe.clear();
	minute_new_original_secondZLDJe.clear();
	second_new_original_secondZLDJe.clear();
	new_original_secondZLDJe.clear();
	new_14400_ZLDJeTimeFlag.clear();
	hour_new_14400_secondZLDJe.clear();
	minute_new_14400_secondZLDJe.clear();
	second_new_14400_secondZLDJe.clear();
	new_14400_secondZLDJe.clear();
	//add
	hour_new_minuteZLDJe.clear();
	minute_new_minuteZLDJe.clear();
	second_new_minuteZLDJe.clear();
	new_minuteZLDJe.clear();
	//指数大内盘额和大外盘额
	hour_new_original_secondDaNeiWaie.clear();
	minute_new_original_secondDaNeiWaie.clear();
	second_new_original_secondDaNeiWaie.clear();
	new_original_secondDaNeie.clear();
	new_original_secondDaWaie.clear();
	new_14400_DaNeiWaieTimeflag.clear();
	hour_new_14400_secondDaNeiWaie.clear();
	minute_new_14400_secondDaNeiWaie.clear();
	second_new_14400_secondDaNeiWaie.clear();
	new_14400_secondDaNeie.clear();
	new_14400_secondDaWaie.clear();
	//add
	hour_new_minuteDaNeiWaie.clear();
	minute_new_minuteDaNeiWaie.clear();
	second_new_minuteDaNeiWaie.clear();
	new_minuteDaNeie.clear();
	new_minuteDaWaie.clear();
	//以下合约动力等级
	//ForceXD
	hour_new_original_secondForceXD.clear();
	minute_new_original_secondForceXD.clear();
	second_new_original_secondForceXD.clear();
	new_original_secondForceXD.clear();
	new_14400_forceXDTimeflag.clear();
	hour_new_14400_secondForceXD.clear();
	minute_new_14400_secondForceXD.clear();
	second_new_14400_secondForceXD.clear();
	new_14400_secondForceXD.clear();
	hour_minuteForceXD.clear();
	minute_minuteForceXD.clear();
	second_minuteForceXD.clear();
	new_minuteForceXD.clear();
	vDongliLiDengJi.clear();

	emacq=-1e15;
	commonRating=-1e15;

	hour_new_original_secondOrderRatio.clear();
	minute_new_original_secondOrderRatio.clear();
	second_new_original_secondOrderRatio.clear();
	new_original_secondOrderRatio1.clear();
	new_original_secondOrderRatio2.clear();
	new_14400_OrderRatioTimeflag.clear();
	hour_new_14400_secondOrderRatio.clear();
	minute_new_14400_secondOrderRatio.clear();
	second_new_14400_secondOrderRatio.clear();
	new_14400_secondOrderRatio1.clear();
	new_14400_secondOrderRatio2.clear();
	hour_minuteOrderRatio.clear();
	minute_minuteOrderRatio.clear();
	second_minuteOrderRatio.clear();
	new_minuteOrderRatio1.clear();
	new_minuteOrderRatio2.clear();
	vWeiBiDengJi.clear();

	orderRatio1=-1e15;
	orderRatio2=-1e15;
	///////////////////////////////////////
	Jia_Liang_jianzhiduis.clear();

	movedata=-1e15;
	vZhuLiDengJi.clear();
	hour_vZhuLiDengJi.clear();
	minute_vZhuLiDengJi.clear();
	second_vZhuLiDengJi.clear();
	bigFlow.clear();
	hour_bigFlow.clear();
	minute_bigFlow.clear();
	second_bigFlow.clear();

	xunhuancishu=0;


	today=0;
	day_fu1=0;
	day_fu2=0;
	day_fu3=0;
	day_fu4=0;
	day_fu5=0;
	day_fu6=0;//-6这天只用于计算-5天的资金等级
	ave_capital_last5=0.0;
	AveCapital_240_dayfu1.clear();//资金均值
	AveCapital_240_dayfu2.clear();
	AveCapital_240_dayfu3.clear();
	AveCapital_240_dayfu4.clear();
	AveCapital_240_dayfu5.clear();
	Capital_240_dayfu1.clear();//资金本身
	Capital_240_dayfu2.clear();
	Capital_240_dayfu3.clear();
	Capital_240_dayfu4.clear();
	Capital_240_dayfu5.clear();
	mean_5fuAveCot.clear();
	std_5fuAveCot.clear();
	cot_huanchongdai1.clear();
	cot_huanchongdai2.clear();
	cot_huanchongdai3.clear();
	cot_huanchongdai4.clear();

	//委托额 过去5天
	AveWeimairu_240_dayfu1.clear();//委买均值
	AveWeimairu_240_dayfu2.clear();
	AveWeimairu_240_dayfu3.clear();
	AveWeimairu_240_dayfu4.clear();
	AveWeimairu_240_dayfu5.clear();
	Weimairu_240_dayfu1.clear();//委买本身
	Weimairu_240_dayfu2.clear();
	Weimairu_240_dayfu3.clear();
	Weimairu_240_dayfu4.clear();
	Weimairu_240_dayfu5.clear();
	mean_5fuAveWeimairu.clear();
	std_5fuAveWeimairu.clear();
	weimairu_huanchongdai1.clear();
	weimairu_huanchongdai2.clear();
	weimairu_huanchongdai3.clear();
	weimairu_huanchongdai4.clear();

	AveWeimaichu_240_dayfu1.clear();//委卖均值
	AveWeimaichu_240_dayfu2.clear();
	AveWeimaichu_240_dayfu3.clear();
	AveWeimaichu_240_dayfu4.clear();
	AveWeimaichu_240_dayfu5.clear();
	Weimaichu_240_dayfu1.clear();//资金本身
	Weimaichu_240_dayfu2.clear();
	Weimaichu_240_dayfu3.clear();
	Weimaichu_240_dayfu4.clear();
	Weimaichu_240_dayfu5.clear();
	mean_5fuAveWeimaichu.clear();
	std_5fuAveWeimaichu.clear();
	weimaichu_huanchongdai1.clear();
	weimaichu_huanchongdai2.clear();
	weimaichu_huanchongdai3.clear();
	weimaichu_huanchongdai4.clear();
	//以上，上证指数////////////////////////////////////////////////////////
	runTimes=0;

	time_heyuePrice.clear();
	heyuePrice_heibing.clear();
	this_Heyueprice=0.0;
	this_Heyuechengjiaoliang=0.0;
	pre_Heyuechengjiaoliang=0.0;
	pre_pre_Heyuechengjiaoliang=0.0;
	pre_Heyueprice=0.0;
	Heyueprice_lai=false;
	HeyuepriceKK=0;//凡涉及IF合约的，全部由上证指数处理，沪深300都不再处理

	this_ZLDJe=0.0;
	pre_ZLDJe=0.0;
	ZLDJe_lai=false;

	this_daneiE=0.0;
	this_dawaiE=0.0;
	pre_daneiE=0.0;
	pre_dawaiE=0.0;
	daneiwai_lai=false;
	this_ZLDJ=0.0;
	this_ZLDJ_tag=0;
	this_dadanzhulixian=0.0;
	this_dadanliuxiang=0.0;
	max_dadanliuxiang=-1e15;
	min_dadanliuxiang=1e15;
	e_time=0;
	neiwaie_time=0;
	this_bigFlow=0.0;
	max_bigFlow=-1e15;
	min_bigFlow=1e15;
	ZLDJ_lai=false;

	this_ZJDJ=0.0;
	vZiJinDengji.clear();
	this_ZJDJ_tag=0;

	this_forceXD=0.0;
	pre_forceXD=0.0;
	pre_pre_forceXD=0.0;
	this_DLDJ=0.0;
	this_DLDJ_tag=0;
	forceXD_lai=false;
	forceXD_hour=0;
	forceXD_minute=0;
	forceXD_second=0;
	DLDJ_lai=false;

	this_weimairu38=0.0;
	this_weimaichu38=0.0;
	pre_weimairu38=0.0;
	pre_weimaichu38=0.0;
	this_WBDJ=0.0;
	this_WBDJ_tag=0;
	this_weituobi=0;
	weimai38_lai=false;
	weimai38_hour=0;
	weimai38_minute=0;
	weimai38_second=0;
	WBDJ_lai=false;

	this_capital=0.0;
	pre_capital=0.0;
	capital_lai=false;
	Capital_junxian.clear();


	//上证主力评分
	this_zhulipingfen_SH000001=-5;
	pre_zhulipingfen_SH000001=-5;

	//标的指数评分
	this_zhulipingfen=-5;
	this_zhichengpingfen=-5;
	this_paoyapingfen=-5;
	pre_zhulipingfen=-5;
	pre_zhichengpingfen=-5;
	pre_paoyapingfen=-5;
	pre_pre_zhichengpingfen=-5;
	this_modified_zhichengpingfen=-5;//这个带记忆属性，需要分别建立变量
	pingfen_lai=false;
	max_capitalJunXian=-1e15;
	min_capitalJunXian=1e15;
	fazhi_capitalJunXianBianhua=0;
	zhichengfen_modified_hebing.clear();//修正后评分

	this_modified_paoyapingfen=-5;
	paoyafen_modified_hebing;//修正后评分
	paoyapingfen_keep=0;


	this_indexPrice=0.0;
	pre_indexPrice=0.0;
	pre_pre_indexPrice=0.0;
	indexPrice_lai=false;
	//指数价格处理新增变量
	minute_indexprice_kaipinghandle=0;
	pre_minute_indexprice_kaipinghandle=-1;
	ave_price.clear();
	ave_price_minute.clear();
	up_down_ave.clear();
	HuanPingGou_minutePrice.clear();
	vec_IndexPrice_zhangfu.clear();
	zhangfu_GT0_count=0;
	zhangfu_LT0_count=0;
	minutePrice_lai=false;
	max_indexPrice=-1e15;
	min_indexPrice=1e15;
	max_capital=-1e15;
	min_capital=1e15;
	feng_time.clear();
	feng_price.clear();
	feng_cot.clear();
	gu_time.clear();
	gu_price.clear();
	gu_cot.clear();
	pre_ding_indexprice=0.0;
	pre_di_price=0.0;
	DingDiBeiLi_Capital.clear();
	capital_beili_state=0;
	now_is_beili=0;
	count_dingbeili=0;
	count_dibeili=0;
	indexPrice_when_beili=0;
	time_when_beili=0;

	//指数成交额和成交量
	this_chengjiaoliang=0.0;
	this_chengjiaoe=0.0;
	chengjiaoe_lai=false;
	time_indexChengjiaoe;
	pre_minute_chengjiaoe_kaipinghandle=-1;
	pre_chengjiaoe=0.0;
	pre_pre_chengjiaoe=0.0;
	pre_chengjiaoliang=0.0;
	pre_pre_chengjiaoliang=0.0;
	//以上，某日内数据处理，所需变量-------------------------------------------

	//开平仓判断----------------------------------------------------------------------------

	//判断峰谷
	isFeng=false;
	isGu=false;
	now_is_guC=false;
	now_is_fengC=false;
	feng_indexcount.clear();
	gu_indexcount.clear();

	open_state_JuJi_IF=0;
	open_IF.clear();
	hasChicangIF=0;
	open_price_IF=0.0;
	ping_price_IF=0.0;
	this_earning=0;
	//------------------------------
	heyueprices_at_opensignal_for_11.clear();//信号已经准许开仓时的合约价格，但是再等等
	heyueprices_at_opensignal_for_fu11.clear();//信号已经准许开仓时的合约价格，但是再等等
	heyueprices_at_opensignal_for_12.clear();//信号已经准许开仓时的合约价格，但是再等等
	heyueprices_at_opensignal_for_fu12.clear();//信号已经准许开仓时的合约价格，但是再等等

	feng_counts_at_opensignal_for_11.clear();//信号已经准许开仓时的合约价格，但是再等等
	gu_counts_at_opensignal_for_fu11.clear();//信号已经准许开仓时的合约价格，但是再等等
	feng_counts_at_opensignal_for_12.clear();//信号已经准许开仓时的合约价格，但是再等等
	gu_counts_at_opensignal_for_fu12.clear();//信号已经准许开仓时的合约价格，但是再等等
	//------综合防守评分新增-----
	this_weimaichu=0.0;
	pre_weimaichu=0.0;
	this_weimairu=0.0;
	pre_weimairu=0.0;
	new_minuteWeituobi.clear();
	weimai_lai=false;

	max_fuying=-10000;
	min_fukui=1000;

	//根据指数，决定资金参考天数变化
	maxPrice_fu1=-1e10;
	maxPrice_fu2=-1e10;
	maxPrice_fu3=-1e10;
	maxPrice_fu4=-1e10;
	maxPrice_fu5=-1e10;
	minPrice_fu1=1e10;
	minPrice_fu2=1e10;
	minPrice_fu3=1e10;
	minPrice_fu4=1e10;
	minPrice_fu5=1e10;
	need_days=0;
	five_ok=false;

	//------以上，综合防守评分新增-----
	//增加兑现问题20180111
	//过去三天的指数最大最小值
	highIndexprice_3days.clear();
	lowIndexprice_3days.clear();
	vweizhipingfen.clear();
	//
	days=1;

	//runMode=2;//1.实盘    2.历史

	t_ctrl_indexprice.clear();

	//记录开仓值
	open_hour_IF=0;//IF
	open_minute_IF=0;
	open_second_IF=0;
	open_feng_count_IF=0;
	open_gu_count_IF=0;
	open_market_direction_IF=0;
	open_zhicheng_pingfen_IF=0;
	open_paoya_pingfen_IF=0;
	open_zhuli_pingfen_IF=0;
	open_weizhi_pingfen_IF=0;
	open_newminuteindex_size=0;
	kaicangleixing=0;
	open_duo_count=0;
	open_kong_count=0;
	kaicangleixing_keep=0;

	open_zhulidengji=0.0;
	open_zijindengji=0.0;
	open_weibidengji=0.0;
	open_donglidengji=0.0;

	open_lishang=0.0;  //当前期指离最高点 占20日均顶底差的比例
	open_lixia=0.0;    //当前期指离最低点 占20日均顶底差的比例

	open_bodong_count=0;

	open_zhangdiebi=1.0;

	open_S_shang_chu_xia=1.0;
	open_li_junxian=0.0;

	open_zhangfu_index=0.0;

	//新增open
	open_beili_state=0;
	open_dingbeili_count=0;
	open_dibeili_count=0;
	open_chengjiaofengzhi=0;
	open_chengjiaofengzhi_xiaxian=0;
	open_chengjiaofengzhi_shangxian=0;
	open_lishi_chengjiaofengzhi_shangxian=0.0;
	open_lishi_chengjiaofengzhi_xiaxian=0.0;
	open_lishi_chengjiaofengzhi_maxliang=0.0;
	open_indexprice=0;
	open_ave_indexprice=0;
	open_youbaofa=0;
	open_price_IF=0;
	ping_price_IF=0.0;
	open_1_4_IF=0;
	open_2_4_IF=0;
	open_3_4_IF=0;
	open_indexprice_whenbeili=0;
	open_baofakai_allow=0;
	open_kaicangleixing=0;
	open_dingdicha_standard=0;

	open_ZLDJ_tag=0;
	open_ZJDJ_tag=0;
	open_WBDJ_tag=0;
	open_DLDJ_tag=0;

	open_weituobi=0;
	//
	ping_newminuteindex_size=0;
	//-------------------------------------------
	zhulipingfen=0;
	zhichengpingfen=0;
	paoyapingfen=0;
	this_indexpingfen=0;
	market_direction = 0;
	market_direction_forDaoXiang = 0;
	this_chengjiaofengzhi=0.0;
	this_chengjiaofengzhi_shangxian=0.0;
	this_chengjiaofengzhi_xiaxian=0.0;
	middle_tt=-111;

	lishi_chengjiaofengzhi_shangxian=0;
	lishi_chengjiaofengzhi_xiaxian=0;
	lishi_chengjiaofengzhi_liangmax=0;

	kaipan_GT_num=0;//开盘时，高于价格的峰数量
	kaipan_LT_num=0;//开盘时，低于价格的峰数量
	now_GT_num=0;
	now_LT_num=0;
	max_GT_num=-1000;
	min_GT_num=1000;


	//全天合约最大最小值
	max_heyueprice=-1e15;
	min_heyueprice=1e15;
	//合约的四分位
	max_10s_heyueprice=-1e15;
	min_10s_heyueprice=1e15;
	base_hour=0;
	base_minute=0;
	base_second=0;
	now_hour1=0;
	now_minute1=0;
	now_second1=0;

	zhuliheyue_IF.clear();


	//沪深主力汇总
	bidask000001.clear();
	bidask399001.clear();
	//-------------------------------------------------------------------------------------------------
	//heyueprice_period.clear();//改成局部的了
	heyueKDJ_K.clear();
	dingdicha_huyue_10s=0.0;
	baofa_kai_10s=0;

	daoxiang_10s_IF=0;//1上导向  -1下导向
	daoxiang_10s_IF_shangxian=0;
	daoxiang_10s_IF_zhongxian=0;
	daoxiang_10s_IF_xiaxian=0;
	daoxiang_keep_10s=0;
	daoxiang_start_time=0;
	daoxiang_start_indexprice=0;

	youBaofa_10s=0;
	baofa_time=0;

	baofa_kai_allow=0;
	baofa_kai_time=0;

	stds_hou_1_3.clear();
	stds_hou_1_2.clear();

	this_pingMode=0;
	is_jiantingpingkong=0;
	jianting_kaiduo_allow=0;
	fangxiangmaodun=false;
	maodunshi_ding_count=0;
	maodunshi_di_count=0;

	jiesuanjia_IF_fu1=0;
	this_zhangfu_IF=0;

	now_is_big_fukui_IF=false;
	now_is_big_fuying_IF=false;

	has_tupo_shangxian=false;
	has_diepo_xiaxian=false;

	//指数动力线
	vec_donglixian.clear();
	//并列界面指数动力线
	this_donglixian=0.0;
	pre_donglixian=0.0;
	hour_new_original_secondIndexDonglixian.clear();
	minute_new_original_secondIndexDonglixian.clear();
	second_new_original_secondIndexDonglixian.clear();
	new_original_secondIndexDonglixian.clear();
	new_14400_indexdonglixianTimeflag.clear();
	hour_new_14400_secondIndexDonglixian.clear();
	minute_new_14400_secondIndexDonglixian.clear();
	second_new_14400_secondIndexDonglixian.clear();
	new_14400_secondIndexDonglixian.clear();
	hour_new_minuteIndexDonglixian.clear();
	minute_new_minuteIndexDonglixian.clear();
	second_new_minuteIndexDonglixian.clear();
	new_minuteIndexDonglixian.clear();
	//窗口内
	period_time_10s.clear();//上次使用的vector
	period_donglixian_10s.clear();
	period_ifprice_10s.clear();
	period_hour_10s.clear();
	period_minute_10s.clear();
	period_second_10s.clear();
	//窗口内
	period_time_5s.clear();//上次使用的vector
	period_donglixian_5s.clear();
	period_ifprice_5s.clear();
	period_hour_5s.clear();
	period_minute_5s.clear();
	period_second_5s.clear();

	hour_indexDonglixian_kaipinghandle=0;
	minute_indexDonglixian_kaipinghandle=0;
	second_indexDonglixian_kaipinghandle=0;
	pre_hour_indexDonglixian_kaipinghandle=0;
	pre_minute_indexDonglixian_kaipinghandle=-1;
	pre_second_indexDonglixian_kaipinghandle=0;
	pre_pre_indexDonglixian=0.0;

	max_if_10s=-1e15;//动力线窗口用
	min_if_10s=1e15;
	if_3_4_10s=0;
	if_2_4_10s=0;
	if_1_4_10s=0;
	donglixian_max_i_10s=0;
	donglixian_min_i_10s=0;
	start_size_10s=0;

	fenge_num1_10s=0;//
	fenge_num2_10s=0;//
	fenge_num3_10s=0;//
	fenge_num4_10s=0;//

	S_shang_10s=0;
	S_xia_10s=0;
	DLX_S1_S2_GT6_10s=false; //S1上面积  S2下面积
	DLX_S2_S1_GT6_10s=false;
	start_size_10s=0;
	xunfeng_dlx_zouping_10s.clear();
	xunfeng_dlx_zouping_use_10s.clear();
	xunfeng_indexprice_use_10s.clear();
	xunfeng_dlx_zouping_use_di_10s.clear();
	xunfeng_dlx_zouping_use_ding_10s.clear();
	now_is_dingbu_dibu=0;
	indexprice_dingdibu=0;
	start_time_dingdibu=0;
	//以上，指数动力线

	//实盘，实时的秒数据处理为分钟数据
	//资金
	hour_capital_kaipinghandle=0;
	minute_capital_kaipinghandle=0;
	second_capital_kaipinghandle=0;
	pre_hour_capital_kaipinghandle=0;
	pre_minute_capital_kaipinghandle=-1;
	pre_second_capital_kaipinghandle=0;
	pre_pre_capital=0.0;
	//委卖委买
	hour_weimaiweimai_kaipinghandle=0;
	minute_weimaiweimai_kaipinghandle=0;
	second_weimaiweimai_kaipinghandle=0;
	pre_hour_weimaiweimai_kaipinghandle=0;
	pre_minute_weimaiweimai_kaipinghandle=-1;
	pre_second_weimaiweimai_kaipinghandle=0;
	pre_pre_weimairu=0.0;
	pre_pre_weimaichu=0.0;
	//评分
	hour_pingfen_kaipinghandle=0;
	minute_pingfeni_kaipinghandle=0;
	second_pingfen_kaipinghandle=0;
	pre_hour_pingfen_kaipinghandle=0;
	pre_minute_pingfen_kaipinghandle=-1;
	pre_second_pingfen_kaipinghandle=0;
	pre_pre_zhulipingfen=-5;
	pre_pre_zhichengpingfen=-5;
	pre_pre_paoyapingfen=-5;

	//判断波动幅度
	bodong_max_i.clear();
	bodong_min_i.clear();
	bodong_max_price.clear();
	bodong_min_price.clear();
	bodong_this_max_price=-100000;
	bodong_this_min_price=100000;
	bodong_this_max_i=0;
	bodong_this_min_i=0;
	bodong_temp1=0;
	bodong_temp2=0;
	bodong_there_is_up=0;
	bodong_there_is_down=0;

	bodong_count=0;
	//--------------------------------------

	baofa_ping_duo_youxiao =0;
	baofa_ping_kong_youxiao =0;

	//判断期指偏向
	//判断期指偏向
	vpecent_lianzhang_IF.clear();
	vpecent_liandie_IF.clear();
	lianzhang_count_IF=0;
	liandie_count_IF=0;
	zhangdiebi=1.0;
	//以上---------------

	bengpan=false;

	S_junxian_shang=0.01;
	S_junxian_xia=0.01;

	bo_count_add_times.clear(); 
	bo_count_add_time=0;

	vEarnings_today.clear();
	sum_earning_today=0;

	//主程序下单入口用
	kaiduo_keep=false;
	kaikong_keep=false;
	pingduo_keep=false;
	pingkong_keep=false;
	orders_all.clear();
	orders_waiting.clear();
	kaiduo_n=0;
	kaikong_n=0;
	pingduo_n=0;
	pingkong_n=0;
	chuli_ing=0;

	kaiduo_xiadan_ing=false;
	kaikong_xiadan_ing=false;
	pingduo_xiadan_ing=false;
	pingkong_xiadan_ing=false;


	daoxiang_kaiduo_count=0;
	daoxiang_kaikong_count=0;

	//CTP
	hasLogin_trader=false;
	has_jiesuanConfirm=false;
	position_chaxun_duo_youxiangying=false;
	position_chaxun_kong_youxiangying=false;
	nRequestID = 0;

	duanxianchonglian=false;
	//以上CTP
}
struct request_para
{
	string market;
	string code;
	int metaId;
	int startTimeTag;
	int endTimeTag;
};
request_para g_curReq;
bool g_isArrive = false;
vector<MutiTypeDataOneDay> g_tmpRet;
void data_callback(const char* market, const char* code, int metaId, int from, const char* datas, int len)
{
	cout<<"come-------------"<<metaId<<"-------行数:";
	vector<MutiTypeDataOneDay> vdata;

	//decode_json_static(datas, &vdata);
	out_agent::instance().m_decode_json(datas, &vdata);//Linux linux

	cout<<vdata.size()<<endl;
	if(metaId==20)
	{
		cout<<metaId<<endl;
		os_synget_check<<"IF2009问题测试1：vdata.size():"<<vdata.size()<<endl;
	}

	if(from == 1 && !g_isArrive)
	{
		if(!vdata.empty())
		{
			if(
				g_curReq.market == market 
				&& g_curReq.code == code 
				&& g_curReq.metaId == metaId 
				//&& g_curReq.startTimeTag <= vdata[0].m_timeTag 
				//&& g_curReq.endTimeTag >=vdata[0].m_timeTag
				)
			{
				//g_tmpRet = vStructDataValue;
				g_tmpRet = vdata;
				g_isArrive = true;
			}
		}
		if(metaId==20)
		{
			os_synget_check<<"IF2009问题测试2：vdata.size():"<<vdata.size()<<endl;
		}
	}
	if(metaId==20)
	{
		cout<<metaId<<endl;
		os_synget_check<<"IF2009问题测试3：g_tmpRet.size():"<<g_tmpRet.size()<<endl;
	}

	if (from==0)//实盘 
	{
		if(vdata.size()>0)
		{
			start_time=clock();
			//时间处理
			t_real=vdata[0].m_timeTag;
			t_real_int=vdata[0].m_timeTag;
			p_real=gmtime(&t_real);
			cout<<"Get data _";
			cout<<p_real->tm_year+1900<<"-"<<p_real->tm_mon+1<<"-"<<p_real->tm_mday<<"  ";
			cout<<p_real->tm_hour+8<<":"<<p_real->tm_min<<":"<<p_real->tm_sec<<endl;
			hour_Real=p_real->tm_hour+8;
			minute_Real=p_real->tm_min;
			second_Real=p_real->tm_sec;

			if((hour_Real*3600+minute_Real*60+second_Real>=34200&&hour_Real*3600+minute_Real*60+second_Real<41400)
				||(hour_Real*3600+minute_Real*60+second_Real>=46800&&hour_Real*3600+minute_Real*60+second_Real<54000))
			{				
				if(true)
				{
					switch(metaId)
					{
					case 20://合约价格
						{
							os_real_heyueprice_check<<vdata[0].m_timeTag<<"  "<<vdata[0].fields[0].m_double<<endl;

							if(t_real_int!=pre_t_real_1)
							{
								pre_Heyueprice=vdata[0].fields[0].m_double;//数值对比ok
								pre_Heyuechengjiaoliang=vdata[0].fields[1].m_double;
								//保存原始推送数据
								dataRealProcess(-1,1);
								cout<<20<<"-----hueyuprice"<<endl;
							}
							pre_t_real_1=t_real_int;
						}
						break;
					case 25://盘面资金
						{
							os_real_capital_check<<vdata[0].m_timeTag<<"  "<<vdata[0].fields[0].m_double<<endl;

							if(t_real_int!=pre_t_real_2)
							{
								pre_capital=vdata[0].fields[0].m_double;//数值对比ok
								//保存原始推送数据
								dataRealProcess(-1,2);
								cout<<25<<"-----capital"<<endl;
							}
							pre_t_real_2=t_real_int;
						}
						break;
					case 45://指数价格
						{
							os_real_indexprice_check<<vdata[0].m_timeTag<<"  "<<vdata[0].fields[0].m_double<<endl;
							
							if(t_real_int!=pre_t_real_3)
							{
								pre_indexPrice=vdata[0].fields[0].m_double;//数值对比ok
								//保存原始推送数据
								dataRealProcess(-1,3);
								cout<<45<<"-----indexprice"<<endl;
							}
							pre_t_real_3=t_real_int;
						}
						break;
					case 96://成交量 成交额
						{
								os_real_eliang_check<<vdata[0].m_timeTag<<"  "<<vdata[0].fields[0].m_double<<"  ";//量
								os_real_eliang_check<<vdata[0].fields[1].m_double<<endl;//额

							if(t_real_int!=pre_t_real_4)
							{
								pre_chengjiaoliang=vdata[0].fields[0].m_double;
								pre_chengjiaoe=vdata[0].fields[1].m_double;
								pre_ZLDJe=vdata[0].fields[1].m_double;//计算主力等级用的成交额
								//保存原始推送数据
								dataRealProcess(-1,4);
								cout<<96<<"-----e_liang"<<endl;
								ZLDJe_lai=true;
							}
							pre_t_real_4=t_real_int;
						}
						break;
					case 88://动力线
						{
							os_real_donglixian_check<<vdata[0].m_timeTag<<"  "<<vdata[0].fields[0].m_double<<endl;

							if(t_real_int!=pre_t_real_5)
							{
								pre_donglixian=vdata[0].fields[0].m_double;//数值对比ok
								//保存原始推送数据
								dataRealProcess(-1,5);
								cout<<88<<"-----Donglixian"<<endl;
							}
							pre_t_real_5=t_real_int;
						}
						break;
					case 17://大内大外盘
						{
							os_real_daneidawai_check<<vdata[0].m_timeTag<<"  "<<vdata[0].fields[5].m_double<<"  ";//大内
							os_real_daneidawai_check<<vdata[0].fields[7].m_double<<endl;//大外

							if(t_real_int!=pre_t_real_6)
							{
								pre_daneiE=vdata[0].fields[5].m_double;
								pre_dawaiE=vdata[0].fields[7].m_double;
								//保存原始推送数据
								dataRealProcess(-1,6);
								cout<<17<<"-----neiwaipan"<<endl;
								daneiwai_lai=true;
							}
							pre_t_real_6=t_real_int;
						}
						break;
					case 231://评分
						{
							os_real_pingfen_check<<vdata[0].m_timeTag<<"  "<<vdata[0].fields[2].m_double<<"  ";//主力
							os_real_pingfen_check<<vdata[0].fields[1].m_double<<"  ";//支撑
							os_real_pingfen_check<<vdata[0].fields[0].m_double<<endl;//抛压

							if(t_real_int!=pre_t_real_7)
							{
								pre_zhulipingfen=vdata[0].fields[2].m_double;//数值对比ok
								pre_zhichengpingfen=vdata[0].fields[1].m_double;
								pre_paoyapingfen=vdata[0].fields[0].m_double;//数值对比ok
								//保存原始推送数据
								dataRealProcess(-1,7);
								cout<<231<<"-----pingfen"<<endl;
							}
							pre_t_real_7=t_real_int;
						}
						break;
					case 232://计算动力等级用的forceXD
						{
							os_real_forceXD_check<<vdata[0].m_timeTag<<"  "<<vdata[0].fields[0].m_double<<endl;

							if(t_real_int!=pre_t_real_8)
							{
								pre_forceXD=vdata[0].fields[0].m_double;
								//保存原始推送数据
								dataRealProcess(-1,8);
								cout<<232<<"-----forceXD"<<endl;
							}
							pre_t_real_8=t_real_int;
						}
						break;
					case  44://委买委卖
						{
							os_real_weimaiweimai_check<<vdata[0].m_timeTag<<"  "<<vdata[0].fields[0].m_double<<"  ";//买入
							os_real_weimaiweimai_check<<vdata[0].fields[1].m_double<<endl;//卖出

							if(t_real_int!=pre_t_real_9)
							{
								pre_weimairu=vdata[0].fields[0].m_double;//数值对比ok
								pre_weimaichu=vdata[0].fields[1].m_double;
								//保存原始推送数据
								dataRealProcess(-1,9);
								cout<<44<<"-----forceXD"<<endl;
							}
							pre_t_real_9=t_real_int;
						}
						break;
					case  38://委买委卖 秒数据
						{
							os_real_weimai38_check<<vdata[0].m_timeTag<<"  "<<vdata[0].fields[0].m_double<<"  ";//买入
							os_real_weimai38_check<<vdata[0].fields[1].m_double<<endl;//卖出

							if(t_real_int!=pre_t_real_10)
							{
								pre_weimairu38=vdata[0].fields[0].m_double;//数值对比ok
								pre_weimaichu38=vdata[0].fields[1].m_double;
								//保存原始推送数据
								dataRealProcess(-1,10);
								cout<<44<<"-----weimai38"<<endl;
							}
							pre_t_real_10=t_real_int;
						}
						break;
					default:
						break;

					}
				}
			}
		}
	}

	if(g_entrustid != 0)
	{}
}

int time2Seconds(int year, int month, int day, int hour, int minute, int second)
{
	if (0 >= (int) (month -= 2))
	{
		month += 12;     
		year -= 1;
	}

	return ((((int) (year/4 - year/100 + year/400 + 367*month/12 + day) + year*365 - 719499)*24 + hour - 8) 
		*60 + minute) 
		*60 + second; 
}

int time2Seconds(int date, int time)
{
	return time2Seconds(date/10000, date%10000/100, date%100, time/10000, time%10000/100, time%100);
}

vector<MutiTypeDataOneDay> SyncHistoryData(const char* market, const char* code, int metaId, int startTimeTag, int endTimeTag)
{
	g_isArrive = false;
	g_curReq.market = market;
	g_curReq.code = code;
	g_curReq.metaId = metaId;
	g_curReq.startTimeTag = startTimeTag;
	g_curReq.endTimeTag = endTimeTag;
	if(startTimeTag == endTimeTag)
	{
		g_curReq.endTimeTag += 86400;
	}
	//agent_historydata(market,code,metaId,startTimeTag,endTimeTag);
	out_agent::instance().m_agent_historydata(market,code,metaId,startTimeTag,endTimeTag);//Linux linux
	int now = time(NULL);
	/*while(time(NULL) - now < 30)
	{
#ifdef WIN32
		Sleep(1000);
#else
		sleep(100);
#endif
		if(g_isArrive)
		{
			break;
		}
	}*/
	int ncount = 0;
	while (!g_isArrive)
	{
		sleep(1);//Linux linux
		//Sleep(1000);
		ncount += 1;
		if (g_isArrive) break;
		if (ncount >= 20) break;
	}

	if(g_isArrive)
	{
		if(metaId==20)
		{
			os_synget_check<<"IF2009问题测试4：g_tmpRet.size():"<<g_tmpRet.size()<<endl;
		}
		return g_tmpRet;
	}
	else
	{
		if(metaId==20)
		{
			os_synget_check<<"IF2009问题测试4：g_tmpRet.size():"<<g_tmpRet.size()<<"  超时"<<endl;
		}

		g_isArrive = true;
		g_tmpRet.clear();
		return g_tmpRet;
	}
}

vector<StructDataValue> zhuanhuan(vector<MutiTypeDataOneDay> vdata)
{
	vStructDataValue.clear();		
	for (int i=0;i<vdata.size();i++)//历史有全天的行数
	{
		if(days==1 && runMode==2)
		{
			//时间处理
			t_real=vdata[i].m_timeTag+30000;//86400数据
			t_real_int=vdata[i].m_timeTag;
			p_real=gmtime(&t_real);
			cout<<"Get data _";
			cout<<p_real->tm_year+1900<<"-"<<p_real->tm_mon+1<<"-"<<p_real->tm_mday<<"  ";
			//cout<<p_real->tm_hour+8<<":"<<p_real->tm_min<<":"<<p_real->tm_sec<<endl;
			cout<<p_real->tm_hour<<":"<<p_real->tm_min<<":"<<p_real->tm_sec<<endl;//86400数据

			os_check<<(p_real->tm_year+1900)*10000+(p_real->tm_mon+1)*100+p_real->tm_mday<<"    ";
			//date_valid.push_back((p_real->tm_year+1900)*10000+(p_real->tm_mon+1)*100+p_real->tm_mday);
		}
		StructDataValue this_vstruct;
		//this_vstruct.m_metaId=metaId;
		this_vstruct.m_metaId=0;
		this_vstruct.m_timeTag=vdata[i].m_timeTag;
		this_vstruct.m_fields.resize(vdata[i].fields.size());

		for (int j=0;j<this_vstruct.m_fields.size();j++)
		{
			this_vstruct.m_fields[j]=vdata[i].fields[j].m_double;
			os_check<<vdata[i].fields[j].m_double<<"    ";
		}
		os_check<<endl;

		vStructDataValue.push_back(this_vstruct);		
	}
	return vStructDataValue;

}

///报单录入请求响应   //有点问题的报单，都由这个响应，此时OnRtnOrder不会响应
void func_OnRspOrderInsert(CThostFtdcInputOrderField *pInputOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
{
	if(pInputOrder!=NULL)
	{
		get_date_time();
		os_erro_msg<<"trader_class--"<<"报单录入请求响应:OnRspOrderInsert "<<"erroCode:"<<pRspInfo->ErrorID<<"  "<<"erro_msg:"<<pRspInfo->ErrorMsg<<"    ";
		os_erro_msg<<"trader_id:"<<syscall(__NR_gettid)<<endl;
		cout<<"报单录入请求响应:OnRspOrderInsert"<<endl;
	}
	else
	{
		get_date_time();
		os_erro_msg<<"trader_class--"<<"报单录入请求响应:OnRspOrderInsert "<<"pInputOrder为NULL"<<"    ";
		os_erro_msg<<"trader_id:"<<syscall(__NR_gettid)<<endl;
		cout<<"报单录入请求响应:OnRspOrderInsert"<<endl;
	}
}

///报单通知  一次下单，可能多次回调这个  成不成交都会回调 但是有错的时候不会回调，会调OnRspOrderInsert
void func_OnRtnOrder(CThostFtdcOrderField *pOrder) 
{
	if(pOrder!=NULL)
	{
		get_date_time();
		os_erro_msg<<"trader_class--"<<"报单通知:OnRtnOrder"<<"    ";
		os_erro_msg<<"合约："<<pOrder->InstrumentID<<"    "<<"买0卖1："<<pOrder->Direction<<"    "<<"开0平1："<<pOrder->CombOffsetFlag<<"    ";
		os_erro_msg<<"合约状态(未知a未成交还在3撤单5成交0)："<<pOrder->OrderStatus<<"    ";
		os_erro_msg<<"trader_id:"<<syscall(__NR_gettid)<<endl;
		cout<<"报单通知:OnRtnOrder"<<endl;

		bool isThisHeyue=false;
		int maimai=pOrder->Direction - '0';  //char
		int kaiping=atoi(pOrder->CombOffsetFlag); //char[5]
		char status=pOrder->OrderStatus;

		if(true)//委托主推  实盘检查
		{
			//if(strcmp(pOrder->InstrumentID,"IF2009")==0)  //char[31]
			{
				//os_erro_msg<<"Is this heyue!"<<endl;
				isThisHeyue=true;
			}

			if(isThisHeyue==true)
			{
				os_chengjiao_check<<"huidiao_id:"<<syscall(__NR_gettid)<<endl;
				os_chengjiao_check<<"下单信息返回--状态码："<<status<<endl;

				if(pOrder->OrderStatus=='0')//成交。允许主程序再下新单
				{
					os_erro_msg<<today<<"  "<<pt_ctrl->tm_hour+8<<":"<<pt_ctrl->tm_min<<":"<<pt_ctrl->tm_sec<<"  "<<"成交：status==0"<<"  "<<"chuli_ing:"<<chuli_ing<<"  ";
					if(maimai ==0 && kaiping == 0)//买开   --开多
					{
						os_erro_msg<<"成交："<<"买0卖1："<<maimai<<"  "<<"开0平1："<<kaiping<<endl;
						has_chengjiao_shoushu=has_chengjiao_shoushu+1;//已经成交的手数
						jin_duo_count=jin_duo_count+1;
						os_chengjiao_check<<sun1<<"          开多，成交-----"<<xiadan_shoushu<<"-"<<has_chengjiao_shoushu<<endl;
						os_chengjiao_check<<"---------------"<<endl;
					}
					if(maimai ==0 && kaiping == 1)//买平   --平空
					{
						os_erro_msg<<"成交："<<"买0卖1："<<maimai<<"  "<<"开0平1："<<kaiping<<endl;
						has_chengjiao_shoushu=has_chengjiao_shoushu+1;//已经成交的手数
						geye_kong_count=geye_kong_count-1;
						os_chengjiao_check<<sun1<<"          平空，成交----"<<xiadan_shoushu<<"-"<<has_chengjiao_shoushu<<endl;
						os_chengjiao_check<<"---------------"<<endl;
					}
					if(maimai ==1 && kaiping == 0)//卖开   --开空
					{
						os_erro_msg<<"成交："<<"买0卖1："<<maimai<<"  "<<"开0平1："<<kaiping<<endl;
						has_chengjiao_shoushu=has_chengjiao_shoushu+1;//已经成交的手数
						jin_kong_count=jin_kong_count+1;
						os_chengjiao_check<<sun1<<"          开空，成交----"<<xiadan_shoushu<<"-"<<has_chengjiao_shoushu<<endl;
						os_chengjiao_check<<"---------------"<<endl;
					}
					if(maimai ==1 && kaiping == 1)//卖平   --平多
					{
						os_erro_msg<<"成交："<<"买0卖1："<<maimai<<"  "<<"开0平1："<<kaiping<<endl;
						has_chengjiao_shoushu=has_chengjiao_shoushu+1;//已经成交的手数
						geye_duo_count=geye_duo_count-1;
						os_chengjiao_check<<sun1<<"          平多，成交----"<<xiadan_shoushu<<"-"<<has_chengjiao_shoushu<<endl;
						os_chengjiao_check<<"---------------"<<endl;
					}
					//成交后继续下单
					if(true)
					{
						if(has_chengjiao_shoushu<xiadan_shoushu)
						{
							os_chengjiao_check<<"继续下本单"<<endl;

							if(chuli_ing/10000==1)
							{
								if(geye_duo_count>0)//有隔夜多，平多
								{
									os_chengjiao_check<<sun1<<"    已成交，huidiao继续平多"<<"  ";
									os_chengjiao_check<<"有隔夜多，平多"<<endl;
									SellClose(pUserApi);//卖平  验证ok						
								}
								if(geye_duo_count==0 && jin_kong_count<5*xiadan_shoushu)//没有隔夜多，开空
								{
									os_chengjiao_check<<sun1<<"    已成交，huidiao继续平多"<<"  ";
									os_chengjiao_check<<"没有隔夜多，开空"<<endl;
									SellOpen(pUserApi);//卖开  验证ok						
								}					
							}
							if(chuli_ing/10000==2)
							{
								if(geye_kong_count>0)//有隔夜空，平空
								{
									os_chengjiao_check<<sun1<<"    已成交，huidiao继续平空"<<"  ";
									os_chengjiao_check<<"有隔夜空，平空"<<endl;
									BuyClose(pUserApi);//买平  验证ok						
								}
								if(geye_kong_count==0 && jin_duo_count<5*xiadan_shoushu)//没有隔夜空，开多
								{
									//kaiduo_xiadan_ing=true;
									os_chengjiao_check<<sun1<<"    已成交，huidiao继续平空"<<"  ";
									os_chengjiao_check<<"没有隔夜空，开多"<<endl;
									BuyOpen(pUserApi);//买开  验证ok						
								}					
							}
							if(chuli_ing/10000==3)//第二单时kaiduo_keep可能主程序里已经把kaiduo_keep复位了
							{							
								if(geye_kong_count==0 && jin_duo_count<5*xiadan_shoushu)//没有隔夜空，开多
								{
									os_chengjiao_check<<sun1<<"    已成交，huidiao继续开多"<<"  ";
									os_chengjiao_check<<"没有隔夜空，开多"<<endl;
									BuyOpen(pUserApi);//买开  验证ok												
								}
								if(geye_kong_count>0)//有隔夜空，平空
								{
									os_chengjiao_check<<sun1<<"    已成交，huidiao继续开多"<<"  ";
									os_chengjiao_check<<"有隔夜空，平空"<<endl;
									BuyClose(pUserApi);//买平  验证ok						
								}					
							}
							if(chuli_ing/10000==4)
							{
								if(geye_duo_count==0 && jin_kong_count<5*xiadan_shoushu)//没有隔夜多，开空
								{
									os_chengjiao_check<<sun1<<"    已成交，huidiao继续开空"<<"  ";
									os_chengjiao_check<<"没有隔夜多，开空"<<endl;
									SellOpen(pUserApi);//卖开  验证ok						
								}
								if(geye_duo_count>0)//有隔夜多，平多
								{
									os_chengjiao_check<<sun1<<"    已成交，huidiao继续开空"<<"  ";
									os_chengjiao_check<<"有隔夜多，平多"<<endl;
									SellClose(pUserApi);//卖平  验证ok						
								}					
							}

							os_chengjiao_check<<chuli_ing<<"  ";
							os_chengjiao_check<<"指令已下，在上面"<<endl;
						}
						if(has_chengjiao_shoushu==xiadan_shoushu)
						{
							//成交数 达到 下单手数   ：  复位开仓保持标记，停止下单；复位正下单标记，允许以后下新单
							//清除已完成的下单请求号
							my_mutex.lock();
							if(orders_waiting.size()>0)//防止紧急手动操作，程序bug
							{
								orders_waiting.erase(orders_waiting.begin());
							}
							has_chengjiao_shoushu=0;//已成交手数置0
							//继续处理下一个下单请求号
							if(orders_waiting.size()>0)
							{
								os_chengjiao_check<<"另一个下单命令------------------"<<endl;
								chuli_ing = orders_waiting[0];
								//此处继续下单
								if(true)
								{
									if(chuli_ing/10000==1)
									{
										if(geye_duo_count>0)//有隔夜多，平多
										{
											os_chengjiao_check<<sun1<<"    已成交，huidiao继续平多"<<"  ";
											os_chengjiao_check<<"有隔夜多，平多"<<endl;
											SellClose(pUserApi);//卖平  验证ok						
										}
										if(geye_duo_count==0 && jin_kong_count<5*xiadan_shoushu)//没有隔夜多，开空
										{
											os_chengjiao_check<<sun1<<"    已成交，huidiao继续平多"<<"  ";
											os_chengjiao_check<<"没有隔夜多，开空"<<endl;
											SellOpen(pUserApi);//卖开  验证ok						
										}					
									}
									if(chuli_ing/10000==2)
									{
										if(geye_kong_count>0)//有隔夜空，平空
										{
											os_chengjiao_check<<sun1<<"    已成交，huidiao继续平空"<<"  ";
											os_chengjiao_check<<"有隔夜空，平空"<<endl;
											BuyClose(pUserApi);//买平  验证ok						
										}
										if(geye_kong_count==0 && jin_duo_count<5*xiadan_shoushu)//没有隔夜空，开多
										{
											//kaiduo_xiadan_ing=true;
											os_chengjiao_check<<sun1<<"    已成交，huidiao继续平空"<<"  ";
											os_chengjiao_check<<"没有隔夜空，开多"<<endl;
											BuyOpen(pUserApi);//买开  验证ok						
										}					
									}
									if(chuli_ing/10000==3)//第二单时kaiduo_keep可能主程序里已经把kaiduo_keep复位了
									{							
										if(geye_kong_count==0 && jin_duo_count<5*xiadan_shoushu)//没有隔夜空，开多
										{
											os_chengjiao_check<<sun1<<"    已成交，huidiao继续开多"<<"  ";
											os_chengjiao_check<<"没有隔夜空，开多"<<endl;
											BuyOpen(pUserApi);//买开  验证ok												
										}
										if(geye_kong_count>0)//有隔夜空，平空
										{
											os_chengjiao_check<<sun1<<"    已成交，huidiao继续开多"<<"  ";
											os_chengjiao_check<<"有隔夜空，平空"<<endl;
											BuyClose(pUserApi);//买平  验证ok						
										}					
									}
									if(chuli_ing/10000==4)
									{
										if(geye_duo_count==0 && jin_kong_count<5*xiadan_shoushu)//没有隔夜多，开空
										{
											os_chengjiao_check<<sun1<<"    已成交，huidiao继续开空"<<"  ";
											os_chengjiao_check<<"没有隔夜多，开空"<<endl;
											SellOpen(pUserApi);//卖开  验证ok						
										}
										if(geye_duo_count>0)//有隔夜多，平多
										{
											os_chengjiao_check<<sun1<<"    已成交，huidiao继续开空"<<"  ";
											os_chengjiao_check<<"有隔夜多，平多"<<endl;
											SellClose(pUserApi);//卖平  验证ok						
										}					
									}
								}
							}
							else
							{
								kaiduo_xiadan_ing=false;
								kaikong_xiadan_ing=false;
								pingduo_xiadan_ing=false;
								pingkong_xiadan_ing=false;

								os_chengjiao_check<<"已全部成交"<<xiadan_shoushu<<"-"<<has_chengjiao_shoushu<<"  ---------------------------------------------------------"<<endl;
							}
							my_mutex.unlock();
						}
					}
				}
				if(status=='5')//已撤。撤单了继续下单，直到成交
				{
					os_erro_msg<<today<<"  "<<pt_ctrl->tm_hour+8<<":"<<pt_ctrl->tm_min<<":"<<pt_ctrl->tm_sec<<"  "<<"已撤：status==5"<<"  "<<"chuli_ing:"<<chuli_ing<<"  ";

					if(maimai ==1 && kaiping == 1)//卖平   --平多
					{
						os_erro_msg<<"已撤："<<"买0卖1："<<maimai<<"  "<<"开0平1："<<kaiping<<"----";
						//if(chuli_ing/10000==1)//这里有问题，而且这步判断多余
						{
							os_erro_msg<<"    未成交，huidiao平多"<<"  ";
							if(geye_duo_count>0||true)//有隔夜多，平多
							{
								SellClose(pUserApi);//卖平  验证ok
								os_erro_msg<<"已撤，重新下，有隔夜多，平多"<<endl;
							}
							if(geye_duo_count==0 && jin_kong_count<5*xiadan_shoushu&&false)//没有隔夜多，开空 这条多余
							{
								SellOpen(pUserApi);//卖开  验证ok
								os_erro_msg<<"已撤，重新下，没有隔夜多，开空"<<endl;
							}
						}
					}
					if(maimai ==0 && kaiping == 1)//买平   --平空
					{
						os_erro_msg<<"已撤："<<"买0卖1："<<maimai<<"  "<<"开0平1："<<kaiping<<"----";
						//if(chuli_ing/10000==2)//这里有问题，而且这步判断多余
						{
							os_erro_msg<<"    未成交，huidiao平空"<<"  ";
							if(geye_kong_count>0||true)//有隔夜空，平空
							{
								BuyClose(pUserApi);//买平  验证ok
								os_erro_msg<<"已撤，重新下，有隔夜空，平空"<<endl;
							}
							if(geye_kong_count==0 && jin_duo_count<5*xiadan_shoushu&&false)//没有隔夜空，开多 这条多余
							{
								BuyOpen(pUserApi);//买开  验证ok
								os_erro_msg<<"已撤，重新下，没有隔夜空，开多"<<endl;
							}
						}
					}
					if(maimai ==0 && kaiping == 0)//买开   --开多
					{
						os_erro_msg<<"已撤："<<"买0卖1："<<maimai<<"  "<<"开0平1："<<kaiping<<"----";
						//if(chuli_ing/10000==3)//这里有问题，而且这步判断多余
						{
							os_erro_msg<<"    未成交，huidiao开多"<<"  ";
							if(geye_kong_count==0 && jin_duo_count<5*xiadan_shoushu||true)//没有隔夜空，开多
							{
								BuyOpen(pUserApi);//买开  验证ok
								os_erro_msg<<"已撤，重新下，没有隔夜空，开多"<<endl;
							}
							if(geye_kong_count>0&&false)//有隔夜空，平空 这条多余
							{
								BuyClose(pUserApi);//买平  验证ok
								os_erro_msg<<"已撤，重新下，有隔夜空，平空"<<endl;
							}
						}
					}				
					if(maimai ==1 && kaiping == 0)//卖开   --开空
					{
						os_erro_msg<<"已撤："<<"买0卖1："<<maimai<<"  "<<"开0平1："<<kaiping<<endl;
						//if(chuli_ing/10000==4)//这里有问题，而且这步判断多余
						{
							os_erro_msg<<"    未成交，huidiao开空"<<"  ";
							if(geye_duo_count==0 && jin_kong_count<5*xiadan_shoushu||true)//没有隔夜多，开空
							{
								SellOpen(pUserApi);//卖开  验证ok
								os_erro_msg<<"已撤，重新下，没有隔夜多，开空"<<endl;
							}
							if(geye_duo_count>0&&false)//有隔夜多，平多  这条多余
							{
								SellClose(pUserApi);//卖平  验证ok
								os_erro_msg<<"已撤，重新下，有隔夜多，平多"<<endl;
							}
						}
					}
				}
			}
		}
	}
	else
	{
		get_date_time();
		os_erro_msg<<"trader_class--"<<"报单通知:OnRtnOrder    "<<"pOrder为NULL"<<"    ";
		os_erro_msg<<"trader_id:"<<syscall(__NR_gettid)<<endl;
	}
}

///成交通知  不成交就不回调  包括撤单也不回调
void func_OnRtnTrade(CThostFtdcTradeField *pTrade) 
{
	if(pTrade!=NULL)
	{
		get_date_time();
		os_erro_msg<<"trader_class--"<<"成交通知:OnRtnTrade"<<"    ";
		os_erro_msg<<"经纪公司："<<pTrade->BrokerID<<"  "
			<<"账号："<<pTrade->InvestorID<<"  "
			<<"合约："<<pTrade->InstrumentID<<"  "
			<<"买0卖1："<<pTrade->Direction<<"  "
			<<"开0平1："<<pTrade->OffsetFlag<<"  "
			<<"成交价："<<pTrade->Price<<"  "
			<<"数量："<<pTrade->Volume<<"  ";
		os_erro_msg<<"trader_id:"<<syscall(__NR_gettid)<<endl;
		cout<<"成交通知:OnRtnTrade"<<endl;
		//成交后查询
		if(true)
		{
			///请求查询投资者持仓
			CThostFtdcQryInvestorPositionField chicang ={ 0 };
			strcpy(chicang.BrokerID, my_brokeID.c_str());
			strcpy(chicang.InvestorID, my_investID.c_str());
			strcpy(chicang.InstrumentID, my_instrumentID.c_str());
			strcpy(chicang.ExchangeID, my_exchangeID.c_str());
			int a = pUserApi->ReqQryInvestorPosition(&chicang, nRequestID++);
			get_date_time();
			os_erro_msg<<"trader_class--"<<"成交通知:OnRtnTrade    "<<"成交，查询持仓：成功0网络连接失败-1未处理请求超过许可数-2每秒发送请求超过许可数-3："<<a<<endl;

			if(false)
			{
				sleep(2);
				///请求查询投资者持仓明细
				CThostFtdcQryInvestorPositionDetailField chicang_detail_1 ={ 0 };
				strcpy(chicang_detail_1.BrokerID, my_brokeID.c_str());
				strcpy(chicang_detail_1.InvestorID, my_investID.c_str());
				strcpy(chicang_detail_1.InstrumentID, my_instrumentID.c_str());
				strcpy(chicang_detail_1.ExchangeID, my_exchangeID.c_str());
				int b = pUserApi->ReqQryInvestorPositionDetail(&chicang_detail_1, nRequestID++);
				get_date_time();
				os_erro_msg<<"trader_class--"<<"成交通知:OnRtnTrade    "<<"成交，查询持仓明细：成功0网络连接失败-1未处理请求超过许可数-2每秒发送请求超过许可数-3："<<b<<endl;
			}
			//资金查询
			if(true)
			{
				sleep(2);
				cout<<"ask to Account query!"<<endl;
				CThostFtdcQryTradingAccountField a = { 0 };
				strcpy(a.BrokerID, my_brokeID.c_str());
				strcpy(a.InvestorID, my_investID.c_str());
				strcpy(a.CurrencyID, my_currencyID.c_str());
				int ab = pUserApi->ReqQryTradingAccount(&a, nRequestID++);  //返回的ab什么意思 去接口说明文档里查
				get_date_time();
				os_erro_msg<<"trader_class--"<<"成交通知:OnRtnTrade    "<<"成交，查询资金：成功0网络连接失败-1未处理请求超过许可数-2每秒发送请求超过许可数-3："<<ab<<endl;
			}
		}
	}
	else
	{
		get_date_time();
		os_erro_msg<<"trader_class--"<<"成交通知:OnRtnTrade    "<<"pTrade为NULL"<<"    ";
		os_erro_msg<<"trader_id:"<<syscall(__NR_gettid)<<endl;
	}
}

void read_lishifengzhi()
{
	ofstream os_fengzhi_prepare_check("JuJiZhanfa_data/os_fengzhi_prepare_check.txt");//建立这个文件用于保存读取后的成交峰值，用于检查

	//每天实盘时，从os_JiaLiang_IF_fengzhi.txt（化名os_fengzhi_read_prepare.txt）中先读取准备好的历史成交峰值
	ifstream myfile("JuJiZhanfa_data/os_fengzhi_read_prepare.txt"); //三个文件实盘跑完必须立即改名，后边加1  否则会覆盖
	string temp;//实盘检查

	double this_jia=0;
	double this_liang=0;
	int i=0;
	
	//while(getline(myfile,temp,'\r')) //有时候换行不管用  两行读成一行
	while(getline(myfile,temp))
	{ 
		i++;
		stringstream sstr;
		sstr<<temp;

		//os_fengzhi_prepare_check<<temp<<"  "<<i<<endl;

		if(i%2==1)
		{
			double x;
			sstr>>x;
			this_jia=x;
		}
		if(i%2==0)
		{
			double x;
			sstr>>x;
			this_liang=x;

			os_fengzhi_prepare_check<<this_jia<<"  "<<this_liang<<endl;

			if(this_jia>2.5&&this_liang>2.1)
			{
				os_fengzhi_prepare_check<<"ok"<<endl;
			}
			
			v_chengjiaofengzhi_lishi.push_back(this_jia);
			v_chengjiaofengzhi_liang_lishi.push_back(this_liang);
		}		
	}
	if(false)//
	{
		v_chengjiaofengzhi_lishi.push_back(4050);
		v_chengjiaofengzhi_liang_lishi.push_back(1060);
		v_chengjiaofengzhi_lishi.push_back(4075);
		v_chengjiaofengzhi_liang_lishi.push_back(1266);
		v_chengjiaofengzhi_lishi.push_back(4090);
		v_chengjiaofengzhi_liang_lishi.push_back(650);
		v_chengjiaofengzhi_lishi.push_back(4140);
		v_chengjiaofengzhi_liang_lishi.push_back(526);
	}
}

void get_date_time()
{
	int year = 0;//年
	int month = 0;//月
	int day = 0;//日
	int hour = 0;//时
	int minute = 0;//分
	int second = 0;//秒
	if (Heyueprice_lai)
	{
		hour = pt_ctrl->tm_hour+8;//时
		minute = pt_ctrl->tm_min;//分
		second = pt_ctrl->tm_sec;//秒
	}

	cout<<today<<"  "<<hour<<":"<<minute<<":"<<second<<endl;
	os_erro_msg<<today<<"  "<<hour<<":"<<minute<<":"<<second<<"    ";
}

void BuyOpen(CThostFtdcTraderApi *pUserApi)
{
	//买开
	CThostFtdcInputOrderField ord = { 0 };
	strcpy(ord.BrokerID, my_brokeID.c_str());
	strcpy(ord.InvestorID, my_investID.c_str());
	strcpy(ord.InstrumentID, my_instrumentID.c_str());
	//strcpy_s(ord.UserID, g_chUserID);
	////strcpy_s(ord.OrderRef, "");
	ord.OrderPriceType = THOST_FTDC_OPT_LastPrice;
	///任意价#define THOST_FTDC_OPT_AnyPrice '1'
	///限价#define THOST_FTDC_OPT_LimitPrice '2'
	///最优价#define THOST_FTDC_OPT_BestPrice '3'
	///最新价#define THOST_FTDC_OPT_LastPrice '4'
	ord.Direction = THOST_FTDC_D_Buy;//买		    // 买 #define THOST_FTDC_D_Buy '0' //卖 #define THOST_FTDC_D_Sell '1'
	ord.CombOffsetFlag[0] = THOST_FTDC_OF_Open;		// 开仓 #define THOST_FTDC_OF_Open '0'	//平仓 #define THOST_FTDC_OF_Close '1'
	ord.CombHedgeFlag[0] = THOST_FTDC_HF_Speculation;// 投机#define THOST_FTDC_HF_Speculation '1'  //套利#define THOST_FTDC_HF_Arbitrage '2'  //套保#define THOST_FTDC_HF_Hedge '3'	
	ord.LimitPrice = pre_Heyueprice+0.2;
	ord.VolumeTotalOriginal = 1;
	ord.TimeCondition = THOST_FTDC_TC_GFD; //立即完成，否则撤销#define THOST_FTDC_TC_IOC '1'  //本节有效#define THOST_FTDC_TC_GFS '2'  //当日有效#define THOST_FTDC_TC_GFD '3'
	ord.VolumeCondition = THOST_FTDC_VC_AV;///任何数量
	ord.MinVolume = 1;
	ord.ContingentCondition = THOST_FTDC_CC_Immediately;//立即   //触发条件
	//ord.StopPrice = 0;
	ord.ForceCloseReason = THOST_FTDC_FCC_NotForceClose;//非强平
	ord.IsAutoSuspend = 0;
	strcpy(ord.ExchangeID, "CFFEX");//必须填  交易所代码 CFFEX中金所
	int a = pUserApi->ReqOrderInsert(&ord, 0);
	get_date_time();
	os_erro_msg<<"下单：买开  成功0网络连接失败-1未处理请求超过许可数-2每秒发送请求超过许可数-3："<<a<<endl;
}
void BuyClose(CThostFtdcTraderApi *pUserApi)
{
	//买平
	CThostFtdcInputOrderField ord = { 0 };
	strcpy(ord.BrokerID, my_brokeID.c_str());
	strcpy(ord.InvestorID, my_investID.c_str());
	strcpy(ord.InstrumentID, my_instrumentID.c_str());
	//strcpy_s(ord.UserID, g_chUserID);
	////strcpy_s(ord.OrderRef, "");
	ord.OrderPriceType = THOST_FTDC_OPT_LastPrice;
	///任意价#define THOST_FTDC_OPT_AnyPrice '1'
	///限价#define THOST_FTDC_OPT_LimitPrice '2'
	///最优价#define THOST_FTDC_OPT_BestPrice '3'
	///最新价#define THOST_FTDC_OPT_LastPrice '4'
	ord.Direction = THOST_FTDC_D_Buy;//买		    // 买 #define THOST_FTDC_D_Buy '0' //卖 #define THOST_FTDC_D_Sell '1'
	ord.CombOffsetFlag[0] = THOST_FTDC_OF_Close;		// 开仓 #define THOST_FTDC_OF_Open '0'	//平仓 #define THOST_FTDC_OF_Close '1'
	ord.CombHedgeFlag[0] = THOST_FTDC_HF_Speculation;// 投机#define THOST_FTDC_HF_Speculation '1'  //套利#define THOST_FTDC_HF_Arbitrage '2'  //套保#define THOST_FTDC_HF_Hedge '3'	
	ord.LimitPrice = pre_Heyueprice+0.2;
	ord.VolumeTotalOriginal = 1;
	ord.TimeCondition = THOST_FTDC_TC_GFD; //立即完成，否则撤销#define THOST_FTDC_TC_IOC '1'  //本节有效#define THOST_FTDC_TC_GFS '2'  //当日有效#define THOST_FTDC_TC_GFD '3'
	ord.VolumeCondition = THOST_FTDC_VC_AV;///任何数量
	ord.MinVolume = 1;
	ord.ContingentCondition = THOST_FTDC_CC_Immediately;//立即
	//ord.StopPrice = 0;
	ord.ForceCloseReason = THOST_FTDC_FCC_NotForceClose;//非强平
	ord.IsAutoSuspend = 0;
	strcpy(ord.ExchangeID, "CFFEX");//必须填  交易所代码 CFFEX中金所
	int a = pUserApi->ReqOrderInsert(&ord, 0);
	get_date_time();
	os_erro_msg<<"下单：买平  成功0网络连接失败-1未处理请求超过许可数-2每秒发送请求超过许可数-3："<<a<<endl;
}
void SellOpen(CThostFtdcTraderApi *pUserApi)
{
	//卖开
	CThostFtdcInputOrderField ord = { 0 };
	strcpy(ord.BrokerID, my_brokeID.c_str());
	strcpy(ord.InvestorID, my_investID.c_str());
	strcpy(ord.InstrumentID, my_instrumentID.c_str());
	//strcpy_s(ord.UserID, g_chUserID);
	////strcpy_s(ord.OrderRef, "");
	ord.OrderPriceType = THOST_FTDC_OPT_LastPrice;
	///任意价#define THOST_FTDC_OPT_AnyPrice '1'  不被支持的报单类型
	///限价#define THOST_FTDC_OPT_LimitPrice '2'  //ok
	///最优价#define THOST_FTDC_OPT_BestPrice '3'  //不被支持的报单类型
	///最新价#define THOST_FTDC_OPT_LastPrice '4'  //报单字段错误
	ord.Direction = THOST_FTDC_D_Sell;//卖		    // 买 #define THOST_FTDC_D_Buy '0' //卖 #define THOST_FTDC_D_Sell '1'
	ord.CombOffsetFlag[0] = THOST_FTDC_OF_Open;		// 开仓 #define THOST_FTDC_OF_Open '0'	//平仓 #define THOST_FTDC_OF_Close '1'
	ord.CombHedgeFlag[0] = THOST_FTDC_HF_Speculation;// 投机#define THOST_FTDC_HF_Speculation '1'  //套利#define THOST_FTDC_HF_Arbitrage '2'  //套保#define THOST_FTDC_HF_Hedge '3'	
	ord.LimitPrice = pre_Heyueprice-0.2;
	ord.VolumeTotalOriginal = 1;
	ord.TimeCondition = THOST_FTDC_TC_GFD; //立即完成，否则撤销#define THOST_FTDC_TC_IOC '1'  //本节有效#define THOST_FTDC_TC_GFS '2'  //当日有效#define THOST_FTDC_TC_GFD '3'
	ord.VolumeCondition = THOST_FTDC_VC_AV;///任何数量
	ord.MinVolume = 1;
	ord.ContingentCondition = THOST_FTDC_CC_Immediately;//立即
	//ord.StopPrice = 0;
	ord.ForceCloseReason = THOST_FTDC_FCC_NotForceClose;//非强平
	ord.IsAutoSuspend = 0;
	strcpy(ord.ExchangeID, "CFFEX");//必须填  交易所代码 CFFEX中金所
	int a = pUserApi->ReqOrderInsert(&ord, 0);
	get_date_time();
	os_erro_msg<<"下单：卖开  成功0网络连接失败-1未处理请求超过许可数-2每秒发送请求超过许可数-3："<<a<<endl;

	//	///立即完成，否则撤销
	//#define THOST_FTDC_TC_IOC '1'  //验证ok 不成交就撤单  （程序化 不管市价还是限价，得用这个）
	//	///本节有效
	//#define THOST_FTDC_TC_GFS '2'
	//	///当日有效
	//#define THOST_FTDC_TC_GFD '3'  //不成交就变成委托单  目前不要委托单
	//	///指定日期前有效
	//#define THOST_FTDC_TC_GTD '4'
	//	///撤销前有效
	//#define THOST_FTDC_TC_GTC '5' //不被支持的报单类型
	//	///集合竞价有效
	//#define THOST_FTDC_TC_GFA '6'
}
void SellClose(CThostFtdcTraderApi *pUserApi)
{
	//卖平
	CThostFtdcInputOrderField ord = { 0 };
	strcpy(ord.BrokerID, my_brokeID.c_str());
	strcpy(ord.InvestorID, my_investID.c_str());
	strcpy(ord.InstrumentID, my_instrumentID.c_str());
	//strcpy_s(ord.UserID, g_chUserID);
	////strcpy_s(ord.OrderRef, "");
	ord.OrderPriceType = THOST_FTDC_OPT_LastPrice;
	///任意价#define THOST_FTDC_OPT_AnyPrice '1'
	///限价#define THOST_FTDC_OPT_LimitPrice '2'
	///最优价#define THOST_FTDC_OPT_BestPrice '3'
	///最新价#define THOST_FTDC_OPT_LastPrice '4'
	ord.Direction = THOST_FTDC_D_Sell;//卖	    // 买 #define THOST_FTDC_D_Buy '0' //卖 #define THOST_FTDC_D_Sell '1'
	ord.CombOffsetFlag[0] = THOST_FTDC_OF_Close;		// 开仓 #define THOST_FTDC_OF_Open '0'	//平仓 #define THOST_FTDC_OF_Close '1'
	ord.CombHedgeFlag[0] = THOST_FTDC_HF_Speculation;// 投机#define THOST_FTDC_HF_Speculation '1'  //套利#define THOST_FTDC_HF_Arbitrage '2'  //套保#define THOST_FTDC_HF_Hedge '3'	
	ord.LimitPrice = pre_Heyueprice-0.2;
	ord.VolumeTotalOriginal = 1;
	ord.TimeCondition = THOST_FTDC_TC_GFD; //立即完成，否则撤销#define THOST_FTDC_TC_IOC '1'  //本节有效#define THOST_FTDC_TC_GFS '2'  //当日有效#define THOST_FTDC_TC_GFD '3'
	ord.VolumeCondition = THOST_FTDC_VC_AV;///任何数量
	ord.MinVolume = 1;
	ord.ContingentCondition = THOST_FTDC_CC_Immediately;//立即
	//ord.StopPrice = 0;
	ord.ForceCloseReason = THOST_FTDC_FCC_NotForceClose;//非强平
	ord.IsAutoSuspend = 0;
	strcpy(ord.ExchangeID, "CFFEX");//必须填  交易所代码 CFFEX中金所
	int a = pUserApi->ReqOrderInsert(&ord, 0);
	get_date_time();
	os_erro_msg<<"下单：卖平  成功0网络连接失败-1未处理请求超过许可数-2每秒发送请求超过许可数-3："<<a<<endl;
}

